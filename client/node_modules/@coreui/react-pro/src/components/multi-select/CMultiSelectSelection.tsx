import React, { forwardRef, HTMLAttributes } from 'react'
import PropTypes from 'prop-types'

import { Option } from './CMultiSelect'

export interface CMultiSelectSelectionProps extends HTMLAttributes<HTMLSpanElement> {
  multiple?: boolean
  onRemove?: (option: Option) => void
  search?: boolean
  selected?: Array<Option>
  selectionType?: 'counter' | 'tags' | 'text'
  selectionTypeCounterText?: string
}

export const CMultiSelectSelection = forwardRef<HTMLSpanElement, CMultiSelectSelectionProps>(
  ({ multiple, onRemove, search, selected = [], selectionType, selectionTypeCounterText }, ref) => {
    return (
      <span className="form-multi-select-selection" ref={ref}>
        {multiple &&
          selectionType === 'counter' &&
          !search &&
          `${selected.length} ${selectionTypeCounterText}`}
        {multiple &&
          selectionType === 'tags' &&
          selected.map((option: Option, index: number) => {
            if (selectionType === 'tags') {
              return (
                <span className="form-multi-select-tag" key={index}>
                  {option.text}
                  {!option.disabled && (
                    <button
                      className="form-multi-select-tag-delete close"
                      aria-label="Close"
                      onClick={() => onRemove && onRemove(option)}
                    >
                      <span aria-hidden="true">Ã—</span>
                    </button>
                  )}
                </span>
              )
            }
            return
          })}
        {multiple && selectionType === 'text' && selected.map((option) => option.text).join(', ')}
        {!multiple && !search && selected.map((option) => option.text)[0]}
      </span>
    )
  },
)

CMultiSelectSelection.propTypes = {
  multiple: PropTypes.bool,
  onRemove: PropTypes.func,
  search: PropTypes.bool,
  selected: PropTypes.array,
  selectionType: PropTypes.oneOf(['counter', 'tags', 'text']),
  selectionTypeCounterText: PropTypes.string,
}

CMultiSelectSelection.displayName = 'CMultiSelectSelection'
