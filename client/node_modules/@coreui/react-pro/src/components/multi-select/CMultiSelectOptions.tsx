import React, { forwardRef, HTMLAttributes, ReactNode } from 'react'
import PropTypes from 'prop-types'
import classNames from 'classnames'

import { Option } from './CMultiSelect'

export interface CMultiSelectOptionsProps extends HTMLAttributes<HTMLDivElement> {
  handleOptionOnClick?: (option: Option) => void
  options: Option[]
  optionsMaxHeight?: number | string
  optionsStyle?: 'checkbox' | 'text'
  searchNoResultsLabel?: string | ReactNode
}

export const CMultiSelectOptions = forwardRef<HTMLDivElement, CMultiSelectOptionsProps>(
  ({ handleOptionOnClick, options, optionsMaxHeight, optionsStyle, searchNoResultsLabel }, ref) => {
    const createOptions = (options: Option[]) => {
      return options.length > 0 ? (
        options.map((option: Option, index: number) => {
          return option.options ? (
            <div className="form-multi-select-options" key={index}>
              <div className="form-multi-select-optgroup-label">{option.label}</div>
              {createOptions(option.options)}
            </div>
          ) : (
            <div
              className={classNames('form-multi-select-option', {
                'form-multi-select-option-with-checkbox': optionsStyle === 'checkbox',
                'form-multi-selected': option.selected,
                disabled: option.disabled,
              })}
              key={index}
              onClick={() => handleOptionOnClick && handleOptionOnClick(option)}
            >
              {option.text}
            </div>
          )
        })
      ) : (
        <div className="form-multi-select-options-empty">{searchNoResultsLabel}</div>
      )
    }
    return (
      <div
        className="form-multi-select-options"
        {...(optionsMaxHeight !== 'auto' && {
          style: { maxHeight: optionsMaxHeight, overflow: 'scroll' },
        })}
        ref={ref}
      >
        {createOptions(options)}
      </div>
    )
  },
)

CMultiSelectOptions.propTypes = {
  handleOptionOnClick: PropTypes.func,
  options: PropTypes.array.isRequired,
  optionsMaxHeight: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
  optionsStyle: PropTypes.oneOf(['checkbox', 'text']),
  searchNoResultsLabel: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),
}

CMultiSelectOptions.displayName = 'CMultiSelectOptions'
