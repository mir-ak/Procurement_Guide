import React, { FC, HTMLAttributes, useContext } from 'react'
import PropTypes from 'prop-types'
import classNames from 'classnames'
import { Reference } from 'react-popper'

import { Triggers, triggerPropType } from '../Types'

import { CDropdownContext } from './CDropdown'

export interface CDropdownToggleCustomProps extends HTMLAttributes<HTMLDivElement> {
  /**
   * Toggle the disabled state for the component.
   */
  disabled?: boolean
  /**
   * Sets which event handlers youâ€™d like provided to your toggle prop. You can specify one trigger or an array of them.
   *
   * @type 'hover' | 'focus' | 'click'
   */
  trigger?: Triggers | Triggers[]
}

export const CDropdownToggleCustom: FC<CDropdownToggleCustomProps> = ({
  children,
  className,
  disabled,
  trigger = 'click',
  ...rest
}) => {
  const { popper, visible, setVisible } = useContext(CDropdownContext)
  const _className = classNames(className)

  const triggers = {
    ...((trigger === 'click' || trigger.includes('click')) &&
      !disabled && {
        onClick: (event: React.MouseEvent<HTMLElement>) => {
          event.preventDefault()
          setVisible(!visible)
        },
      }),
    ...((trigger === 'click-init' || trigger.includes('click-init')) &&
      !disabled && {
        onClick: (event: React.MouseEvent<HTMLElement>) => {
          event.preventDefault()
          setVisible(true)
        },
      }),
    ...((trigger === 'focus' || trigger.includes('focus')) &&
      !disabled && {
        onFocus: () => setVisible(true),
        onBlur: () => setVisible(false),
      }),
  }

  const togglerProps = {
    className: _className,
    'aria-expanded': visible,
    ...triggers,
  }

  // We use any because Toggler can be `a` as well as `button`.
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  const Toggler = (ref?: React.Ref<any>) => {
    return (
      <div {...togglerProps} {...rest} ref={ref}>
        {children}
      </div>
    )
  }

  return popper ? <Reference>{({ ref }) => Toggler(ref)}</Reference> : Toggler()
}

CDropdownToggleCustom.propTypes = {
  children: PropTypes.node,
  className: PropTypes.string,
  disabled: PropTypes.bool,
  trigger: triggerPropType,
}

CDropdownToggleCustom.displayName = 'CDropdownToggleCustom'
