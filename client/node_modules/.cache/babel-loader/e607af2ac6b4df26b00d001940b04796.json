{"ast":null,"code":"import { getApp, _getProvider, SDK_VERSION as SDK_VERSION$1, _registerComponent, registerVersion } from '@firebase/app';\nimport { Component } from '@firebase/component';\nimport { stringify, jsonEval, contains, assert, base64, stringToByteArray, Sha1, isNodeSdk, deepCopy, base64Encode, isMobileCordova, stringLength, Deferred, safeGet, isAdmin, isValidFormat, isEmpty, isReactNative, assertionError, map, querystring, errorPrefix, getModularInstance, createMockUserToken } from '@firebase/util';\nimport { Logger, LogLevel } from '@firebase/logger';\nconst name = \"@firebase/database\";\nconst version = \"0.12.5\";\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/** The semver (www.semver.org) version of the SDK. */\n\nlet SDK_VERSION = '';\n/**\r\n * SDK_VERSION should be set before any database instance is created\r\n * @internal\r\n */\n\nfunction setSDKVersion(version) {\n  SDK_VERSION = version;\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Wraps a DOM Storage object and:\r\n * - automatically encode objects as JSON strings before storing them to allow us to store arbitrary types.\r\n * - prefixes names with \"firebase:\" to avoid collisions with app data.\r\n *\r\n * We automatically (see storage.js) create two such wrappers, one for sessionStorage,\r\n * and one for localStorage.\r\n *\r\n */\n\n\nclass DOMStorageWrapper {\n  /**\r\n   * @param domStorage_ - The underlying storage object (e.g. localStorage or sessionStorage)\r\n   */\n  constructor(domStorage_) {\n    this.domStorage_ = domStorage_; // Use a prefix to avoid collisions with other stuff saved by the app.\n\n    this.prefix_ = 'firebase:';\n  }\n  /**\r\n   * @param key - The key to save the value under\r\n   * @param value - The value being stored, or null to remove the key.\r\n   */\n\n\n  set(key, value) {\n    if (value == null) {\n      this.domStorage_.removeItem(this.prefixedName_(key));\n    } else {\n      this.domStorage_.setItem(this.prefixedName_(key), stringify(value));\n    }\n  }\n  /**\r\n   * @returns The value that was stored under this key, or null\r\n   */\n\n\n  get(key) {\n    const storedVal = this.domStorage_.getItem(this.prefixedName_(key));\n\n    if (storedVal == null) {\n      return null;\n    } else {\n      return jsonEval(storedVal);\n    }\n  }\n\n  remove(key) {\n    this.domStorage_.removeItem(this.prefixedName_(key));\n  }\n\n  prefixedName_(name) {\n    return this.prefix_ + name;\n  }\n\n  toString() {\n    return this.domStorage_.toString();\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * An in-memory storage implementation that matches the API of DOMStorageWrapper\r\n * (TODO: create interface for both to implement).\r\n */\n\n\nclass MemoryStorage {\n  constructor() {\n    this.cache_ = {};\n    this.isInMemoryStorage = true;\n  }\n\n  set(key, value) {\n    if (value == null) {\n      delete this.cache_[key];\n    } else {\n      this.cache_[key] = value;\n    }\n  }\n\n  get(key) {\n    if (contains(this.cache_, key)) {\n      return this.cache_[key];\n    }\n\n    return null;\n  }\n\n  remove(key) {\n    delete this.cache_[key];\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Helper to create a DOMStorageWrapper or else fall back to MemoryStorage.\r\n * TODO: Once MemoryStorage and DOMStorageWrapper have a shared interface this method annotation should change\r\n * to reflect this type\r\n *\r\n * @param domStorageName - Name of the underlying storage object\r\n *   (e.g. 'localStorage' or 'sessionStorage').\r\n * @returns Turning off type information until a common interface is defined.\r\n */\n\n\nconst createStoragefor = function (domStorageName) {\n  try {\n    // NOTE: just accessing \"localStorage\" or \"window['localStorage']\" may throw a security exception,\n    // so it must be inside the try/catch.\n    if (typeof window !== 'undefined' && typeof window[domStorageName] !== 'undefined') {\n      // Need to test cache. Just because it's here doesn't mean it works\n      const domStorage = window[domStorageName];\n      domStorage.setItem('firebase:sentinel', 'cache');\n      domStorage.removeItem('firebase:sentinel');\n      return new DOMStorageWrapper(domStorage);\n    }\n  } catch (e) {} // Failed to create wrapper.  Just return in-memory storage.\n  // TODO: log?\n\n\n  return new MemoryStorage();\n};\n/** A storage object that lasts across sessions */\n\n\nconst PersistentStorage = createStoragefor('localStorage');\n/** A storage object that only lasts one session */\n\nconst SessionStorage = createStoragefor('sessionStorage');\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nconst logClient = new Logger('@firebase/database');\n/**\r\n * Returns a locally-unique ID (generated by just incrementing up from 0 each time its called).\r\n */\n\nconst LUIDGenerator = function () {\n  let id = 1;\n  return function () {\n    return id++;\n  };\n}();\n/**\r\n * Sha1 hash of the input string\r\n * @param str - The string to hash\r\n * @returns {!string} The resulting hash\r\n */\n\n\nconst sha1 = function (str) {\n  const utf8Bytes = stringToByteArray(str);\n  const sha1 = new Sha1();\n  sha1.update(utf8Bytes);\n  const sha1Bytes = sha1.digest();\n  return base64.encodeByteArray(sha1Bytes);\n};\n\nconst buildLogMessage_ = function () {\n  let message = '';\n\n  for (let i = 0; i < arguments.length; i++) {\n    const arg = i < 0 || arguments.length <= i ? undefined : arguments[i];\n\n    if (Array.isArray(arg) || arg && typeof arg === 'object' && // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    typeof arg.length === 'number') {\n      message += buildLogMessage_.apply(null, arg);\n    } else if (typeof arg === 'object') {\n      message += stringify(arg);\n    } else {\n      message += arg;\n    }\n\n    message += ' ';\n  }\n\n  return message;\n};\n/**\r\n * Use this for all debug messages in Firebase.\r\n */\n\n\nlet logger = null;\n/**\r\n * Flag to check for log availability on first log message\r\n */\n\nlet firstLog_ = true;\n/**\r\n * The implementation of Firebase.enableLogging (defined here to break dependencies)\r\n * @param logger_ - A flag to turn on logging, or a custom logger\r\n * @param persistent - Whether or not to persist logging settings across refreshes\r\n */\n\nconst enableLogging$1 = function (logger_, persistent) {\n  assert(!persistent || logger_ === true || logger_ === false, \"Can't turn on custom loggers persistently.\");\n\n  if (logger_ === true) {\n    logClient.logLevel = LogLevel.VERBOSE;\n    logger = logClient.log.bind(logClient);\n\n    if (persistent) {\n      SessionStorage.set('logging_enabled', true);\n    }\n  } else if (typeof logger_ === 'function') {\n    logger = logger_;\n  } else {\n    logger = null;\n    SessionStorage.remove('logging_enabled');\n  }\n};\n\nconst log = function () {\n  if (firstLog_ === true) {\n    firstLog_ = false;\n\n    if (logger === null && SessionStorage.get('logging_enabled') === true) {\n      enableLogging$1(true);\n    }\n  }\n\n  if (logger) {\n    for (var _len = arguments.length, varArgs = new Array(_len), _key2 = 0; _key2 < _len; _key2++) {\n      varArgs[_key2] = arguments[_key2];\n    }\n\n    const message = buildLogMessage_.apply(null, varArgs);\n    logger(message);\n  }\n};\n\nconst logWrapper = function (prefix) {\n  return function () {\n    for (var _len2 = arguments.length, varArgs = new Array(_len2), _key3 = 0; _key3 < _len2; _key3++) {\n      varArgs[_key3] = arguments[_key3];\n    }\n\n    log(prefix, ...varArgs);\n  };\n};\n\nconst error = function () {\n  const message = 'FIREBASE INTERNAL ERROR: ' + buildLogMessage_(...arguments);\n  logClient.error(message);\n};\n\nconst fatal = function () {\n  const message = `FIREBASE FATAL ERROR: ${buildLogMessage_(...arguments)}`;\n  logClient.error(message);\n  throw new Error(message);\n};\n\nconst warn = function () {\n  const message = 'FIREBASE WARNING: ' + buildLogMessage_(...arguments);\n  logClient.warn(message);\n};\n/**\r\n * Logs a warning if the containing page uses https. Called when a call to new Firebase\r\n * does not use https.\r\n */\n\n\nconst warnIfPageIsSecure = function () {\n  // Be very careful accessing browser globals. Who knows what may or may not exist.\n  if (typeof window !== 'undefined' && window.location && window.location.protocol && window.location.protocol.indexOf('https:') !== -1) {\n    warn('Insecure Firebase access from a secure page. ' + 'Please use https in calls to new Firebase().');\n  }\n};\n/**\r\n * Returns true if data is NaN, or +/- Infinity.\r\n */\n\n\nconst isInvalidJSONNumber = function (data) {\n  return typeof data === 'number' && (data !== data || // NaN\n  data === Number.POSITIVE_INFINITY || data === Number.NEGATIVE_INFINITY);\n};\n\nconst executeWhenDOMReady = function (fn) {\n  if (isNodeSdk() || document.readyState === 'complete') {\n    fn();\n  } else {\n    // Modeled after jQuery. Try DOMContentLoaded and onreadystatechange (which\n    // fire before onload), but fall back to onload.\n    let called = false;\n\n    const wrappedFn = function () {\n      if (!document.body) {\n        setTimeout(wrappedFn, Math.floor(10));\n        return;\n      }\n\n      if (!called) {\n        called = true;\n        fn();\n      }\n    };\n\n    if (document.addEventListener) {\n      document.addEventListener('DOMContentLoaded', wrappedFn, false); // fallback to onload.\n\n      window.addEventListener('load', wrappedFn, false); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } else if (document.attachEvent) {\n      // IE.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      document.attachEvent('onreadystatechange', () => {\n        if (document.readyState === 'complete') {\n          wrappedFn();\n        }\n      }); // fallback to onload.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n      window.attachEvent('onload', wrappedFn); // jQuery has an extra hack for IE that we could employ (based on\n      // http://javascript.nwbox.com/IEContentLoaded/) But it looks really old.\n      // I'm hoping we don't need it.\n    }\n  }\n};\n/**\r\n * Minimum key name. Invalid for actual data, used as a marker to sort before any valid names\r\n */\n\n\nconst MIN_NAME = '[MIN_NAME]';\n/**\r\n * Maximum key name. Invalid for actual data, used as a marker to sort above any valid names\r\n */\n\nconst MAX_NAME = '[MAX_NAME]';\n/**\r\n * Compares valid Firebase key names, plus min and max name\r\n */\n\nconst nameCompare = function (a, b) {\n  if (a === b) {\n    return 0;\n  } else if (a === MIN_NAME || b === MAX_NAME) {\n    return -1;\n  } else if (b === MIN_NAME || a === MAX_NAME) {\n    return 1;\n  } else {\n    const aAsInt = tryParseInt(a),\n          bAsInt = tryParseInt(b);\n\n    if (aAsInt !== null) {\n      if (bAsInt !== null) {\n        return aAsInt - bAsInt === 0 ? a.length - b.length : aAsInt - bAsInt;\n      } else {\n        return -1;\n      }\n    } else if (bAsInt !== null) {\n      return 1;\n    } else {\n      return a < b ? -1 : 1;\n    }\n  }\n};\n/**\r\n * @returns {!number} comparison result.\r\n */\n\n\nconst stringCompare = function (a, b) {\n  if (a === b) {\n    return 0;\n  } else if (a < b) {\n    return -1;\n  } else {\n    return 1;\n  }\n};\n\nconst requireKey = function (key, obj) {\n  if (obj && key in obj) {\n    return obj[key];\n  } else {\n    throw new Error('Missing required key (' + key + ') in object: ' + stringify(obj));\n  }\n};\n\nconst ObjectToUniqueKey = function (obj) {\n  if (typeof obj !== 'object' || obj === null) {\n    return stringify(obj);\n  }\n\n  const keys = []; // eslint-disable-next-line guard-for-in\n\n  for (const k in obj) {\n    keys.push(k);\n  } // Export as json, but with the keys sorted.\n\n\n  keys.sort();\n  let key = '{';\n\n  for (let i = 0; i < keys.length; i++) {\n    if (i !== 0) {\n      key += ',';\n    }\n\n    key += stringify(keys[i]);\n    key += ':';\n    key += ObjectToUniqueKey(obj[keys[i]]);\n  }\n\n  key += '}';\n  return key;\n};\n/**\r\n * Splits a string into a number of smaller segments of maximum size\r\n * @param str - The string\r\n * @param segsize - The maximum number of chars in the string.\r\n * @returns The string, split into appropriately-sized chunks\r\n */\n\n\nconst splitStringBySize = function (str, segsize) {\n  const len = str.length;\n\n  if (len <= segsize) {\n    return [str];\n  }\n\n  const dataSegs = [];\n\n  for (let c = 0; c < len; c += segsize) {\n    if (c + segsize > len) {\n      dataSegs.push(str.substring(c, len));\n    } else {\n      dataSegs.push(str.substring(c, c + segsize));\n    }\n  }\n\n  return dataSegs;\n};\n/**\r\n * Apply a function to each (key, value) pair in an object or\r\n * apply a function to each (index, value) pair in an array\r\n * @param obj - The object or array to iterate over\r\n * @param fn - The function to apply\r\n */\n\n\nfunction each(obj, fn) {\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      fn(key, obj[key]);\n    }\n  }\n}\n/**\r\n * Borrowed from http://hg.secondlife.com/llsd/src/tip/js/typedarray.js (MIT License)\r\n * I made one modification at the end and removed the NaN / Infinity\r\n * handling (since it seemed broken [caused an overflow] and we don't need it).  See MJL comments.\r\n * @param v - A double\r\n *\r\n */\n\n\nconst doubleToIEEE754String = function (v) {\n  assert(!isInvalidJSONNumber(v), 'Invalid JSON number'); // MJL\n\n  const ebits = 11,\n        fbits = 52;\n  const bias = (1 << ebits - 1) - 1;\n  let s, e, f, ln, i; // Compute sign, exponent, fraction\n  // Skip NaN / Infinity handling --MJL.\n\n  if (v === 0) {\n    e = 0;\n    f = 0;\n    s = 1 / v === -Infinity ? 1 : 0;\n  } else {\n    s = v < 0;\n    v = Math.abs(v);\n\n    if (v >= Math.pow(2, 1 - bias)) {\n      // Normalized\n      ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);\n      e = ln + bias;\n      f = Math.round(v * Math.pow(2, fbits - ln) - Math.pow(2, fbits));\n    } else {\n      // Denormalized\n      e = 0;\n      f = Math.round(v / Math.pow(2, 1 - bias - fbits));\n    }\n  } // Pack sign, exponent, fraction\n\n\n  const bits = [];\n\n  for (i = fbits; i; i -= 1) {\n    bits.push(f % 2 ? 1 : 0);\n    f = Math.floor(f / 2);\n  }\n\n  for (i = ebits; i; i -= 1) {\n    bits.push(e % 2 ? 1 : 0);\n    e = Math.floor(e / 2);\n  }\n\n  bits.push(s ? 1 : 0);\n  bits.reverse();\n  const str = bits.join(''); // Return the data as a hex string. --MJL\n\n  let hexByteString = '';\n\n  for (i = 0; i < 64; i += 8) {\n    let hexByte = parseInt(str.substr(i, 8), 2).toString(16);\n\n    if (hexByte.length === 1) {\n      hexByte = '0' + hexByte;\n    }\n\n    hexByteString = hexByteString + hexByte;\n  }\n\n  return hexByteString.toLowerCase();\n};\n/**\r\n * Used to detect if we're in a Chrome content script (which executes in an\r\n * isolated environment where long-polling doesn't work).\r\n */\n\n\nconst isChromeExtensionContentScript = function () {\n  return !!(typeof window === 'object' && window['chrome'] && window['chrome']['extension'] && !/^chrome/.test(window.location.href));\n};\n/**\r\n * Used to detect if we're in a Windows 8 Store app.\r\n */\n\n\nconst isWindowsStoreApp = function () {\n  // Check for the presence of a couple WinRT globals\n  return typeof Windows === 'object' && typeof Windows.UI === 'object';\n};\n/**\r\n * Converts a server error code to a Javascript Error\r\n */\n\n\nfunction errorForServerCode(code, query) {\n  let reason = 'Unknown Error';\n\n  if (code === 'too_big') {\n    reason = 'The data requested exceeds the maximum size ' + 'that can be accessed with a single request.';\n  } else if (code === 'permission_denied') {\n    reason = \"Client doesn't have permission to access the desired data.\";\n  } else if (code === 'unavailable') {\n    reason = 'The service is unavailable';\n  }\n\n  const error = new Error(code + ' at ' + query._path.toString() + ': ' + reason); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n  error.code = code.toUpperCase();\n  return error;\n}\n/**\r\n * Used to test for integer-looking strings\r\n */\n\n\nconst INTEGER_REGEXP_ = new RegExp('^-?(0*)\\\\d{1,10}$');\n/**\r\n * For use in keys, the minimum possible 32-bit integer.\r\n */\n\nconst INTEGER_32_MIN = -2147483648;\n/**\r\n * For use in kyes, the maximum possible 32-bit integer.\r\n */\n\nconst INTEGER_32_MAX = 2147483647;\n/**\r\n * If the string contains a 32-bit integer, return it.  Else return null.\r\n */\n\nconst tryParseInt = function (str) {\n  if (INTEGER_REGEXP_.test(str)) {\n    const intVal = Number(str);\n\n    if (intVal >= INTEGER_32_MIN && intVal <= INTEGER_32_MAX) {\n      return intVal;\n    }\n  }\n\n  return null;\n};\n/**\r\n * Helper to run some code but catch any exceptions and re-throw them later.\r\n * Useful for preventing user callbacks from breaking internal code.\r\n *\r\n * Re-throwing the exception from a setTimeout is a little evil, but it's very\r\n * convenient (we don't have to try to figure out when is a safe point to\r\n * re-throw it), and the behavior seems reasonable:\r\n *\r\n * * If you aren't pausing on exceptions, you get an error in the console with\r\n *   the correct stack trace.\r\n * * If you're pausing on all exceptions, the debugger will pause on your\r\n *   exception and then again when we rethrow it.\r\n * * If you're only pausing on uncaught exceptions, the debugger will only pause\r\n *   on us re-throwing it.\r\n *\r\n * @param fn - The code to guard.\r\n */\n\n\nconst exceptionGuard = function (fn) {\n  try {\n    fn();\n  } catch (e) {\n    // Re-throw exception when it's safe.\n    setTimeout(() => {\n      // It used to be that \"throw e\" would result in a good console error with\n      // relevant context, but as of Chrome 39, you just get the firebase.js\n      // file/line number where we re-throw it, which is useless. So we log\n      // e.stack explicitly.\n      const stack = e.stack || '';\n      warn('Exception was thrown by user callback.', stack);\n      throw e;\n    }, Math.floor(0));\n  }\n};\n/**\r\n * @returns {boolean} true if we think we're currently being crawled.\r\n */\n\n\nconst beingCrawled = function () {\n  const userAgent = typeof window === 'object' && window['navigator'] && window['navigator']['userAgent'] || ''; // For now we whitelist the most popular crawlers.  We should refine this to be the set of crawlers we\n  // believe to support JavaScript/AJAX rendering.\n  // NOTE: Google Webmaster Tools doesn't really belong, but their \"This is how a visitor to your website\n  // would have seen the page\" is flaky if we don't treat it as a crawler.\n\n  return userAgent.search(/googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i) >= 0;\n};\n/**\r\n * Same as setTimeout() except on Node.JS it will /not/ prevent the process from exiting.\r\n *\r\n * It is removed with clearTimeout() as normal.\r\n *\r\n * @param fn - Function to run.\r\n * @param time - Milliseconds to wait before running.\r\n * @returns The setTimeout() return value.\r\n */\n\n\nconst setTimeoutNonBlocking = function (fn, time) {\n  const timeout = setTimeout(fn, time); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n  if (typeof timeout === 'object' && timeout['unref']) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    timeout['unref']();\n  }\n\n  return timeout;\n};\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Abstraction around AppCheck's token fetching capabilities.\r\n */\n\n\nclass AppCheckTokenProvider {\n  constructor(appName_, appCheckProvider) {\n    this.appName_ = appName_;\n    this.appCheckProvider = appCheckProvider;\n    this.appCheck = appCheckProvider === null || appCheckProvider === void 0 ? void 0 : appCheckProvider.getImmediate({\n      optional: true\n    });\n\n    if (!this.appCheck) {\n      appCheckProvider === null || appCheckProvider === void 0 ? void 0 : appCheckProvider.get().then(appCheck => this.appCheck = appCheck);\n    }\n  }\n\n  getToken(forceRefresh) {\n    if (!this.appCheck) {\n      return new Promise((resolve, reject) => {\n        // Support delayed initialization of FirebaseAppCheck. This allows our\n        // customers to initialize the RTDB SDK before initializing Firebase\n        // AppCheck and ensures that all requests are authenticated if a token\n        // becomes available before the timoeout below expires.\n        setTimeout(() => {\n          if (this.appCheck) {\n            this.getToken(forceRefresh).then(resolve, reject);\n          } else {\n            resolve(null);\n          }\n        }, 0);\n      });\n    }\n\n    return this.appCheck.getToken(forceRefresh);\n  }\n\n  addTokenChangeListener(listener) {\n    var _a;\n\n    (_a = this.appCheckProvider) === null || _a === void 0 ? void 0 : _a.get().then(appCheck => appCheck.addTokenListener(listener));\n  }\n\n  notifyForInvalidToken() {\n    warn(`Provided AppCheck credentials for the app named \"${this.appName_}\" ` + 'are invalid. This usually indicates your app was not initialized correctly.');\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Abstraction around FirebaseApp's token fetching capabilities.\r\n */\n\n\nclass FirebaseAuthTokenProvider {\n  constructor(appName_, firebaseOptions_, authProvider_) {\n    this.appName_ = appName_;\n    this.firebaseOptions_ = firebaseOptions_;\n    this.authProvider_ = authProvider_;\n    this.auth_ = null;\n    this.auth_ = authProvider_.getImmediate({\n      optional: true\n    });\n\n    if (!this.auth_) {\n      authProvider_.onInit(auth => this.auth_ = auth);\n    }\n  }\n\n  getToken(forceRefresh) {\n    if (!this.auth_) {\n      return new Promise((resolve, reject) => {\n        // Support delayed initialization of FirebaseAuth. This allows our\n        // customers to initialize the RTDB SDK before initializing Firebase\n        // Auth and ensures that all requests are authenticated if a token\n        // becomes available before the timoeout below expires.\n        setTimeout(() => {\n          if (this.auth_) {\n            this.getToken(forceRefresh).then(resolve, reject);\n          } else {\n            resolve(null);\n          }\n        }, 0);\n      });\n    }\n\n    return this.auth_.getToken(forceRefresh).catch(error => {\n      // TODO: Need to figure out all the cases this is raised and whether\n      // this makes sense.\n      if (error && error.code === 'auth/token-not-initialized') {\n        log('Got auth/token-not-initialized error.  Treating as null token.');\n        return null;\n      } else {\n        return Promise.reject(error);\n      }\n    });\n  }\n\n  addTokenChangeListener(listener) {\n    // TODO: We might want to wrap the listener and call it with no args to\n    // avoid a leaky abstraction, but that makes removing the listener harder.\n    if (this.auth_) {\n      this.auth_.addAuthTokenListener(listener);\n    } else {\n      this.authProvider_.get().then(auth => auth.addAuthTokenListener(listener));\n    }\n  }\n\n  removeTokenChangeListener(listener) {\n    this.authProvider_.get().then(auth => auth.removeAuthTokenListener(listener));\n  }\n\n  notifyForInvalidToken() {\n    let errorMessage = 'Provided authentication credentials for the app named \"' + this.appName_ + '\" are invalid. This usually indicates your app was not ' + 'initialized correctly. ';\n\n    if ('credential' in this.firebaseOptions_) {\n      errorMessage += 'Make sure the \"credential\" property provided to initializeApp() ' + 'is authorized to access the specified \"databaseURL\" and is from the correct ' + 'project.';\n    } else if ('serviceAccount' in this.firebaseOptions_) {\n      errorMessage += 'Make sure the \"serviceAccount\" property provided to initializeApp() ' + 'is authorized to access the specified \"databaseURL\" and is from the correct ' + 'project.';\n    } else {\n      errorMessage += 'Make sure the \"apiKey\" and \"databaseURL\" properties provided to ' + 'initializeApp() match the values provided for your app at ' + 'https://console.firebase.google.com/.';\n    }\n\n    warn(errorMessage);\n  }\n\n}\n/* AuthTokenProvider that supplies a constant token. Used by Admin SDK or mockUserToken with emulators. */\n\n\nclass EmulatorTokenProvider {\n  constructor(accessToken) {\n    this.accessToken = accessToken;\n  }\n\n  getToken(forceRefresh) {\n    return Promise.resolve({\n      accessToken: this.accessToken\n    });\n  }\n\n  addTokenChangeListener(listener) {\n    // Invoke the listener immediately to match the behavior in Firebase Auth\n    // (see packages/auth/src/auth.js#L1807)\n    listener(this.accessToken);\n  }\n\n  removeTokenChangeListener(listener) {}\n\n  notifyForInvalidToken() {}\n\n}\n/** A string that is treated as an admin access token by the RTDB emulator. Used by Admin SDK. */\n\n\nEmulatorTokenProvider.OWNER = 'owner';\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nconst PROTOCOL_VERSION = '5';\nconst VERSION_PARAM = 'v';\nconst TRANSPORT_SESSION_PARAM = 's';\nconst REFERER_PARAM = 'r';\nconst FORGE_REF = 'f'; // Matches console.firebase.google.com, firebase-console-*.corp.google.com and\n// firebase.corp.google.com\n\nconst FORGE_DOMAIN_RE = /(console\\.firebase|firebase-console-\\w+\\.corp|firebase\\.corp)\\.google\\.com/;\nconst LAST_SESSION_PARAM = 'ls';\nconst APPLICATION_ID_PARAM = 'p';\nconst APP_CHECK_TOKEN_PARAM = 'ac';\nconst WEBSOCKET = 'websocket';\nconst LONG_POLLING = 'long_polling';\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * A class that holds metadata about a Repo object\r\n */\n\nclass RepoInfo {\n  /**\r\n   * @param host - Hostname portion of the url for the repo\r\n   * @param secure - Whether or not this repo is accessed over ssl\r\n   * @param namespace - The namespace represented by the repo\r\n   * @param webSocketOnly - Whether to prefer websockets over all other transports (used by Nest).\r\n   * @param nodeAdmin - Whether this instance uses Admin SDK credentials\r\n   * @param persistenceKey - Override the default session persistence storage key\r\n   */\n  constructor(host, secure, namespace, webSocketOnly) {\n    let nodeAdmin = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n    let persistenceKey = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : '';\n    let includeNamespaceInQueryParams = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;\n    this.secure = secure;\n    this.namespace = namespace;\n    this.webSocketOnly = webSocketOnly;\n    this.nodeAdmin = nodeAdmin;\n    this.persistenceKey = persistenceKey;\n    this.includeNamespaceInQueryParams = includeNamespaceInQueryParams;\n    this._host = host.toLowerCase();\n    this._domain = this._host.substr(this._host.indexOf('.') + 1);\n    this.internalHost = PersistentStorage.get('host:' + host) || this._host;\n  }\n\n  isCacheableHost() {\n    return this.internalHost.substr(0, 2) === 's-';\n  }\n\n  isCustomHost() {\n    return this._domain !== 'firebaseio.com' && this._domain !== 'firebaseio-demo.com';\n  }\n\n  get host() {\n    return this._host;\n  }\n\n  set host(newHost) {\n    if (newHost !== this.internalHost) {\n      this.internalHost = newHost;\n\n      if (this.isCacheableHost()) {\n        PersistentStorage.set('host:' + this._host, this.internalHost);\n      }\n    }\n  }\n\n  toString() {\n    let str = this.toURLString();\n\n    if (this.persistenceKey) {\n      str += '<' + this.persistenceKey + '>';\n    }\n\n    return str;\n  }\n\n  toURLString() {\n    const protocol = this.secure ? 'https://' : 'http://';\n    const query = this.includeNamespaceInQueryParams ? `?ns=${this.namespace}` : '';\n    return `${protocol}${this.host}/${query}`;\n  }\n\n}\n\nfunction repoInfoNeedsQueryParam(repoInfo) {\n  return repoInfo.host !== repoInfo.internalHost || repoInfo.isCustomHost() || repoInfo.includeNamespaceInQueryParams;\n}\n/**\r\n * Returns the websocket URL for this repo\r\n * @param repoInfo - RepoInfo object\r\n * @param type - of connection\r\n * @param params - list\r\n * @returns The URL for this repo\r\n */\n\n\nfunction repoInfoConnectionURL(repoInfo, type, params) {\n  assert(typeof type === 'string', 'typeof type must == string');\n  assert(typeof params === 'object', 'typeof params must == object');\n  let connURL;\n\n  if (type === WEBSOCKET) {\n    connURL = (repoInfo.secure ? 'wss://' : 'ws://') + repoInfo.internalHost + '/.ws?';\n  } else if (type === LONG_POLLING) {\n    connURL = (repoInfo.secure ? 'https://' : 'http://') + repoInfo.internalHost + '/.lp?';\n  } else {\n    throw new Error('Unknown connection type: ' + type);\n  }\n\n  if (repoInfoNeedsQueryParam(repoInfo)) {\n    params['ns'] = repoInfo.namespace;\n  }\n\n  const pairs = [];\n  each(params, (key, value) => {\n    pairs.push(key + '=' + value);\n  });\n  return connURL + pairs.join('&');\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Tracks a collection of stats.\r\n */\n\n\nclass StatsCollection {\n  constructor() {\n    this.counters_ = {};\n  }\n\n  incrementCounter(name) {\n    let amount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n\n    if (!contains(this.counters_, name)) {\n      this.counters_[name] = 0;\n    }\n\n    this.counters_[name] += amount;\n  }\n\n  get() {\n    return deepCopy(this.counters_);\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nconst collections = {};\nconst reporters = {};\n\nfunction statsManagerGetCollection(repoInfo) {\n  const hashString = repoInfo.toString();\n\n  if (!collections[hashString]) {\n    collections[hashString] = new StatsCollection();\n  }\n\n  return collections[hashString];\n}\n\nfunction statsManagerGetOrCreateReporter(repoInfo, creatorFunction) {\n  const hashString = repoInfo.toString();\n\n  if (!reporters[hashString]) {\n    reporters[hashString] = creatorFunction();\n  }\n\n  return reporters[hashString];\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * This class ensures the packets from the server arrive in order\r\n * This class takes data from the server and ensures it gets passed into the callbacks in order.\r\n */\n\n\nclass PacketReceiver {\n  /**\r\n   * @param onMessage_\r\n   */\n  constructor(onMessage_) {\n    this.onMessage_ = onMessage_;\n    this.pendingResponses = [];\n    this.currentResponseNum = 0;\n    this.closeAfterResponse = -1;\n    this.onClose = null;\n  }\n\n  closeAfter(responseNum, callback) {\n    this.closeAfterResponse = responseNum;\n    this.onClose = callback;\n\n    if (this.closeAfterResponse < this.currentResponseNum) {\n      this.onClose();\n      this.onClose = null;\n    }\n  }\n  /**\r\n   * Each message from the server comes with a response number, and an array of data. The responseNumber\r\n   * allows us to ensure that we process them in the right order, since we can't be guaranteed that all\r\n   * browsers will respond in the same order as the requests we sent\r\n   */\n\n\n  handleResponse(requestNum, data) {\n    this.pendingResponses[requestNum] = data;\n\n    while (this.pendingResponses[this.currentResponseNum]) {\n      const toProcess = this.pendingResponses[this.currentResponseNum];\n      delete this.pendingResponses[this.currentResponseNum];\n\n      for (let i = 0; i < toProcess.length; ++i) {\n        if (toProcess[i]) {\n          exceptionGuard(() => {\n            this.onMessage_(toProcess[i]);\n          });\n        }\n      }\n\n      if (this.currentResponseNum === this.closeAfterResponse) {\n        if (this.onClose) {\n          this.onClose();\n          this.onClose = null;\n        }\n\n        break;\n      }\n\n      this.currentResponseNum++;\n    }\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// URL query parameters associated with longpolling\n\n\nconst FIREBASE_LONGPOLL_START_PARAM = 'start';\nconst FIREBASE_LONGPOLL_CLOSE_COMMAND = 'close';\nconst FIREBASE_LONGPOLL_COMMAND_CB_NAME = 'pLPCommand';\nconst FIREBASE_LONGPOLL_DATA_CB_NAME = 'pRTLPCB';\nconst FIREBASE_LONGPOLL_ID_PARAM = 'id';\nconst FIREBASE_LONGPOLL_PW_PARAM = 'pw';\nconst FIREBASE_LONGPOLL_SERIAL_PARAM = 'ser';\nconst FIREBASE_LONGPOLL_CALLBACK_ID_PARAM = 'cb';\nconst FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM = 'seg';\nconst FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET = 'ts';\nconst FIREBASE_LONGPOLL_DATA_PARAM = 'd';\nconst FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM = 'dframe'; //Data size constants.\n//TODO: Perf: the maximum length actually differs from browser to browser.\n// We should check what browser we're on and set accordingly.\n\nconst MAX_URL_DATA_SIZE = 1870;\nconst SEG_HEADER_SIZE = 30; //ie: &seg=8299234&ts=982389123&d=\n\nconst MAX_PAYLOAD_SIZE = MAX_URL_DATA_SIZE - SEG_HEADER_SIZE;\n/**\r\n * Keepalive period\r\n * send a fresh request at minimum every 25 seconds. Opera has a maximum request\r\n * length of 30 seconds that we can't exceed.\r\n */\n\nconst KEEPALIVE_REQUEST_INTERVAL = 25000;\n/**\r\n * How long to wait before aborting a long-polling connection attempt.\r\n */\n\nconst LP_CONNECT_TIMEOUT = 30000;\n/**\r\n * This class manages a single long-polling connection.\r\n */\n\nclass BrowserPollConnection {\n  /**\r\n   * @param connId An identifier for this connection, used for logging\r\n   * @param repoInfo The info for the endpoint to send data to.\r\n   * @param applicationId The Firebase App ID for this project.\r\n   * @param appCheckToken The AppCheck token for this client.\r\n   * @param authToken The AuthToken to use for this connection.\r\n   * @param transportSessionId Optional transportSessionid if we are\r\n   * reconnecting for an existing transport session\r\n   * @param lastSessionId Optional lastSessionId if the PersistentConnection has\r\n   * already created a connection previously\r\n   */\n  constructor(connId, repoInfo, applicationId, appCheckToken, authToken, transportSessionId, lastSessionId) {\n    this.connId = connId;\n    this.repoInfo = repoInfo;\n    this.applicationId = applicationId;\n    this.appCheckToken = appCheckToken;\n    this.authToken = authToken;\n    this.transportSessionId = transportSessionId;\n    this.lastSessionId = lastSessionId;\n    this.bytesSent = 0;\n    this.bytesReceived = 0;\n    this.everConnected_ = false;\n    this.log_ = logWrapper(connId);\n    this.stats_ = statsManagerGetCollection(repoInfo);\n\n    this.urlFn = params => {\n      // Always add the token if we have one.\n      if (this.appCheckToken) {\n        params[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\n      }\n\n      return repoInfoConnectionURL(repoInfo, LONG_POLLING, params);\n    };\n  }\n  /**\r\n   * @param onMessage - Callback when messages arrive\r\n   * @param onDisconnect - Callback with connection lost.\r\n   */\n\n\n  open(onMessage, onDisconnect) {\n    var _this = this;\n\n    this.curSegmentNum = 0;\n    this.onDisconnect_ = onDisconnect;\n    this.myPacketOrderer = new PacketReceiver(onMessage);\n    this.isClosed_ = false;\n    this.connectTimeoutTimer_ = setTimeout(() => {\n      this.log_('Timed out trying to connect.'); // Make sure we clear the host cache\n\n      this.onClosed_();\n      this.connectTimeoutTimer_ = null; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(LP_CONNECT_TIMEOUT)); // Ensure we delay the creation of the iframe until the DOM is loaded.\n\n    executeWhenDOMReady(() => {\n      if (this.isClosed_) {\n        return;\n      } //Set up a callback that gets triggered once a connection is set up.\n\n\n      this.scriptTagHolder = new FirebaseIFrameScriptHolder(function () {\n        for (var _len3 = arguments.length, args = new Array(_len3), _key4 = 0; _key4 < _len3; _key4++) {\n          args[_key4] = arguments[_key4];\n        }\n\n        const [command, arg1, arg2, arg3, arg4] = args;\n\n        _this.incrementIncomingBytes_(args);\n\n        if (!_this.scriptTagHolder) {\n          return; // we closed the connection.\n        }\n\n        if (_this.connectTimeoutTimer_) {\n          clearTimeout(_this.connectTimeoutTimer_);\n          _this.connectTimeoutTimer_ = null;\n        }\n\n        _this.everConnected_ = true;\n\n        if (command === FIREBASE_LONGPOLL_START_PARAM) {\n          _this.id = arg1;\n          _this.password = arg2;\n        } else if (command === FIREBASE_LONGPOLL_CLOSE_COMMAND) {\n          // Don't clear the host cache. We got a response from the server, so we know it's reachable\n          if (arg1) {\n            // We aren't expecting any more data (other than what the server's already in the process of sending us\n            // through our already open polls), so don't send any more.\n            _this.scriptTagHolder.sendNewPolls = false; // arg1 in this case is the last response number sent by the server. We should try to receive\n            // all of the responses up to this one before closing\n\n            _this.myPacketOrderer.closeAfter(arg1, () => {\n              _this.onClosed_();\n            });\n          } else {\n            _this.onClosed_();\n          }\n        } else {\n          throw new Error('Unrecognized command received: ' + command);\n        }\n      }, function () {\n        for (var _len4 = arguments.length, args = new Array(_len4), _key5 = 0; _key5 < _len4; _key5++) {\n          args[_key5] = arguments[_key5];\n        }\n\n        const [pN, data] = args;\n\n        _this.incrementIncomingBytes_(args);\n\n        _this.myPacketOrderer.handleResponse(pN, data);\n      }, () => {\n        this.onClosed_();\n      }, this.urlFn); //Send the initial request to connect. The serial number is simply to keep the browser from pulling previous results\n      //from cache.\n\n      const urlParams = {};\n      urlParams[FIREBASE_LONGPOLL_START_PARAM] = 't';\n      urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = Math.floor(Math.random() * 100000000);\n\n      if (this.scriptTagHolder.uniqueCallbackIdentifier) {\n        urlParams[FIREBASE_LONGPOLL_CALLBACK_ID_PARAM] = this.scriptTagHolder.uniqueCallbackIdentifier;\n      }\n\n      urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n\n      if (this.transportSessionId) {\n        urlParams[TRANSPORT_SESSION_PARAM] = this.transportSessionId;\n      }\n\n      if (this.lastSessionId) {\n        urlParams[LAST_SESSION_PARAM] = this.lastSessionId;\n      }\n\n      if (this.applicationId) {\n        urlParams[APPLICATION_ID_PARAM] = this.applicationId;\n      }\n\n      if (this.appCheckToken) {\n        urlParams[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\n      }\n\n      if (typeof location !== 'undefined' && location.hostname && FORGE_DOMAIN_RE.test(location.hostname)) {\n        urlParams[REFERER_PARAM] = FORGE_REF;\n      }\n\n      const connectURL = this.urlFn(urlParams);\n      this.log_('Connecting via long-poll to ' + connectURL);\n      this.scriptTagHolder.addTag(connectURL, () => {\n        /* do nothing */\n      });\n    });\n  }\n  /**\r\n   * Call this when a handshake has completed successfully and we want to consider the connection established\r\n   */\n\n\n  start() {\n    this.scriptTagHolder.startLongPoll(this.id, this.password);\n    this.addDisconnectPingFrame(this.id, this.password);\n  }\n  /**\r\n   * Forces long polling to be considered as a potential transport\r\n   */\n\n\n  static forceAllow() {\n    BrowserPollConnection.forceAllow_ = true;\n  }\n  /**\r\n   * Forces longpolling to not be considered as a potential transport\r\n   */\n\n\n  static forceDisallow() {\n    BrowserPollConnection.forceDisallow_ = true;\n  } // Static method, use string literal so it can be accessed in a generic way\n\n\n  static isAvailable() {\n    if (isNodeSdk()) {\n      return false;\n    } else if (BrowserPollConnection.forceAllow_) {\n      return true;\n    } else {\n      // NOTE: In React-Native there's normally no 'document', but if you debug a React-Native app in\n      // the Chrome debugger, 'document' is defined, but document.createElement is null (2015/06/08).\n      return !BrowserPollConnection.forceDisallow_ && typeof document !== 'undefined' && document.createElement != null && !isChromeExtensionContentScript() && !isWindowsStoreApp();\n    }\n  }\n  /**\r\n   * No-op for polling\r\n   */\n\n\n  markConnectionHealthy() {}\n  /**\r\n   * Stops polling and cleans up the iframe\r\n   */\n\n\n  shutdown_() {\n    this.isClosed_ = true;\n\n    if (this.scriptTagHolder) {\n      this.scriptTagHolder.close();\n      this.scriptTagHolder = null;\n    } //remove the disconnect frame, which will trigger an XHR call to the server to tell it we're leaving.\n\n\n    if (this.myDisconnFrame) {\n      document.body.removeChild(this.myDisconnFrame);\n      this.myDisconnFrame = null;\n    }\n\n    if (this.connectTimeoutTimer_) {\n      clearTimeout(this.connectTimeoutTimer_);\n      this.connectTimeoutTimer_ = null;\n    }\n  }\n  /**\r\n   * Triggered when this transport is closed\r\n   */\n\n\n  onClosed_() {\n    if (!this.isClosed_) {\n      this.log_('Longpoll is closing itself');\n      this.shutdown_();\n\n      if (this.onDisconnect_) {\n        this.onDisconnect_(this.everConnected_);\n        this.onDisconnect_ = null;\n      }\n    }\n  }\n  /**\r\n   * External-facing close handler. RealTime has requested we shut down. Kill our connection and tell the server\r\n   * that we've left.\r\n   */\n\n\n  close() {\n    if (!this.isClosed_) {\n      this.log_('Longpoll is being closed.');\n      this.shutdown_();\n    }\n  }\n  /**\r\n   * Send the JSON object down to the server. It will need to be stringified, base64 encoded, and then\r\n   * broken into chunks (since URLs have a small maximum length).\r\n   * @param data - The JSON data to transmit.\r\n   */\n\n\n  send(data) {\n    const dataStr = stringify(data);\n    this.bytesSent += dataStr.length;\n    this.stats_.incrementCounter('bytes_sent', dataStr.length); //first, lets get the base64-encoded data\n\n    const base64data = base64Encode(dataStr); //We can only fit a certain amount in each URL, so we need to split this request\n    //up into multiple pieces if it doesn't fit in one request.\n\n    const dataSegs = splitStringBySize(base64data, MAX_PAYLOAD_SIZE); //Enqueue each segment for transmission. We assign each chunk a sequential ID and a total number\n    //of segments so that we can reassemble the packet on the server.\n\n    for (let i = 0; i < dataSegs.length; i++) {\n      this.scriptTagHolder.enqueueSegment(this.curSegmentNum, dataSegs.length, dataSegs[i]);\n      this.curSegmentNum++;\n    }\n  }\n  /**\r\n   * This is how we notify the server that we're leaving.\r\n   * We aren't able to send requests with DHTML on a window close event, but we can\r\n   * trigger XHR requests in some browsers (everything but Opera basically).\r\n   */\n\n\n  addDisconnectPingFrame(id, pw) {\n    if (isNodeSdk()) {\n      return;\n    }\n\n    this.myDisconnFrame = document.createElement('iframe');\n    const urlParams = {};\n    urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM] = 't';\n    urlParams[FIREBASE_LONGPOLL_ID_PARAM] = id;\n    urlParams[FIREBASE_LONGPOLL_PW_PARAM] = pw;\n    this.myDisconnFrame.src = this.urlFn(urlParams);\n    this.myDisconnFrame.style.display = 'none';\n    document.body.appendChild(this.myDisconnFrame);\n  }\n  /**\r\n   * Used to track the bytes received by this client\r\n   */\n\n\n  incrementIncomingBytes_(args) {\n    // TODO: This is an annoying perf hit just to track the number of incoming bytes.  Maybe it should be opt-in.\n    const bytesReceived = stringify(args).length;\n    this.bytesReceived += bytesReceived;\n    this.stats_.incrementCounter('bytes_received', bytesReceived);\n  }\n\n}\n/*********************************************************************************************\r\n * A wrapper around an iframe that is used as a long-polling script holder.\r\n *********************************************************************************************/\n\n\nclass FirebaseIFrameScriptHolder {\n  /**\r\n   * @param commandCB - The callback to be called when control commands are recevied from the server.\r\n   * @param onMessageCB - The callback to be triggered when responses arrive from the server.\r\n   * @param onDisconnect - The callback to be triggered when this tag holder is closed\r\n   * @param urlFn - A function that provides the URL of the endpoint to send data to.\r\n   */\n  constructor(commandCB, onMessageCB, onDisconnect, urlFn) {\n    this.onDisconnect = onDisconnect;\n    this.urlFn = urlFn; //We maintain a count of all of the outstanding requests, because if we have too many active at once it can cause\n    //problems in some browsers.\n\n    this.outstandingRequests = new Set(); //A queue of the pending segments waiting for transmission to the server.\n\n    this.pendingSegs = []; //A serial number. We use this for two things:\n    // 1) A way to ensure the browser doesn't cache responses to polls\n    // 2) A way to make the server aware when long-polls arrive in a different order than we started them. The\n    //    server needs to release both polls in this case or it will cause problems in Opera since Opera can only execute\n    //    JSONP code in the order it was added to the iframe.\n\n    this.currentSerial = Math.floor(Math.random() * 100000000); // This gets set to false when we're \"closing down\" the connection (e.g. we're switching transports but there's still\n    // incoming data from the server that we're waiting for).\n\n    this.sendNewPolls = true;\n\n    if (!isNodeSdk()) {\n      //Each script holder registers a couple of uniquely named callbacks with the window. These are called from the\n      //iframes where we put the long-polling script tags. We have two callbacks:\n      //   1) Command Callback - Triggered for control issues, like starting a connection.\n      //   2) Message Callback - Triggered when new data arrives.\n      this.uniqueCallbackIdentifier = LUIDGenerator();\n      window[FIREBASE_LONGPOLL_COMMAND_CB_NAME + this.uniqueCallbackIdentifier] = commandCB;\n      window[FIREBASE_LONGPOLL_DATA_CB_NAME + this.uniqueCallbackIdentifier] = onMessageCB; //Create an iframe for us to add script tags to.\n\n      this.myIFrame = FirebaseIFrameScriptHolder.createIFrame_(); // Set the iframe's contents.\n\n      let script = ''; // if we set a javascript url, it's IE and we need to set the document domain. The javascript url is sufficient\n      // for ie9, but ie8 needs to do it again in the document itself.\n\n      if (this.myIFrame.src && this.myIFrame.src.substr(0, 'javascript:'.length) === 'javascript:') {\n        const currentDomain = document.domain;\n        script = '<script>document.domain=\"' + currentDomain + '\";</script>';\n      }\n\n      const iframeContents = '<html><body>' + script + '</body></html>';\n\n      try {\n        this.myIFrame.doc.open();\n        this.myIFrame.doc.write(iframeContents);\n        this.myIFrame.doc.close();\n      } catch (e) {\n        log('frame writing exception');\n\n        if (e.stack) {\n          log(e.stack);\n        }\n\n        log(e);\n      }\n    } else {\n      this.commandCB = commandCB;\n      this.onMessageCB = onMessageCB;\n    }\n  }\n  /**\r\n   * Each browser has its own funny way to handle iframes. Here we mush them all together into one object that I can\r\n   * actually use.\r\n   */\n\n\n  static createIFrame_() {\n    const iframe = document.createElement('iframe');\n    iframe.style.display = 'none'; // This is necessary in order to initialize the document inside the iframe\n\n    if (document.body) {\n      document.body.appendChild(iframe);\n\n      try {\n        // If document.domain has been modified in IE, this will throw an error, and we need to set the\n        // domain of the iframe's document manually. We can do this via a javascript: url as the src attribute\n        // Also note that we must do this *after* the iframe has been appended to the page. Otherwise it doesn't work.\n        const a = iframe.contentWindow.document;\n\n        if (!a) {\n          // Apologies for the log-spam, I need to do something to keep closure from optimizing out the assignment above.\n          log('No IE domain setting required');\n        }\n      } catch (e) {\n        const domain = document.domain;\n        iframe.src = \"javascript:void((function(){document.open();document.domain='\" + domain + \"';document.close();})())\";\n      }\n    } else {\n      // LongPollConnection attempts to delay initialization until the document is ready, so hopefully this\n      // never gets hit.\n      throw 'Document body has not initialized. Wait to initialize Firebase until after the document is ready.';\n    } // Get the document of the iframe in a browser-specific way.\n\n\n    if (iframe.contentDocument) {\n      iframe.doc = iframe.contentDocument; // Firefox, Opera, Safari\n    } else if (iframe.contentWindow) {\n      iframe.doc = iframe.contentWindow.document; // Internet Explorer\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } else if (iframe.document) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      iframe.doc = iframe.document; //others?\n    }\n\n    return iframe;\n  }\n  /**\r\n   * Cancel all outstanding queries and remove the frame.\r\n   */\n\n\n  close() {\n    //Mark this iframe as dead, so no new requests are sent.\n    this.alive = false;\n\n    if (this.myIFrame) {\n      //We have to actually remove all of the html inside this iframe before removing it from the\n      //window, or IE will continue loading and executing the script tags we've already added, which\n      //can lead to some errors being thrown. Setting innerHTML seems to be the easiest way to do this.\n      this.myIFrame.doc.body.innerHTML = '';\n      setTimeout(() => {\n        if (this.myIFrame !== null) {\n          document.body.removeChild(this.myIFrame);\n          this.myIFrame = null;\n        }\n      }, Math.floor(0));\n    } // Protect from being called recursively.\n\n\n    const onDisconnect = this.onDisconnect;\n\n    if (onDisconnect) {\n      this.onDisconnect = null;\n      onDisconnect();\n    }\n  }\n  /**\r\n   * Actually start the long-polling session by adding the first script tag(s) to the iframe.\r\n   * @param id - The ID of this connection\r\n   * @param pw - The password for this connection\r\n   */\n\n\n  startLongPoll(id, pw) {\n    this.myID = id;\n    this.myPW = pw;\n    this.alive = true; //send the initial request. If there are requests queued, make sure that we transmit as many as we are currently able to.\n\n    while (this.newRequest_()) {}\n  }\n  /**\r\n   * This is called any time someone might want a script tag to be added. It adds a script tag when there aren't\r\n   * too many outstanding requests and we are still alive.\r\n   *\r\n   * If there are outstanding packet segments to send, it sends one. If there aren't, it sends a long-poll anyways if\r\n   * needed.\r\n   */\n\n\n  newRequest_() {\n    // We keep one outstanding request open all the time to receive data, but if we need to send data\n    // (pendingSegs.length > 0) then we create a new request to send the data.  The server will automatically\n    // close the old request.\n    if (this.alive && this.sendNewPolls && this.outstandingRequests.size < (this.pendingSegs.length > 0 ? 2 : 1)) {\n      //construct our url\n      this.currentSerial++;\n      const urlParams = {};\n      urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;\n      urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;\n      urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = this.currentSerial;\n      let theURL = this.urlFn(urlParams); //Now add as much data as we can.\n\n      let curDataString = '';\n      let i = 0;\n\n      while (this.pendingSegs.length > 0) {\n        //first, lets see if the next segment will fit.\n        const nextSeg = this.pendingSegs[0];\n\n        if (nextSeg.d.length + SEG_HEADER_SIZE + curDataString.length <= MAX_URL_DATA_SIZE) {\n          //great, the segment will fit. Lets append it.\n          const theSeg = this.pendingSegs.shift();\n          curDataString = curDataString + '&' + FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM + i + '=' + theSeg.seg + '&' + FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET + i + '=' + theSeg.ts + '&' + FIREBASE_LONGPOLL_DATA_PARAM + i + '=' + theSeg.d;\n          i++;\n        } else {\n          break;\n        }\n      }\n\n      theURL = theURL + curDataString;\n      this.addLongPollTag_(theURL, this.currentSerial);\n      return true;\n    } else {\n      return false;\n    }\n  }\n  /**\r\n   * Queue a packet for transmission to the server.\r\n   * @param segnum - A sequential id for this packet segment used for reassembly\r\n   * @param totalsegs - The total number of segments in this packet\r\n   * @param data - The data for this segment.\r\n   */\n\n\n  enqueueSegment(segnum, totalsegs, data) {\n    //add this to the queue of segments to send.\n    this.pendingSegs.push({\n      seg: segnum,\n      ts: totalsegs,\n      d: data\n    }); //send the data immediately if there isn't already data being transmitted, unless\n    //startLongPoll hasn't been called yet.\n\n    if (this.alive) {\n      this.newRequest_();\n    }\n  }\n  /**\r\n   * Add a script tag for a regular long-poll request.\r\n   * @param url - The URL of the script tag.\r\n   * @param serial - The serial number of the request.\r\n   */\n\n\n  addLongPollTag_(url, serial) {\n    //remember that we sent this request.\n    this.outstandingRequests.add(serial);\n\n    const doNewRequest = () => {\n      this.outstandingRequests.delete(serial);\n      this.newRequest_();\n    }; // If this request doesn't return on its own accord (by the server sending us some data), we'll\n    // create a new one after the KEEPALIVE interval to make sure we always keep a fresh request open.\n\n\n    const keepaliveTimeout = setTimeout(doNewRequest, Math.floor(KEEPALIVE_REQUEST_INTERVAL));\n\n    const readyStateCB = () => {\n      // Request completed.  Cancel the keepalive.\n      clearTimeout(keepaliveTimeout); // Trigger a new request so we can continue receiving data.\n\n      doNewRequest();\n    };\n\n    this.addTag(url, readyStateCB);\n  }\n  /**\r\n   * Add an arbitrary script tag to the iframe.\r\n   * @param url - The URL for the script tag source.\r\n   * @param loadCB - A callback to be triggered once the script has loaded.\r\n   */\n\n\n  addTag(url, loadCB) {\n    if (isNodeSdk()) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      this.doNodeLongPoll(url, loadCB);\n    } else {\n      setTimeout(() => {\n        try {\n          // if we're already closed, don't add this poll\n          if (!this.sendNewPolls) {\n            return;\n          }\n\n          const newScript = this.myIFrame.doc.createElement('script');\n          newScript.type = 'text/javascript';\n          newScript.async = true;\n          newScript.src = url; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n          newScript.onload = newScript.onreadystatechange = function () {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            const rstate = newScript.readyState;\n\n            if (!rstate || rstate === 'loaded' || rstate === 'complete') {\n              // eslint-disable-next-line @typescript-eslint/no-explicit-any\n              newScript.onload = newScript.onreadystatechange = null;\n\n              if (newScript.parentNode) {\n                newScript.parentNode.removeChild(newScript);\n              }\n\n              loadCB();\n            }\n          };\n\n          newScript.onerror = () => {\n            log('Long-poll script failed to load: ' + url);\n            this.sendNewPolls = false;\n            this.close();\n          };\n\n          this.myIFrame.doc.body.appendChild(newScript);\n        } catch (e) {// TODO: we should make this error visible somehow\n        }\n      }, Math.floor(1));\n    }\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nconst WEBSOCKET_MAX_FRAME_SIZE = 16384;\nconst WEBSOCKET_KEEPALIVE_INTERVAL = 45000;\nlet WebSocketImpl = null;\n\nif (typeof MozWebSocket !== 'undefined') {\n  WebSocketImpl = MozWebSocket;\n} else if (typeof WebSocket !== 'undefined') {\n  WebSocketImpl = WebSocket;\n}\n/**\r\n * Create a new websocket connection with the given callbacks.\r\n */\n\n\nclass WebSocketConnection {\n  /**\r\n   * @param connId identifier for this transport\r\n   * @param repoInfo The info for the websocket endpoint.\r\n   * @param applicationId The Firebase App ID for this project.\r\n   * @param appCheckToken The App Check Token for this client.\r\n   * @param authToken The Auth Token for this client.\r\n   * @param transportSessionId Optional transportSessionId if this is connecting\r\n   * to an existing transport session\r\n   * @param lastSessionId Optional lastSessionId if there was a previous\r\n   * connection\r\n   */\n  constructor(connId, repoInfo, applicationId, appCheckToken, authToken, transportSessionId, lastSessionId) {\n    this.connId = connId;\n    this.applicationId = applicationId;\n    this.appCheckToken = appCheckToken;\n    this.authToken = authToken;\n    this.keepaliveTimer = null;\n    this.frames = null;\n    this.totalFrames = 0;\n    this.bytesSent = 0;\n    this.bytesReceived = 0;\n    this.log_ = logWrapper(this.connId);\n    this.stats_ = statsManagerGetCollection(repoInfo);\n    this.connURL = WebSocketConnection.connectionURL_(repoInfo, transportSessionId, lastSessionId, appCheckToken);\n    this.nodeAdmin = repoInfo.nodeAdmin;\n  }\n  /**\r\n   * @param repoInfo - The info for the websocket endpoint.\r\n   * @param transportSessionId - Optional transportSessionId if this is connecting to an existing transport\r\n   *                                         session\r\n   * @param lastSessionId - Optional lastSessionId if there was a previous connection\r\n   * @returns connection url\r\n   */\n\n\n  static connectionURL_(repoInfo, transportSessionId, lastSessionId, appCheckToken) {\n    const urlParams = {};\n    urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n\n    if (!isNodeSdk() && typeof location !== 'undefined' && location.hostname && FORGE_DOMAIN_RE.test(location.hostname)) {\n      urlParams[REFERER_PARAM] = FORGE_REF;\n    }\n\n    if (transportSessionId) {\n      urlParams[TRANSPORT_SESSION_PARAM] = transportSessionId;\n    }\n\n    if (lastSessionId) {\n      urlParams[LAST_SESSION_PARAM] = lastSessionId;\n    }\n\n    if (appCheckToken) {\n      urlParams[APP_CHECK_TOKEN_PARAM] = appCheckToken;\n    }\n\n    return repoInfoConnectionURL(repoInfo, WEBSOCKET, urlParams);\n  }\n  /**\r\n   * @param onMessage - Callback when messages arrive\r\n   * @param onDisconnect - Callback with connection lost.\r\n   */\n\n\n  open(onMessage, onDisconnect) {\n    this.onDisconnect = onDisconnect;\n    this.onMessage = onMessage;\n    this.log_('Websocket connecting to ' + this.connURL);\n    this.everConnected_ = false; // Assume failure until proven otherwise.\n\n    PersistentStorage.set('previous_websocket_failure', true);\n\n    try {\n      if (isNodeSdk()) {\n        const device = this.nodeAdmin ? 'AdminNode' : 'Node'; // UA Format: Firebase/<wire_protocol>/<sdk_version>/<platform>/<device>\n\n        const options = {\n          headers: {\n            'User-Agent': `Firebase/${PROTOCOL_VERSION}/${SDK_VERSION}/${process.platform}/${device}`,\n            'X-Firebase-GMPID': this.applicationId || ''\n          }\n        }; // If using Node with admin creds, AppCheck-related checks are unnecessary.\n        // Note that we send the credentials here even if they aren't admin credentials, which is\n        // not a problem.\n        // Note that this header is just used to bypass appcheck, and the token should still be sent\n        // through the websocket connection once it is established.\n\n        if (this.authToken) {\n          options.headers['Authorization'] = `Bearer ${this.authToken}`;\n        }\n\n        if (this.appCheckToken) {\n          options.headers['X-Firebase-AppCheck'] = this.appCheckToken;\n        } // Plumb appropriate http_proxy environment variable into faye-websocket if it exists.\n\n\n        const env = process['env'];\n        const proxy = this.connURL.indexOf('wss://') === 0 ? env['HTTPS_PROXY'] || env['https_proxy'] : env['HTTP_PROXY'] || env['http_proxy'];\n\n        if (proxy) {\n          options['proxy'] = {\n            origin: proxy\n          };\n        }\n\n        this.mySock = new WebSocketImpl(this.connURL, [], options);\n      } else {\n        const options = {\n          headers: {\n            'X-Firebase-GMPID': this.applicationId || '',\n            'X-Firebase-AppCheck': this.appCheckToken || ''\n          }\n        };\n        this.mySock = new WebSocketImpl(this.connURL, [], options);\n      }\n    } catch (e) {\n      this.log_('Error instantiating WebSocket.');\n      const error = e.message || e.data;\n\n      if (error) {\n        this.log_(error);\n      }\n\n      this.onClosed_();\n      return;\n    }\n\n    this.mySock.onopen = () => {\n      this.log_('Websocket connected.');\n      this.everConnected_ = true;\n    };\n\n    this.mySock.onclose = () => {\n      this.log_('Websocket connection was disconnected.');\n      this.mySock = null;\n      this.onClosed_();\n    };\n\n    this.mySock.onmessage = m => {\n      this.handleIncomingFrame(m);\n    };\n\n    this.mySock.onerror = e => {\n      this.log_('WebSocket error.  Closing connection.'); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n      const error = e.message || e.data;\n\n      if (error) {\n        this.log_(error);\n      }\n\n      this.onClosed_();\n    };\n  }\n  /**\r\n   * No-op for websockets, we don't need to do anything once the connection is confirmed as open\r\n   */\n\n\n  start() {}\n\n  static forceDisallow() {\n    WebSocketConnection.forceDisallow_ = true;\n  }\n\n  static isAvailable() {\n    let isOldAndroid = false;\n\n    if (typeof navigator !== 'undefined' && navigator.userAgent) {\n      const oldAndroidRegex = /Android ([0-9]{0,}\\.[0-9]{0,})/;\n      const oldAndroidMatch = navigator.userAgent.match(oldAndroidRegex);\n\n      if (oldAndroidMatch && oldAndroidMatch.length > 1) {\n        if (parseFloat(oldAndroidMatch[1]) < 4.4) {\n          isOldAndroid = true;\n        }\n      }\n    }\n\n    return !isOldAndroid && WebSocketImpl !== null && !WebSocketConnection.forceDisallow_;\n  }\n  /**\r\n   * Returns true if we previously failed to connect with this transport.\r\n   */\n\n\n  static previouslyFailed() {\n    // If our persistent storage is actually only in-memory storage,\n    // we default to assuming that it previously failed to be safe.\n    return PersistentStorage.isInMemoryStorage || PersistentStorage.get('previous_websocket_failure') === true;\n  }\n\n  markConnectionHealthy() {\n    PersistentStorage.remove('previous_websocket_failure');\n  }\n\n  appendFrame_(data) {\n    this.frames.push(data);\n\n    if (this.frames.length === this.totalFrames) {\n      const fullMess = this.frames.join('');\n      this.frames = null;\n      const jsonMess = jsonEval(fullMess); //handle the message\n\n      this.onMessage(jsonMess);\n    }\n  }\n  /**\r\n   * @param frameCount - The number of frames we are expecting from the server\r\n   */\n\n\n  handleNewFrameCount_(frameCount) {\n    this.totalFrames = frameCount;\n    this.frames = [];\n  }\n  /**\r\n   * Attempts to parse a frame count out of some text. If it can't, assumes a value of 1\r\n   * @returns Any remaining data to be process, or null if there is none\r\n   */\n\n\n  extractFrameCount_(data) {\n    assert(this.frames === null, 'We already have a frame buffer'); // TODO: The server is only supposed to send up to 9999 frames (i.e. length <= 4), but that isn't being enforced\n    // currently.  So allowing larger frame counts (length <= 6).  See https://app.asana.com/0/search/8688598998380/8237608042508\n\n    if (data.length <= 6) {\n      const frameCount = Number(data);\n\n      if (!isNaN(frameCount)) {\n        this.handleNewFrameCount_(frameCount);\n        return null;\n      }\n    }\n\n    this.handleNewFrameCount_(1);\n    return data;\n  }\n  /**\r\n   * Process a websocket frame that has arrived from the server.\r\n   * @param mess - The frame data\r\n   */\n\n\n  handleIncomingFrame(mess) {\n    if (this.mySock === null) {\n      return; // Chrome apparently delivers incoming packets even after we .close() the connection sometimes.\n    }\n\n    const data = mess['data'];\n    this.bytesReceived += data.length;\n    this.stats_.incrementCounter('bytes_received', data.length);\n    this.resetKeepAlive();\n\n    if (this.frames !== null) {\n      // we're buffering\n      this.appendFrame_(data);\n    } else {\n      // try to parse out a frame count, otherwise, assume 1 and process it\n      const remainingData = this.extractFrameCount_(data);\n\n      if (remainingData !== null) {\n        this.appendFrame_(remainingData);\n      }\n    }\n  }\n  /**\r\n   * Send a message to the server\r\n   * @param data - The JSON object to transmit\r\n   */\n\n\n  send(data) {\n    this.resetKeepAlive();\n    const dataStr = stringify(data);\n    this.bytesSent += dataStr.length;\n    this.stats_.incrementCounter('bytes_sent', dataStr.length); //We can only fit a certain amount in each websocket frame, so we need to split this request\n    //up into multiple pieces if it doesn't fit in one request.\n\n    const dataSegs = splitStringBySize(dataStr, WEBSOCKET_MAX_FRAME_SIZE); //Send the length header\n\n    if (dataSegs.length > 1) {\n      this.sendString_(String(dataSegs.length));\n    } //Send the actual data in segments.\n\n\n    for (let i = 0; i < dataSegs.length; i++) {\n      this.sendString_(dataSegs[i]);\n    }\n  }\n\n  shutdown_() {\n    this.isClosed_ = true;\n\n    if (this.keepaliveTimer) {\n      clearInterval(this.keepaliveTimer);\n      this.keepaliveTimer = null;\n    }\n\n    if (this.mySock) {\n      this.mySock.close();\n      this.mySock = null;\n    }\n  }\n\n  onClosed_() {\n    if (!this.isClosed_) {\n      this.log_('WebSocket is closing itself');\n      this.shutdown_(); // since this is an internal close, trigger the close listener\n\n      if (this.onDisconnect) {\n        this.onDisconnect(this.everConnected_);\n        this.onDisconnect = null;\n      }\n    }\n  }\n  /**\r\n   * External-facing close handler.\r\n   * Close the websocket and kill the connection.\r\n   */\n\n\n  close() {\n    if (!this.isClosed_) {\n      this.log_('WebSocket is being closed');\n      this.shutdown_();\n    }\n  }\n  /**\r\n   * Kill the current keepalive timer and start a new one, to ensure that it always fires N seconds after\r\n   * the last activity.\r\n   */\n\n\n  resetKeepAlive() {\n    clearInterval(this.keepaliveTimer);\n    this.keepaliveTimer = setInterval(() => {\n      //If there has been no websocket activity for a while, send a no-op\n      if (this.mySock) {\n        this.sendString_('0');\n      }\n\n      this.resetKeepAlive(); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(WEBSOCKET_KEEPALIVE_INTERVAL));\n  }\n  /**\r\n   * Send a string over the websocket.\r\n   *\r\n   * @param str - String to send.\r\n   */\n\n\n  sendString_(str) {\n    // Firefox seems to sometimes throw exceptions (NS_ERROR_UNEXPECTED) from websocket .send()\n    // calls for some unknown reason.  We treat these as an error and disconnect.\n    // See https://app.asana.com/0/58926111402292/68021340250410\n    try {\n      this.mySock.send(str);\n    } catch (e) {\n      this.log_('Exception thrown from WebSocket.send():', e.message || e.data, 'Closing connection.');\n      setTimeout(this.onClosed_.bind(this), 0);\n    }\n  }\n\n}\n/**\r\n * Number of response before we consider the connection \"healthy.\"\r\n */\n\n\nWebSocketConnection.responsesRequiredToBeHealthy = 2;\n/**\r\n * Time to wait for the connection te become healthy before giving up.\r\n */\n\nWebSocketConnection.healthyTimeout = 30000;\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Currently simplistic, this class manages what transport a Connection should use at various stages of its\r\n * lifecycle.\r\n *\r\n * It starts with longpolling in a browser, and httppolling on node. It then upgrades to websockets if\r\n * they are available.\r\n */\n\nclass TransportManager {\n  /**\r\n   * @param repoInfo - Metadata around the namespace we're connecting to\r\n   */\n  constructor(repoInfo) {\n    this.initTransports_(repoInfo);\n  }\n\n  static get ALL_TRANSPORTS() {\n    return [BrowserPollConnection, WebSocketConnection];\n  }\n\n  initTransports_(repoInfo) {\n    const isWebSocketsAvailable = WebSocketConnection && WebSocketConnection['isAvailable']();\n    let isSkipPollConnection = isWebSocketsAvailable && !WebSocketConnection.previouslyFailed();\n\n    if (repoInfo.webSocketOnly) {\n      if (!isWebSocketsAvailable) {\n        warn(\"wss:// URL used, but browser isn't known to support websockets.  Trying anyway.\");\n      }\n\n      isSkipPollConnection = true;\n    }\n\n    if (isSkipPollConnection) {\n      this.transports_ = [WebSocketConnection];\n    } else {\n      const transports = this.transports_ = [];\n\n      for (const transport of TransportManager.ALL_TRANSPORTS) {\n        if (transport && transport['isAvailable']()) {\n          transports.push(transport);\n        }\n      }\n    }\n  }\n  /**\r\n   * @returns The constructor for the initial transport to use\r\n   */\n\n\n  initialTransport() {\n    if (this.transports_.length > 0) {\n      return this.transports_[0];\n    } else {\n      throw new Error('No transports available');\n    }\n  }\n  /**\r\n   * @returns The constructor for the next transport, or null\r\n   */\n\n\n  upgradeTransport() {\n    if (this.transports_.length > 1) {\n      return this.transports_[1];\n    } else {\n      return null;\n    }\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// Abort upgrade attempt if it takes longer than 60s.\n\n\nconst UPGRADE_TIMEOUT = 60000; // For some transports (WebSockets), we need to \"validate\" the transport by exchanging a few requests and responses.\n// If we haven't sent enough requests within 5s, we'll start sending noop ping requests.\n\nconst DELAY_BEFORE_SENDING_EXTRA_REQUESTS = 5000; // If the initial data sent triggers a lot of bandwidth (i.e. it's a large put or a listen for a large amount of data)\n// then we may not be able to exchange our ping/pong requests within the healthy timeout.  So if we reach the timeout\n// but we've sent/received enough bytes, we don't cancel the connection.\n\nconst BYTES_SENT_HEALTHY_OVERRIDE = 10 * 1024;\nconst BYTES_RECEIVED_HEALTHY_OVERRIDE = 100 * 1024;\nconst MESSAGE_TYPE = 't';\nconst MESSAGE_DATA = 'd';\nconst CONTROL_SHUTDOWN = 's';\nconst CONTROL_RESET = 'r';\nconst CONTROL_ERROR = 'e';\nconst CONTROL_PONG = 'o';\nconst SWITCH_ACK = 'a';\nconst END_TRANSMISSION = 'n';\nconst PING = 'p';\nconst SERVER_HELLO = 'h';\n/**\r\n * Creates a new real-time connection to the server using whichever method works\r\n * best in the current browser.\r\n */\n\nclass Connection {\n  /**\r\n   * @param id - an id for this connection\r\n   * @param repoInfo_ - the info for the endpoint to connect to\r\n   * @param applicationId_ - the Firebase App ID for this project\r\n   * @param appCheckToken_ - The App Check Token for this device.\r\n   * @param authToken_ - The auth token for this session.\r\n   * @param onMessage_ - the callback to be triggered when a server-push message arrives\r\n   * @param onReady_ - the callback to be triggered when this connection is ready to send messages.\r\n   * @param onDisconnect_ - the callback to be triggered when a connection was lost\r\n   * @param onKill_ - the callback to be triggered when this connection has permanently shut down.\r\n   * @param lastSessionId - last session id in persistent connection. is used to clean up old session in real-time server\r\n   */\n  constructor(id, repoInfo_, applicationId_, appCheckToken_, authToken_, onMessage_, onReady_, onDisconnect_, onKill_, lastSessionId) {\n    this.id = id;\n    this.repoInfo_ = repoInfo_;\n    this.applicationId_ = applicationId_;\n    this.appCheckToken_ = appCheckToken_;\n    this.authToken_ = authToken_;\n    this.onMessage_ = onMessage_;\n    this.onReady_ = onReady_;\n    this.onDisconnect_ = onDisconnect_;\n    this.onKill_ = onKill_;\n    this.lastSessionId = lastSessionId;\n    this.connectionCount = 0;\n    this.pendingDataMessages = [];\n    this.state_ = 0\n    /* CONNECTING */\n    ;\n    this.log_ = logWrapper('c:' + this.id + ':');\n    this.transportManager_ = new TransportManager(repoInfo_);\n    this.log_('Connection created');\n    this.start_();\n  }\n  /**\r\n   * Starts a connection attempt\r\n   */\n\n\n  start_() {\n    const conn = this.transportManager_.initialTransport();\n    this.conn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, null, this.lastSessionId); // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n    // can consider the transport healthy.\n\n    this.primaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;\n    const onMessageReceived = this.connReceiver_(this.conn_);\n    const onConnectionLost = this.disconnReceiver_(this.conn_);\n    this.tx_ = this.conn_;\n    this.rx_ = this.conn_;\n    this.secondaryConn_ = null;\n    this.isHealthy_ = false;\n    /*\r\n     * Firefox doesn't like when code from one iframe tries to create another iframe by way of the parent frame.\r\n     * This can occur in the case of a redirect, i.e. we guessed wrong on what server to connect to and received a reset.\r\n     * Somehow, setTimeout seems to make this ok. That doesn't make sense from a security perspective, since you should\r\n     * still have the context of your originating frame.\r\n     */\n\n    setTimeout(() => {\n      // this.conn_ gets set to null in some of the tests. Check to make sure it still exists before using it\n      this.conn_ && this.conn_.open(onMessageReceived, onConnectionLost);\n    }, Math.floor(0));\n    const healthyTimeoutMS = conn['healthyTimeout'] || 0;\n\n    if (healthyTimeoutMS > 0) {\n      this.healthyTimeout_ = setTimeoutNonBlocking(() => {\n        this.healthyTimeout_ = null;\n\n        if (!this.isHealthy_) {\n          if (this.conn_ && this.conn_.bytesReceived > BYTES_RECEIVED_HEALTHY_OVERRIDE) {\n            this.log_('Connection exceeded healthy timeout but has received ' + this.conn_.bytesReceived + ' bytes.  Marking connection healthy.');\n            this.isHealthy_ = true;\n            this.conn_.markConnectionHealthy();\n          } else if (this.conn_ && this.conn_.bytesSent > BYTES_SENT_HEALTHY_OVERRIDE) {\n            this.log_('Connection exceeded healthy timeout but has sent ' + this.conn_.bytesSent + ' bytes.  Leaving connection alive.'); // NOTE: We don't want to mark it healthy, since we have no guarantee that the bytes have made it to\n            // the server.\n          } else {\n            this.log_('Closing unhealthy connection after timeout.');\n            this.close();\n          }\n        } // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n      }, Math.floor(healthyTimeoutMS));\n    }\n  }\n\n  nextTransportId_() {\n    return 'c:' + this.id + ':' + this.connectionCount++;\n  }\n\n  disconnReceiver_(conn) {\n    return everConnected => {\n      if (conn === this.conn_) {\n        this.onConnectionLost_(everConnected);\n      } else if (conn === this.secondaryConn_) {\n        this.log_('Secondary connection lost.');\n        this.onSecondaryConnectionLost_();\n      } else {\n        this.log_('closing an old connection');\n      }\n    };\n  }\n\n  connReceiver_(conn) {\n    return message => {\n      if (this.state_ !== 2\n      /* DISCONNECTED */\n      ) {\n        if (conn === this.rx_) {\n          this.onPrimaryMessageReceived_(message);\n        } else if (conn === this.secondaryConn_) {\n          this.onSecondaryMessageReceived_(message);\n        } else {\n          this.log_('message on old connection');\n        }\n      }\n    };\n  }\n  /**\r\n   * @param dataMsg - An arbitrary data message to be sent to the server\r\n   */\n\n\n  sendRequest(dataMsg) {\n    // wrap in a data message envelope and send it on\n    const msg = {\n      t: 'd',\n      d: dataMsg\n    };\n    this.sendData_(msg);\n  }\n\n  tryCleanupConnection() {\n    if (this.tx_ === this.secondaryConn_ && this.rx_ === this.secondaryConn_) {\n      this.log_('cleaning up and promoting a connection: ' + this.secondaryConn_.connId);\n      this.conn_ = this.secondaryConn_;\n      this.secondaryConn_ = null; // the server will shutdown the old connection\n    }\n  }\n\n  onSecondaryControl_(controlData) {\n    if (MESSAGE_TYPE in controlData) {\n      const cmd = controlData[MESSAGE_TYPE];\n\n      if (cmd === SWITCH_ACK) {\n        this.upgradeIfSecondaryHealthy_();\n      } else if (cmd === CONTROL_RESET) {\n        // Most likely the session wasn't valid. Abandon the switch attempt\n        this.log_('Got a reset on secondary, closing it');\n        this.secondaryConn_.close(); // If we were already using this connection for something, than we need to fully close\n\n        if (this.tx_ === this.secondaryConn_ || this.rx_ === this.secondaryConn_) {\n          this.close();\n        }\n      } else if (cmd === CONTROL_PONG) {\n        this.log_('got pong on secondary.');\n        this.secondaryResponsesRequired_--;\n        this.upgradeIfSecondaryHealthy_();\n      }\n    }\n  }\n\n  onSecondaryMessageReceived_(parsedData) {\n    const layer = requireKey('t', parsedData);\n    const data = requireKey('d', parsedData);\n\n    if (layer === 'c') {\n      this.onSecondaryControl_(data);\n    } else if (layer === 'd') {\n      // got a data message, but we're still second connection. Need to buffer it up\n      this.pendingDataMessages.push(data);\n    } else {\n      throw new Error('Unknown protocol layer: ' + layer);\n    }\n  }\n\n  upgradeIfSecondaryHealthy_() {\n    if (this.secondaryResponsesRequired_ <= 0) {\n      this.log_('Secondary connection is healthy.');\n      this.isHealthy_ = true;\n      this.secondaryConn_.markConnectionHealthy();\n      this.proceedWithUpgrade_();\n    } else {\n      // Send a ping to make sure the connection is healthy.\n      this.log_('sending ping on secondary.');\n      this.secondaryConn_.send({\n        t: 'c',\n        d: {\n          t: PING,\n          d: {}\n        }\n      });\n    }\n  }\n\n  proceedWithUpgrade_() {\n    // tell this connection to consider itself open\n    this.secondaryConn_.start(); // send ack\n\n    this.log_('sending client ack on secondary');\n    this.secondaryConn_.send({\n      t: 'c',\n      d: {\n        t: SWITCH_ACK,\n        d: {}\n      }\n    }); // send end packet on primary transport, switch to sending on this one\n    // can receive on this one, buffer responses until end received on primary transport\n\n    this.log_('Ending transmission on primary');\n    this.conn_.send({\n      t: 'c',\n      d: {\n        t: END_TRANSMISSION,\n        d: {}\n      }\n    });\n    this.tx_ = this.secondaryConn_;\n    this.tryCleanupConnection();\n  }\n\n  onPrimaryMessageReceived_(parsedData) {\n    // Must refer to parsedData properties in quotes, so closure doesn't touch them.\n    const layer = requireKey('t', parsedData);\n    const data = requireKey('d', parsedData);\n\n    if (layer === 'c') {\n      this.onControl_(data);\n    } else if (layer === 'd') {\n      this.onDataMessage_(data);\n    }\n  }\n\n  onDataMessage_(message) {\n    this.onPrimaryResponse_(); // We don't do anything with data messages, just kick them up a level\n\n    this.onMessage_(message);\n  }\n\n  onPrimaryResponse_() {\n    if (!this.isHealthy_) {\n      this.primaryResponsesRequired_--;\n\n      if (this.primaryResponsesRequired_ <= 0) {\n        this.log_('Primary connection is healthy.');\n        this.isHealthy_ = true;\n        this.conn_.markConnectionHealthy();\n      }\n    }\n  }\n\n  onControl_(controlData) {\n    const cmd = requireKey(MESSAGE_TYPE, controlData);\n\n    if (MESSAGE_DATA in controlData) {\n      const payload = controlData[MESSAGE_DATA];\n\n      if (cmd === SERVER_HELLO) {\n        this.onHandshake_(payload);\n      } else if (cmd === END_TRANSMISSION) {\n        this.log_('recvd end transmission on primary');\n        this.rx_ = this.secondaryConn_;\n\n        for (let i = 0; i < this.pendingDataMessages.length; ++i) {\n          this.onDataMessage_(this.pendingDataMessages[i]);\n        }\n\n        this.pendingDataMessages = [];\n        this.tryCleanupConnection();\n      } else if (cmd === CONTROL_SHUTDOWN) {\n        // This was previously the 'onKill' callback passed to the lower-level connection\n        // payload in this case is the reason for the shutdown. Generally a human-readable error\n        this.onConnectionShutdown_(payload);\n      } else if (cmd === CONTROL_RESET) {\n        // payload in this case is the host we should contact\n        this.onReset_(payload);\n      } else if (cmd === CONTROL_ERROR) {\n        error('Server Error: ' + payload);\n      } else if (cmd === CONTROL_PONG) {\n        this.log_('got pong on primary.');\n        this.onPrimaryResponse_();\n        this.sendPingOnPrimaryIfNecessary_();\n      } else {\n        error('Unknown control packet command: ' + cmd);\n      }\n    }\n  }\n  /**\r\n   * @param handshake - The handshake data returned from the server\r\n   */\n\n\n  onHandshake_(handshake) {\n    const timestamp = handshake.ts;\n    const version = handshake.v;\n    const host = handshake.h;\n    this.sessionId = handshake.s;\n    this.repoInfo_.host = host; // if we've already closed the connection, then don't bother trying to progress further\n\n    if (this.state_ === 0\n    /* CONNECTING */\n    ) {\n      this.conn_.start();\n      this.onConnectionEstablished_(this.conn_, timestamp);\n\n      if (PROTOCOL_VERSION !== version) {\n        warn('Protocol version mismatch detected');\n      } // TODO: do we want to upgrade? when? maybe a delay?\n\n\n      this.tryStartUpgrade_();\n    }\n  }\n\n  tryStartUpgrade_() {\n    const conn = this.transportManager_.upgradeTransport();\n\n    if (conn) {\n      this.startUpgrade_(conn);\n    }\n  }\n\n  startUpgrade_(conn) {\n    this.secondaryConn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, this.sessionId); // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n    // can consider the transport healthy.\n\n    this.secondaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;\n    const onMessage = this.connReceiver_(this.secondaryConn_);\n    const onDisconnect = this.disconnReceiver_(this.secondaryConn_);\n    this.secondaryConn_.open(onMessage, onDisconnect); // If we haven't successfully upgraded after UPGRADE_TIMEOUT, give up and kill the secondary.\n\n    setTimeoutNonBlocking(() => {\n      if (this.secondaryConn_) {\n        this.log_('Timed out trying to upgrade.');\n        this.secondaryConn_.close();\n      }\n    }, Math.floor(UPGRADE_TIMEOUT));\n  }\n\n  onReset_(host) {\n    this.log_('Reset packet received.  New host: ' + host);\n    this.repoInfo_.host = host; // TODO: if we're already \"connected\", we need to trigger a disconnect at the next layer up.\n    // We don't currently support resets after the connection has already been established\n\n    if (this.state_ === 1\n    /* CONNECTED */\n    ) {\n      this.close();\n    } else {\n      // Close whatever connections we have open and start again.\n      this.closeConnections_();\n      this.start_();\n    }\n  }\n\n  onConnectionEstablished_(conn, timestamp) {\n    this.log_('Realtime connection established.');\n    this.conn_ = conn;\n    this.state_ = 1\n    /* CONNECTED */\n    ;\n\n    if (this.onReady_) {\n      this.onReady_(timestamp, this.sessionId);\n      this.onReady_ = null;\n    } // If after 5 seconds we haven't sent enough requests to the server to get the connection healthy,\n    // send some pings.\n\n\n    if (this.primaryResponsesRequired_ === 0) {\n      this.log_('Primary connection is healthy.');\n      this.isHealthy_ = true;\n    } else {\n      setTimeoutNonBlocking(() => {\n        this.sendPingOnPrimaryIfNecessary_();\n      }, Math.floor(DELAY_BEFORE_SENDING_EXTRA_REQUESTS));\n    }\n  }\n\n  sendPingOnPrimaryIfNecessary_() {\n    // If the connection isn't considered healthy yet, we'll send a noop ping packet request.\n    if (!this.isHealthy_ && this.state_ === 1\n    /* CONNECTED */\n    ) {\n      this.log_('sending ping on primary.');\n      this.sendData_({\n        t: 'c',\n        d: {\n          t: PING,\n          d: {}\n        }\n      });\n    }\n  }\n\n  onSecondaryConnectionLost_() {\n    const conn = this.secondaryConn_;\n    this.secondaryConn_ = null;\n\n    if (this.tx_ === conn || this.rx_ === conn) {\n      // we are relying on this connection already in some capacity. Therefore, a failure is real\n      this.close();\n    }\n  }\n  /**\r\n   * @param everConnected - Whether or not the connection ever reached a server. Used to determine if\r\n   * we should flush the host cache\r\n   */\n\n\n  onConnectionLost_(everConnected) {\n    this.conn_ = null; // NOTE: IF you're seeing a Firefox error for this line, I think it might be because it's getting\n    // called on window close and RealtimeState.CONNECTING is no longer defined.  Just a guess.\n\n    if (!everConnected && this.state_ === 0\n    /* CONNECTING */\n    ) {\n      this.log_('Realtime connection failed.'); // Since we failed to connect at all, clear any cached entry for this namespace in case the machine went away\n\n      if (this.repoInfo_.isCacheableHost()) {\n        PersistentStorage.remove('host:' + this.repoInfo_.host); // reset the internal host to what we would show the user, i.e. <ns>.firebaseio.com\n\n        this.repoInfo_.internalHost = this.repoInfo_.host;\n      }\n    } else if (this.state_ === 1\n    /* CONNECTED */\n    ) {\n      this.log_('Realtime connection lost.');\n    }\n\n    this.close();\n  }\n\n  onConnectionShutdown_(reason) {\n    this.log_('Connection shutdown command received. Shutting down...');\n\n    if (this.onKill_) {\n      this.onKill_(reason);\n      this.onKill_ = null;\n    } // We intentionally don't want to fire onDisconnect (kill is a different case),\n    // so clear the callback.\n\n\n    this.onDisconnect_ = null;\n    this.close();\n  }\n\n  sendData_(data) {\n    if (this.state_ !== 1\n    /* CONNECTED */\n    ) {\n      throw 'Connection is not connected';\n    } else {\n      this.tx_.send(data);\n    }\n  }\n  /**\r\n   * Cleans up this connection, calling the appropriate callbacks\r\n   */\n\n\n  close() {\n    if (this.state_ !== 2\n    /* DISCONNECTED */\n    ) {\n      this.log_('Closing realtime connection.');\n      this.state_ = 2\n      /* DISCONNECTED */\n      ;\n      this.closeConnections_();\n\n      if (this.onDisconnect_) {\n        this.onDisconnect_();\n        this.onDisconnect_ = null;\n      }\n    }\n  }\n\n  closeConnections_() {\n    this.log_('Shutting down all connections');\n\n    if (this.conn_) {\n      this.conn_.close();\n      this.conn_ = null;\n    }\n\n    if (this.secondaryConn_) {\n      this.secondaryConn_.close();\n      this.secondaryConn_ = null;\n    }\n\n    if (this.healthyTimeout_) {\n      clearTimeout(this.healthyTimeout_);\n      this.healthyTimeout_ = null;\n    }\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Interface defining the set of actions that can be performed against the Firebase server\r\n * (basically corresponds to our wire protocol).\r\n *\r\n * @interface\r\n */\n\n\nclass ServerActions {\n  put(pathString, data, onComplete, hash) {}\n\n  merge(pathString, data, onComplete, hash) {}\n  /**\r\n   * Refreshes the auth token for the current connection.\r\n   * @param token - The authentication token\r\n   */\n\n\n  refreshAuthToken(token) {}\n  /**\r\n   * Refreshes the app check token for the current connection.\r\n   * @param token The app check token\r\n   */\n\n\n  refreshAppCheckToken(token) {}\n\n  onDisconnectPut(pathString, data, onComplete) {}\n\n  onDisconnectMerge(pathString, data, onComplete) {}\n\n  onDisconnectCancel(pathString, onComplete) {}\n\n  reportStats(stats) {}\n\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Base class to be used if you want to emit events. Call the constructor with\r\n * the set of allowed event names.\r\n */\n\n\nclass EventEmitter {\n  constructor(allowedEvents_) {\n    this.allowedEvents_ = allowedEvents_;\n    this.listeners_ = {};\n    assert(Array.isArray(allowedEvents_) && allowedEvents_.length > 0, 'Requires a non-empty array');\n  }\n  /**\r\n   * To be called by derived classes to trigger events.\r\n   */\n\n\n  trigger(eventType) {\n    if (Array.isArray(this.listeners_[eventType])) {\n      // Clone the list, since callbacks could add/remove listeners.\n      const listeners = [...this.listeners_[eventType]];\n\n      for (var _len5 = arguments.length, varArgs = new Array(_len5 > 1 ? _len5 - 1 : 0), _key6 = 1; _key6 < _len5; _key6++) {\n        varArgs[_key6 - 1] = arguments[_key6];\n      }\n\n      for (let i = 0; i < listeners.length; i++) {\n        listeners[i].callback.apply(listeners[i].context, varArgs);\n      }\n    }\n  }\n\n  on(eventType, callback, context) {\n    this.validateEventType_(eventType);\n    this.listeners_[eventType] = this.listeners_[eventType] || [];\n    this.listeners_[eventType].push({\n      callback,\n      context\n    });\n    const eventData = this.getInitialEvent(eventType);\n\n    if (eventData) {\n      callback.apply(context, eventData);\n    }\n  }\n\n  off(eventType, callback, context) {\n    this.validateEventType_(eventType);\n    const listeners = this.listeners_[eventType] || [];\n\n    for (let i = 0; i < listeners.length; i++) {\n      if (listeners[i].callback === callback && (!context || context === listeners[i].context)) {\n        listeners.splice(i, 1);\n        return;\n      }\n    }\n  }\n\n  validateEventType_(eventType) {\n    assert(this.allowedEvents_.find(et => {\n      return et === eventType;\n    }), 'Unknown event: ' + eventType);\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Monitors online state (as reported by window.online/offline events).\r\n *\r\n * The expectation is that this could have many false positives (thinks we are online\r\n * when we're not), but no false negatives.  So we can safely use it to determine when\r\n * we definitely cannot reach the internet.\r\n */\n\n\nclass OnlineMonitor extends EventEmitter {\n  constructor() {\n    super(['online']);\n    this.online_ = true; // We've had repeated complaints that Cordova apps can get stuck \"offline\", e.g.\n    // https://forum.ionicframework.com/t/firebase-connection-is-lost-and-never-come-back/43810\n    // It would seem that the 'online' event does not always fire consistently. So we disable it\n    // for Cordova.\n\n    if (typeof window !== 'undefined' && typeof window.addEventListener !== 'undefined' && !isMobileCordova()) {\n      window.addEventListener('online', () => {\n        if (!this.online_) {\n          this.online_ = true;\n          this.trigger('online', true);\n        }\n      }, false);\n      window.addEventListener('offline', () => {\n        if (this.online_) {\n          this.online_ = false;\n          this.trigger('online', false);\n        }\n      }, false);\n    }\n  }\n\n  static getInstance() {\n    return new OnlineMonitor();\n  }\n\n  getInitialEvent(eventType) {\n    assert(eventType === 'online', 'Unknown event type: ' + eventType);\n    return [this.online_];\n  }\n\n  currentlyOnline() {\n    return this.online_;\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/** Maximum key depth. */\n\n\nconst MAX_PATH_DEPTH = 32;\n/** Maximum number of (UTF8) bytes in a Firebase path. */\n\nconst MAX_PATH_LENGTH_BYTES = 768;\n/**\r\n * An immutable object representing a parsed path.  It's immutable so that you\r\n * can pass them around to other functions without worrying about them changing\r\n * it.\r\n */\n\nclass Path {\n  /**\r\n   * @param pathOrString - Path string to parse, or another path, or the raw\r\n   * tokens array\r\n   */\n  constructor(pathOrString, pieceNum) {\n    if (pieceNum === void 0) {\n      this.pieces_ = pathOrString.split('/'); // Remove empty pieces.\n\n      let copyTo = 0;\n\n      for (let i = 0; i < this.pieces_.length; i++) {\n        if (this.pieces_[i].length > 0) {\n          this.pieces_[copyTo] = this.pieces_[i];\n          copyTo++;\n        }\n      }\n\n      this.pieces_.length = copyTo;\n      this.pieceNum_ = 0;\n    } else {\n      this.pieces_ = pathOrString;\n      this.pieceNum_ = pieceNum;\n    }\n  }\n\n  toString() {\n    let pathString = '';\n\n    for (let i = this.pieceNum_; i < this.pieces_.length; i++) {\n      if (this.pieces_[i] !== '') {\n        pathString += '/' + this.pieces_[i];\n      }\n    }\n\n    return pathString || '/';\n  }\n\n}\n\nfunction newEmptyPath() {\n  return new Path('');\n}\n\nfunction pathGetFront(path) {\n  if (path.pieceNum_ >= path.pieces_.length) {\n    return null;\n  }\n\n  return path.pieces_[path.pieceNum_];\n}\n/**\r\n * @returns The number of segments in this path\r\n */\n\n\nfunction pathGetLength(path) {\n  return path.pieces_.length - path.pieceNum_;\n}\n\nfunction pathPopFront(path) {\n  let pieceNum = path.pieceNum_;\n\n  if (pieceNum < path.pieces_.length) {\n    pieceNum++;\n  }\n\n  return new Path(path.pieces_, pieceNum);\n}\n\nfunction pathGetBack(path) {\n  if (path.pieceNum_ < path.pieces_.length) {\n    return path.pieces_[path.pieces_.length - 1];\n  }\n\n  return null;\n}\n\nfunction pathToUrlEncodedString(path) {\n  let pathString = '';\n\n  for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\n    if (path.pieces_[i] !== '') {\n      pathString += '/' + encodeURIComponent(String(path.pieces_[i]));\n    }\n  }\n\n  return pathString || '/';\n}\n/**\r\n * Shallow copy of the parts of the path.\r\n *\r\n */\n\n\nfunction pathSlice(path) {\n  let begin = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  return path.pieces_.slice(path.pieceNum_ + begin);\n}\n\nfunction pathParent(path) {\n  if (path.pieceNum_ >= path.pieces_.length) {\n    return null;\n  }\n\n  const pieces = [];\n\n  for (let i = path.pieceNum_; i < path.pieces_.length - 1; i++) {\n    pieces.push(path.pieces_[i]);\n  }\n\n  return new Path(pieces, 0);\n}\n\nfunction pathChild(path, childPathObj) {\n  const pieces = [];\n\n  for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\n    pieces.push(path.pieces_[i]);\n  }\n\n  if (childPathObj instanceof Path) {\n    for (let i = childPathObj.pieceNum_; i < childPathObj.pieces_.length; i++) {\n      pieces.push(childPathObj.pieces_[i]);\n    }\n  } else {\n    const childPieces = childPathObj.split('/');\n\n    for (let i = 0; i < childPieces.length; i++) {\n      if (childPieces[i].length > 0) {\n        pieces.push(childPieces[i]);\n      }\n    }\n  }\n\n  return new Path(pieces, 0);\n}\n/**\r\n * @returns True if there are no segments in this path\r\n */\n\n\nfunction pathIsEmpty(path) {\n  return path.pieceNum_ >= path.pieces_.length;\n}\n/**\r\n * @returns The path from outerPath to innerPath\r\n */\n\n\nfunction newRelativePath(outerPath, innerPath) {\n  const outer = pathGetFront(outerPath),\n        inner = pathGetFront(innerPath);\n\n  if (outer === null) {\n    return innerPath;\n  } else if (outer === inner) {\n    return newRelativePath(pathPopFront(outerPath), pathPopFront(innerPath));\n  } else {\n    throw new Error('INTERNAL ERROR: innerPath (' + innerPath + ') is not within ' + 'outerPath (' + outerPath + ')');\n  }\n}\n/**\r\n * @returns -1, 0, 1 if left is less, equal, or greater than the right.\r\n */\n\n\nfunction pathCompare(left, right) {\n  const leftKeys = pathSlice(left, 0);\n  const rightKeys = pathSlice(right, 0);\n\n  for (let i = 0; i < leftKeys.length && i < rightKeys.length; i++) {\n    const cmp = nameCompare(leftKeys[i], rightKeys[i]);\n\n    if (cmp !== 0) {\n      return cmp;\n    }\n  }\n\n  if (leftKeys.length === rightKeys.length) {\n    return 0;\n  }\n\n  return leftKeys.length < rightKeys.length ? -1 : 1;\n}\n/**\r\n * @returns true if paths are the same.\r\n */\n\n\nfunction pathEquals(path, other) {\n  if (pathGetLength(path) !== pathGetLength(other)) {\n    return false;\n  }\n\n  for (let i = path.pieceNum_, j = other.pieceNum_; i <= path.pieces_.length; i++, j++) {\n    if (path.pieces_[i] !== other.pieces_[j]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n/**\r\n * @returns True if this path is a parent (or the same as) other\r\n */\n\n\nfunction pathContains(path, other) {\n  let i = path.pieceNum_;\n  let j = other.pieceNum_;\n\n  if (pathGetLength(path) > pathGetLength(other)) {\n    return false;\n  }\n\n  while (i < path.pieces_.length) {\n    if (path.pieces_[i] !== other.pieces_[j]) {\n      return false;\n    }\n\n    ++i;\n    ++j;\n  }\n\n  return true;\n}\n/**\r\n * Dynamic (mutable) path used to count path lengths.\r\n *\r\n * This class is used to efficiently check paths for valid\r\n * length (in UTF8 bytes) and depth (used in path validation).\r\n *\r\n * Throws Error exception if path is ever invalid.\r\n *\r\n * The definition of a path always begins with '/'.\r\n */\n\n\nclass ValidationPath {\n  /**\r\n   * @param path - Initial Path.\r\n   * @param errorPrefix_ - Prefix for any error messages.\r\n   */\n  constructor(path, errorPrefix_) {\n    this.errorPrefix_ = errorPrefix_;\n    this.parts_ = pathSlice(path, 0);\n    /** Initialize to number of '/' chars needed in path. */\n\n    this.byteLength_ = Math.max(1, this.parts_.length);\n\n    for (let i = 0; i < this.parts_.length; i++) {\n      this.byteLength_ += stringLength(this.parts_[i]);\n    }\n\n    validationPathCheckValid(this);\n  }\n\n}\n\nfunction validationPathPush(validationPath, child) {\n  // Count the needed '/'\n  if (validationPath.parts_.length > 0) {\n    validationPath.byteLength_ += 1;\n  }\n\n  validationPath.parts_.push(child);\n  validationPath.byteLength_ += stringLength(child);\n  validationPathCheckValid(validationPath);\n}\n\nfunction validationPathPop(validationPath) {\n  const last = validationPath.parts_.pop();\n  validationPath.byteLength_ -= stringLength(last); // Un-count the previous '/'\n\n  if (validationPath.parts_.length > 0) {\n    validationPath.byteLength_ -= 1;\n  }\n}\n\nfunction validationPathCheckValid(validationPath) {\n  if (validationPath.byteLength_ > MAX_PATH_LENGTH_BYTES) {\n    throw new Error(validationPath.errorPrefix_ + 'has a key path longer than ' + MAX_PATH_LENGTH_BYTES + ' bytes (' + validationPath.byteLength_ + ').');\n  }\n\n  if (validationPath.parts_.length > MAX_PATH_DEPTH) {\n    throw new Error(validationPath.errorPrefix_ + 'path specified exceeds the maximum depth that can be written (' + MAX_PATH_DEPTH + ') or object contains a cycle ' + validationPathToErrorString(validationPath));\n  }\n}\n/**\r\n * String for use in error messages - uses '.' notation for path.\r\n */\n\n\nfunction validationPathToErrorString(validationPath) {\n  if (validationPath.parts_.length === 0) {\n    return '';\n  }\n\n  return \"in property '\" + validationPath.parts_.join('.') + \"'\";\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nclass VisibilityMonitor extends EventEmitter {\n  constructor() {\n    super(['visible']);\n    let hidden;\n    let visibilityChange;\n\n    if (typeof document !== 'undefined' && typeof document.addEventListener !== 'undefined') {\n      if (typeof document['hidden'] !== 'undefined') {\n        // Opera 12.10 and Firefox 18 and later support\n        visibilityChange = 'visibilitychange';\n        hidden = 'hidden';\n      } else if (typeof document['mozHidden'] !== 'undefined') {\n        visibilityChange = 'mozvisibilitychange';\n        hidden = 'mozHidden';\n      } else if (typeof document['msHidden'] !== 'undefined') {\n        visibilityChange = 'msvisibilitychange';\n        hidden = 'msHidden';\n      } else if (typeof document['webkitHidden'] !== 'undefined') {\n        visibilityChange = 'webkitvisibilitychange';\n        hidden = 'webkitHidden';\n      }\n    } // Initially, we always assume we are visible. This ensures that in browsers\n    // without page visibility support or in cases where we are never visible\n    // (e.g. chrome extension), we act as if we are visible, i.e. don't delay\n    // reconnects\n\n\n    this.visible_ = true;\n\n    if (visibilityChange) {\n      document.addEventListener(visibilityChange, () => {\n        const visible = !document[hidden];\n\n        if (visible !== this.visible_) {\n          this.visible_ = visible;\n          this.trigger('visible', visible);\n        }\n      }, false);\n    }\n  }\n\n  static getInstance() {\n    return new VisibilityMonitor();\n  }\n\n  getInitialEvent(eventType) {\n    assert(eventType === 'visible', 'Unknown event type: ' + eventType);\n    return [this.visible_];\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nconst RECONNECT_MIN_DELAY = 1000;\nconst RECONNECT_MAX_DELAY_DEFAULT = 60 * 5 * 1000; // 5 minutes in milliseconds (Case: 1858)\n\nconst GET_CONNECT_TIMEOUT = 3 * 1000;\nconst RECONNECT_MAX_DELAY_FOR_ADMINS = 30 * 1000; // 30 seconds for admin clients (likely to be a backend server)\n\nconst RECONNECT_DELAY_MULTIPLIER = 1.3;\nconst RECONNECT_DELAY_RESET_TIMEOUT = 30000; // Reset delay back to MIN_DELAY after being connected for 30sec.\n\nconst SERVER_KILL_INTERRUPT_REASON = 'server_kill'; // If auth fails repeatedly, we'll assume something is wrong and log a warning / back off.\n\nconst INVALID_TOKEN_THRESHOLD = 3;\n/**\r\n * Firebase connection.  Abstracts wire protocol and handles reconnecting.\r\n *\r\n * NOTE: All JSON objects sent to the realtime connection must have property names enclosed\r\n * in quotes to make sure the closure compiler does not minify them.\r\n */\n\nclass PersistentConnection extends ServerActions {\n  /**\r\n   * @param repoInfo_ - Data about the namespace we are connecting to\r\n   * @param applicationId_ - The Firebase App ID for this project\r\n   * @param onDataUpdate_ - A callback for new data from the server\r\n   */\n  constructor(repoInfo_, applicationId_, onDataUpdate_, onConnectStatus_, onServerInfoUpdate_, authTokenProvider_, appCheckTokenProvider_, authOverride_) {\n    super();\n    this.repoInfo_ = repoInfo_;\n    this.applicationId_ = applicationId_;\n    this.onDataUpdate_ = onDataUpdate_;\n    this.onConnectStatus_ = onConnectStatus_;\n    this.onServerInfoUpdate_ = onServerInfoUpdate_;\n    this.authTokenProvider_ = authTokenProvider_;\n    this.appCheckTokenProvider_ = appCheckTokenProvider_;\n    this.authOverride_ = authOverride_; // Used for diagnostic logging.\n\n    this.id = PersistentConnection.nextPersistentConnectionId_++;\n    this.log_ = logWrapper('p:' + this.id + ':');\n    this.interruptReasons_ = {};\n    this.listens = new Map();\n    this.outstandingPuts_ = [];\n    this.outstandingGets_ = [];\n    this.outstandingPutCount_ = 0;\n    this.outstandingGetCount_ = 0;\n    this.onDisconnectRequestQueue_ = [];\n    this.connected_ = false;\n    this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n    this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_DEFAULT;\n    this.securityDebugCallback_ = null;\n    this.lastSessionId = null;\n    this.establishConnectionTimer_ = null;\n    this.visible_ = false; // Before we get connected, we keep a queue of pending messages to send.\n\n    this.requestCBHash_ = {};\n    this.requestNumber_ = 0;\n    this.realtime_ = null;\n    this.authToken_ = null;\n    this.appCheckToken_ = null;\n    this.forceTokenRefresh_ = false;\n    this.invalidAuthTokenCount_ = 0;\n    this.invalidAppCheckTokenCount_ = 0;\n    this.firstConnection_ = true;\n    this.lastConnectionAttemptTime_ = null;\n    this.lastConnectionEstablishedTime_ = null;\n\n    if (authOverride_ && !isNodeSdk()) {\n      throw new Error('Auth override specified in options, but not supported on non Node.js platforms');\n    }\n\n    VisibilityMonitor.getInstance().on('visible', this.onVisible_, this);\n\n    if (repoInfo_.host.indexOf('fblocal') === -1) {\n      OnlineMonitor.getInstance().on('online', this.onOnline_, this);\n    }\n  }\n\n  sendRequest(action, body, onResponse) {\n    const curReqNum = ++this.requestNumber_;\n    const msg = {\n      r: curReqNum,\n      a: action,\n      b: body\n    };\n    this.log_(stringify(msg));\n    assert(this.connected_, \"sendRequest call when we're not connected not allowed.\");\n    this.realtime_.sendRequest(msg);\n\n    if (onResponse) {\n      this.requestCBHash_[curReqNum] = onResponse;\n    }\n  }\n\n  get(query) {\n    this.initConnection_();\n    const deferred = new Deferred();\n    const request = {\n      p: query._path.toString(),\n      q: query._queryObject\n    };\n    const outstandingGet = {\n      action: 'g',\n      request,\n      onComplete: message => {\n        const payload = message['d'];\n\n        if (message['s'] === 'ok') {\n          this.onDataUpdate_(request['p'], payload,\n          /*isMerge*/\n          false,\n          /*tag*/\n          null);\n          deferred.resolve(payload);\n        } else {\n          deferred.reject(payload);\n        }\n      }\n    };\n    this.outstandingGets_.push(outstandingGet);\n    this.outstandingGetCount_++;\n    const index = this.outstandingGets_.length - 1;\n\n    if (!this.connected_) {\n      setTimeout(() => {\n        const get = this.outstandingGets_[index];\n\n        if (get === undefined || outstandingGet !== get) {\n          return;\n        }\n\n        delete this.outstandingGets_[index];\n        this.outstandingGetCount_--;\n\n        if (this.outstandingGetCount_ === 0) {\n          this.outstandingGets_ = [];\n        }\n\n        this.log_('get ' + index + ' timed out on connection');\n        deferred.reject(new Error('Client is offline.'));\n      }, GET_CONNECT_TIMEOUT);\n    }\n\n    if (this.connected_) {\n      this.sendGet_(index);\n    }\n\n    return deferred.promise;\n  }\n\n  listen(query, currentHashFn, tag, onComplete) {\n    this.initConnection_();\n    const queryId = query._queryIdentifier;\n\n    const pathString = query._path.toString();\n\n    this.log_('Listen called for ' + pathString + ' ' + queryId);\n\n    if (!this.listens.has(pathString)) {\n      this.listens.set(pathString, new Map());\n    }\n\n    assert(query._queryParams.isDefault() || !query._queryParams.loadsAllData(), 'listen() called for non-default but complete query');\n    assert(!this.listens.get(pathString).has(queryId), 'listen() called twice for same path/queryId.');\n    const listenSpec = {\n      onComplete,\n      hashFn: currentHashFn,\n      query,\n      tag\n    };\n    this.listens.get(pathString).set(queryId, listenSpec);\n\n    if (this.connected_) {\n      this.sendListen_(listenSpec);\n    }\n  }\n\n  sendGet_(index) {\n    const get = this.outstandingGets_[index];\n    this.sendRequest('g', get.request, message => {\n      delete this.outstandingGets_[index];\n      this.outstandingGetCount_--;\n\n      if (this.outstandingGetCount_ === 0) {\n        this.outstandingGets_ = [];\n      }\n\n      if (get.onComplete) {\n        get.onComplete(message);\n      }\n    });\n  }\n\n  sendListen_(listenSpec) {\n    const query = listenSpec.query;\n\n    const pathString = query._path.toString();\n\n    const queryId = query._queryIdentifier;\n    this.log_('Listen on ' + pathString + ' for ' + queryId);\n    const req = {\n      /*path*/\n      p: pathString\n    };\n    const action = 'q'; // Only bother to send query if it's non-default.\n\n    if (listenSpec.tag) {\n      req['q'] = query._queryObject;\n      req['t'] = listenSpec.tag;\n    }\n\n    req[\n    /*hash*/\n    'h'] = listenSpec.hashFn();\n    this.sendRequest(action, req, message => {\n      const payload = message[\n      /*data*/\n      'd'];\n      const status = message[\n      /*status*/\n      's']; // print warnings in any case...\n\n      PersistentConnection.warnOnListenWarnings_(payload, query);\n      const currentListenSpec = this.listens.get(pathString) && this.listens.get(pathString).get(queryId); // only trigger actions if the listen hasn't been removed and readded\n\n      if (currentListenSpec === listenSpec) {\n        this.log_('listen response', message);\n\n        if (status !== 'ok') {\n          this.removeListen_(pathString, queryId);\n        }\n\n        if (listenSpec.onComplete) {\n          listenSpec.onComplete(status, payload);\n        }\n      }\n    });\n  }\n\n  static warnOnListenWarnings_(payload, query) {\n    if (payload && typeof payload === 'object' && contains(payload, 'w')) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const warnings = safeGet(payload, 'w');\n\n      if (Array.isArray(warnings) && ~warnings.indexOf('no_index')) {\n        const indexSpec = '\".indexOn\": \"' + query._queryParams.getIndex().toString() + '\"';\n\n        const indexPath = query._path.toString();\n\n        warn(`Using an unspecified index. Your data will be downloaded and ` + `filtered on the client. Consider adding ${indexSpec} at ` + `${indexPath} to your security rules for better performance.`);\n      }\n    }\n  }\n\n  refreshAuthToken(token) {\n    this.authToken_ = token;\n    this.log_('Auth token refreshed');\n\n    if (this.authToken_) {\n      this.tryAuth();\n    } else {\n      //If we're connected we want to let the server know to unauthenticate us. If we're not connected, simply delete\n      //the credential so we dont become authenticated next time we connect.\n      if (this.connected_) {\n        this.sendRequest('unauth', {}, () => {});\n      }\n    }\n\n    this.reduceReconnectDelayIfAdminCredential_(token);\n  }\n\n  reduceReconnectDelayIfAdminCredential_(credential) {\n    // NOTE: This isn't intended to be bulletproof (a malicious developer can always just modify the client).\n    // Additionally, we don't bother resetting the max delay back to the default if auth fails / expires.\n    const isFirebaseSecret = credential && credential.length === 40;\n\n    if (isFirebaseSecret || isAdmin(credential)) {\n      this.log_('Admin auth credential detected.  Reducing max reconnect time.');\n      this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\n    }\n  }\n\n  refreshAppCheckToken(token) {\n    this.appCheckToken_ = token;\n    this.log_('App check token refreshed');\n\n    if (this.appCheckToken_) {\n      this.tryAppCheck();\n    } else {\n      //If we're connected we want to let the server know to unauthenticate us.\n      //If we're not connected, simply delete the credential so we dont become\n      // authenticated next time we connect.\n      if (this.connected_) {\n        this.sendRequest('unappeck', {}, () => {});\n      }\n    }\n  }\n  /**\r\n   * Attempts to authenticate with the given credentials. If the authentication attempt fails, it's triggered like\r\n   * a auth revoked (the connection is closed).\r\n   */\n\n\n  tryAuth() {\n    if (this.connected_ && this.authToken_) {\n      const token = this.authToken_;\n      const authMethod = isValidFormat(token) ? 'auth' : 'gauth';\n      const requestData = {\n        cred: token\n      };\n\n      if (this.authOverride_ === null) {\n        requestData['noauth'] = true;\n      } else if (typeof this.authOverride_ === 'object') {\n        requestData['authvar'] = this.authOverride_;\n      }\n\n      this.sendRequest(authMethod, requestData, res => {\n        const status = res[\n        /*status*/\n        's'];\n        const data = res[\n        /*data*/\n        'd'] || 'error';\n\n        if (this.authToken_ === token) {\n          if (status === 'ok') {\n            this.invalidAuthTokenCount_ = 0;\n          } else {\n            // Triggers reconnect and force refresh for auth token\n            this.onAuthRevoked_(status, data);\n          }\n        }\n      });\n    }\n  }\n  /**\r\n   * Attempts to authenticate with the given token. If the authentication\r\n   * attempt fails, it's triggered like the token was revoked (the connection is\r\n   * closed).\r\n   */\n\n\n  tryAppCheck() {\n    if (this.connected_ && this.appCheckToken_) {\n      this.sendRequest('appcheck', {\n        'token': this.appCheckToken_\n      }, res => {\n        const status = res[\n        /*status*/\n        's'];\n        const data = res[\n        /*data*/\n        'd'] || 'error';\n\n        if (status === 'ok') {\n          this.invalidAppCheckTokenCount_ = 0;\n        } else {\n          this.onAppCheckRevoked_(status, data);\n        }\n      });\n    }\n  }\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  unlisten(query, tag) {\n    const pathString = query._path.toString();\n\n    const queryId = query._queryIdentifier;\n    this.log_('Unlisten called for ' + pathString + ' ' + queryId);\n    assert(query._queryParams.isDefault() || !query._queryParams.loadsAllData(), 'unlisten() called for non-default but complete query');\n    const listen = this.removeListen_(pathString, queryId);\n\n    if (listen && this.connected_) {\n      this.sendUnlisten_(pathString, queryId, query._queryObject, tag);\n    }\n  }\n\n  sendUnlisten_(pathString, queryId, queryObj, tag) {\n    this.log_('Unlisten on ' + pathString + ' for ' + queryId);\n    const req = {\n      /*path*/\n      p: pathString\n    };\n    const action = 'n'; // Only bother sending queryId if it's non-default.\n\n    if (tag) {\n      req['q'] = queryObj;\n      req['t'] = tag;\n    }\n\n    this.sendRequest(action, req);\n  }\n\n  onDisconnectPut(pathString, data, onComplete) {\n    this.initConnection_();\n\n    if (this.connected_) {\n      this.sendOnDisconnect_('o', pathString, data, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'o',\n        data,\n        onComplete\n      });\n    }\n  }\n\n  onDisconnectMerge(pathString, data, onComplete) {\n    this.initConnection_();\n\n    if (this.connected_) {\n      this.sendOnDisconnect_('om', pathString, data, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'om',\n        data,\n        onComplete\n      });\n    }\n  }\n\n  onDisconnectCancel(pathString, onComplete) {\n    this.initConnection_();\n\n    if (this.connected_) {\n      this.sendOnDisconnect_('oc', pathString, null, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'oc',\n        data: null,\n        onComplete\n      });\n    }\n  }\n\n  sendOnDisconnect_(action, pathString, data, onComplete) {\n    const request = {\n      /*path*/\n      p: pathString,\n\n      /*data*/\n      d: data\n    };\n    this.log_('onDisconnect ' + action, request);\n    this.sendRequest(action, request, response => {\n      if (onComplete) {\n        setTimeout(() => {\n          onComplete(response[\n          /*status*/\n          's'], response[\n          /* data */\n          'd']);\n        }, Math.floor(0));\n      }\n    });\n  }\n\n  put(pathString, data, onComplete, hash) {\n    this.putInternal('p', pathString, data, onComplete, hash);\n  }\n\n  merge(pathString, data, onComplete, hash) {\n    this.putInternal('m', pathString, data, onComplete, hash);\n  }\n\n  putInternal(action, pathString, data, onComplete, hash) {\n    this.initConnection_();\n    const request = {\n      /*path*/\n      p: pathString,\n\n      /*data*/\n      d: data\n    };\n\n    if (hash !== undefined) {\n      request[\n      /*hash*/\n      'h'] = hash;\n    } // TODO: Only keep track of the most recent put for a given path?\n\n\n    this.outstandingPuts_.push({\n      action,\n      request,\n      onComplete\n    });\n    this.outstandingPutCount_++;\n    const index = this.outstandingPuts_.length - 1;\n\n    if (this.connected_) {\n      this.sendPut_(index);\n    } else {\n      this.log_('Buffering put: ' + pathString);\n    }\n  }\n\n  sendPut_(index) {\n    const action = this.outstandingPuts_[index].action;\n    const request = this.outstandingPuts_[index].request;\n    const onComplete = this.outstandingPuts_[index].onComplete;\n    this.outstandingPuts_[index].queued = this.connected_;\n    this.sendRequest(action, request, message => {\n      this.log_(action + ' response', message);\n      delete this.outstandingPuts_[index];\n      this.outstandingPutCount_--; // Clean up array occasionally.\n\n      if (this.outstandingPutCount_ === 0) {\n        this.outstandingPuts_ = [];\n      }\n\n      if (onComplete) {\n        onComplete(message[\n        /*status*/\n        's'], message[\n        /* data */\n        'd']);\n      }\n    });\n  }\n\n  reportStats(stats) {\n    // If we're not connected, we just drop the stats.\n    if (this.connected_) {\n      const request = {\n        /*counters*/\n        c: stats\n      };\n      this.log_('reportStats', request);\n      this.sendRequest(\n      /*stats*/\n      's', request, result => {\n        const status = result[\n        /*status*/\n        's'];\n\n        if (status !== 'ok') {\n          const errorReason = result[\n          /* data */\n          'd'];\n          this.log_('reportStats', 'Error sending stats: ' + errorReason);\n        }\n      });\n    }\n  }\n\n  onDataMessage_(message) {\n    if ('r' in message) {\n      // this is a response\n      this.log_('from server: ' + stringify(message));\n      const reqNum = message['r'];\n      const onResponse = this.requestCBHash_[reqNum];\n\n      if (onResponse) {\n        delete this.requestCBHash_[reqNum];\n        onResponse(message[\n        /*body*/\n        'b']);\n      }\n    } else if ('error' in message) {\n      throw 'A server-side error has occurred: ' + message['error'];\n    } else if ('a' in message) {\n      // a and b are action and body, respectively\n      this.onDataPush_(message['a'], message['b']);\n    }\n  }\n\n  onDataPush_(action, body) {\n    this.log_('handleServerMessage', action, body);\n\n    if (action === 'd') {\n      this.onDataUpdate_(body[\n      /*path*/\n      'p'], body[\n      /*data*/\n      'd'],\n      /*isMerge*/\n      false, body['t']);\n    } else if (action === 'm') {\n      this.onDataUpdate_(body[\n      /*path*/\n      'p'], body[\n      /*data*/\n      'd'],\n      /*isMerge=*/\n      true, body['t']);\n    } else if (action === 'c') {\n      this.onListenRevoked_(body[\n      /*path*/\n      'p'], body[\n      /*query*/\n      'q']);\n    } else if (action === 'ac') {\n      this.onAuthRevoked_(body[\n      /*status code*/\n      's'], body[\n      /* explanation */\n      'd']);\n    } else if (action === 'apc') {\n      this.onAppCheckRevoked_(body[\n      /*status code*/\n      's'], body[\n      /* explanation */\n      'd']);\n    } else if (action === 'sd') {\n      this.onSecurityDebugPacket_(body);\n    } else {\n      error('Unrecognized action received from server: ' + stringify(action) + '\\nAre you using the latest client?');\n    }\n  }\n\n  onReady_(timestamp, sessionId) {\n    this.log_('connection ready');\n    this.connected_ = true;\n    this.lastConnectionEstablishedTime_ = new Date().getTime();\n    this.handleTimestamp_(timestamp);\n    this.lastSessionId = sessionId;\n\n    if (this.firstConnection_) {\n      this.sendConnectStats_();\n    }\n\n    this.restoreState_();\n    this.firstConnection_ = false;\n    this.onConnectStatus_(true);\n  }\n\n  scheduleConnect_(timeout) {\n    assert(!this.realtime_, \"Scheduling a connect when we're already connected/ing?\");\n\n    if (this.establishConnectionTimer_) {\n      clearTimeout(this.establishConnectionTimer_);\n    } // NOTE: Even when timeout is 0, it's important to do a setTimeout to work around an infuriating \"Security Error\" in\n    // Firefox when trying to write to our long-polling iframe in some scenarios (e.g. Forge or our unit tests).\n\n\n    this.establishConnectionTimer_ = setTimeout(() => {\n      this.establishConnectionTimer_ = null;\n      this.establishConnection_(); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(timeout));\n  }\n\n  initConnection_() {\n    if (!this.realtime_ && this.firstConnection_) {\n      this.scheduleConnect_(0);\n    }\n  }\n\n  onVisible_(visible) {\n    // NOTE: Tabbing away and back to a window will defeat our reconnect backoff, but I think that's fine.\n    if (visible && !this.visible_ && this.reconnectDelay_ === this.maxReconnectDelay_) {\n      this.log_('Window became visible.  Reducing delay.');\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    }\n\n    this.visible_ = visible;\n  }\n\n  onOnline_(online) {\n    if (online) {\n      this.log_('Browser went online.');\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    } else {\n      this.log_('Browser went offline.  Killing connection.');\n\n      if (this.realtime_) {\n        this.realtime_.close();\n      }\n    }\n  }\n\n  onRealtimeDisconnect_() {\n    this.log_('data client disconnected');\n    this.connected_ = false;\n    this.realtime_ = null; // Since we don't know if our sent transactions succeeded or not, we need to cancel them.\n\n    this.cancelSentTransactions_(); // Clear out the pending requests.\n\n    this.requestCBHash_ = {};\n\n    if (this.shouldReconnect_()) {\n      if (!this.visible_) {\n        this.log_(\"Window isn't visible.  Delaying reconnect.\");\n        this.reconnectDelay_ = this.maxReconnectDelay_;\n        this.lastConnectionAttemptTime_ = new Date().getTime();\n      } else if (this.lastConnectionEstablishedTime_) {\n        // If we've been connected long enough, reset reconnect delay to minimum.\n        const timeSinceLastConnectSucceeded = new Date().getTime() - this.lastConnectionEstablishedTime_;\n\n        if (timeSinceLastConnectSucceeded > RECONNECT_DELAY_RESET_TIMEOUT) {\n          this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n        }\n\n        this.lastConnectionEstablishedTime_ = null;\n      }\n\n      const timeSinceLastConnectAttempt = new Date().getTime() - this.lastConnectionAttemptTime_;\n      let reconnectDelay = Math.max(0, this.reconnectDelay_ - timeSinceLastConnectAttempt);\n      reconnectDelay = Math.random() * reconnectDelay;\n      this.log_('Trying to reconnect in ' + reconnectDelay + 'ms');\n      this.scheduleConnect_(reconnectDelay); // Adjust reconnect delay for next time.\n\n      this.reconnectDelay_ = Math.min(this.maxReconnectDelay_, this.reconnectDelay_ * RECONNECT_DELAY_MULTIPLIER);\n    }\n\n    this.onConnectStatus_(false);\n  }\n\n  async establishConnection_() {\n    if (this.shouldReconnect_()) {\n      this.log_('Making a connection attempt');\n      this.lastConnectionAttemptTime_ = new Date().getTime();\n      this.lastConnectionEstablishedTime_ = null;\n      const onDataMessage = this.onDataMessage_.bind(this);\n      const onReady = this.onReady_.bind(this);\n      const onDisconnect = this.onRealtimeDisconnect_.bind(this);\n      const connId = this.id + ':' + PersistentConnection.nextConnectionId_++;\n      const lastSessionId = this.lastSessionId;\n      let canceled = false;\n      let connection = null;\n\n      const closeFn = function () {\n        if (connection) {\n          connection.close();\n        } else {\n          canceled = true;\n          onDisconnect();\n        }\n      };\n\n      const sendRequestFn = function (msg) {\n        assert(connection, \"sendRequest call when we're not connected not allowed.\");\n        connection.sendRequest(msg);\n      };\n\n      this.realtime_ = {\n        close: closeFn,\n        sendRequest: sendRequestFn\n      };\n      const forceRefresh = this.forceTokenRefresh_;\n      this.forceTokenRefresh_ = false;\n\n      try {\n        // First fetch auth and app check token, and establish connection after\n        // fetching the token was successful\n        const [authToken, appCheckToken] = await Promise.all([this.authTokenProvider_.getToken(forceRefresh), this.appCheckTokenProvider_.getToken(forceRefresh)]);\n\n        if (!canceled) {\n          log('getToken() completed. Creating connection.');\n          this.authToken_ = authToken && authToken.accessToken;\n          this.appCheckToken_ = appCheckToken && appCheckToken.token;\n          connection = new Connection(connId, this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, onDataMessage, onReady, onDisconnect,\n          /* onKill= */\n          reason => {\n            warn(reason + ' (' + this.repoInfo_.toString() + ')');\n            this.interrupt(SERVER_KILL_INTERRUPT_REASON);\n          }, lastSessionId);\n        } else {\n          log('getToken() completed but was canceled');\n        }\n      } catch (error) {\n        this.log_('Failed to get token: ' + error);\n\n        if (!canceled) {\n          if (this.repoInfo_.nodeAdmin) {\n            // This may be a critical error for the Admin Node.js SDK, so log a warning.\n            // But getToken() may also just have temporarily failed, so we still want to\n            // continue retrying.\n            warn(error);\n          }\n\n          closeFn();\n        }\n      }\n    }\n  }\n\n  interrupt(reason) {\n    log('Interrupting connection for reason: ' + reason);\n    this.interruptReasons_[reason] = true;\n\n    if (this.realtime_) {\n      this.realtime_.close();\n    } else {\n      if (this.establishConnectionTimer_) {\n        clearTimeout(this.establishConnectionTimer_);\n        this.establishConnectionTimer_ = null;\n      }\n\n      if (this.connected_) {\n        this.onRealtimeDisconnect_();\n      }\n    }\n  }\n\n  resume(reason) {\n    log('Resuming connection for reason: ' + reason);\n    delete this.interruptReasons_[reason];\n\n    if (isEmpty(this.interruptReasons_)) {\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    }\n  }\n\n  handleTimestamp_(timestamp) {\n    const delta = timestamp - new Date().getTime();\n    this.onServerInfoUpdate_({\n      serverTimeOffset: delta\n    });\n  }\n\n  cancelSentTransactions_() {\n    for (let i = 0; i < this.outstandingPuts_.length; i++) {\n      const put = this.outstandingPuts_[i];\n\n      if (put &&\n      /*hash*/\n      'h' in put.request && put.queued) {\n        if (put.onComplete) {\n          put.onComplete('disconnect');\n        }\n\n        delete this.outstandingPuts_[i];\n        this.outstandingPutCount_--;\n      }\n    } // Clean up array occasionally.\n\n\n    if (this.outstandingPutCount_ === 0) {\n      this.outstandingPuts_ = [];\n    }\n  }\n\n  onListenRevoked_(pathString, query) {\n    // Remove the listen and manufacture a \"permission_denied\" error for the failed listen.\n    let queryId;\n\n    if (!query) {\n      queryId = 'default';\n    } else {\n      queryId = query.map(q => ObjectToUniqueKey(q)).join('$');\n    }\n\n    const listen = this.removeListen_(pathString, queryId);\n\n    if (listen && listen.onComplete) {\n      listen.onComplete('permission_denied');\n    }\n  }\n\n  removeListen_(pathString, queryId) {\n    const normalizedPathString = new Path(pathString).toString(); // normalize path.\n\n    let listen;\n\n    if (this.listens.has(normalizedPathString)) {\n      const map = this.listens.get(normalizedPathString);\n      listen = map.get(queryId);\n      map.delete(queryId);\n\n      if (map.size === 0) {\n        this.listens.delete(normalizedPathString);\n      }\n    } else {\n      // all listens for this path has already been removed\n      listen = undefined;\n    }\n\n    return listen;\n  }\n\n  onAuthRevoked_(statusCode, explanation) {\n    log('Auth token revoked: ' + statusCode + '/' + explanation);\n    this.authToken_ = null;\n    this.forceTokenRefresh_ = true;\n    this.realtime_.close();\n\n    if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\n      // We'll wait a couple times before logging the warning / increasing the\n      // retry period since oauth tokens will report as \"invalid\" if they're\n      // just expired. Plus there may be transient issues that resolve themselves.\n      this.invalidAuthTokenCount_++;\n\n      if (this.invalidAuthTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\n        // Set a long reconnect delay because recovery is unlikely\n        this.reconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS; // Notify the auth token provider that the token is invalid, which will log\n        // a warning\n\n        this.authTokenProvider_.notifyForInvalidToken();\n      }\n    }\n  }\n\n  onAppCheckRevoked_(statusCode, explanation) {\n    log('App check token revoked: ' + statusCode + '/' + explanation);\n    this.appCheckToken_ = null;\n    this.forceTokenRefresh_ = true; // Note: We don't close the connection as the developer may not have\n    // enforcement enabled. The backend closes connections with enforcements.\n\n    if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\n      // We'll wait a couple times before logging the warning / increasing the\n      // retry period since oauth tokens will report as \"invalid\" if they're\n      // just expired. Plus there may be transient issues that resolve themselves.\n      this.invalidAppCheckTokenCount_++;\n\n      if (this.invalidAppCheckTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\n        this.appCheckTokenProvider_.notifyForInvalidToken();\n      }\n    }\n  }\n\n  onSecurityDebugPacket_(body) {\n    if (this.securityDebugCallback_) {\n      this.securityDebugCallback_(body);\n    } else {\n      if ('msg' in body) {\n        console.log('FIREBASE: ' + body['msg'].replace('\\n', '\\nFIREBASE: '));\n      }\n    }\n  }\n\n  restoreState_() {\n    //Re-authenticate ourselves if we have a credential stored.\n    this.tryAuth();\n    this.tryAppCheck(); // Puts depend on having received the corresponding data update from the server before they complete, so we must\n    // make sure to send listens before puts.\n\n    for (const queries of this.listens.values()) {\n      for (const listenSpec of queries.values()) {\n        this.sendListen_(listenSpec);\n      }\n    }\n\n    for (let i = 0; i < this.outstandingPuts_.length; i++) {\n      if (this.outstandingPuts_[i]) {\n        this.sendPut_(i);\n      }\n    }\n\n    while (this.onDisconnectRequestQueue_.length) {\n      const request = this.onDisconnectRequestQueue_.shift();\n      this.sendOnDisconnect_(request.action, request.pathString, request.data, request.onComplete);\n    }\n\n    for (let i = 0; i < this.outstandingGets_.length; i++) {\n      if (this.outstandingGets_[i]) {\n        this.sendGet_(i);\n      }\n    }\n  }\n  /**\r\n   * Sends client stats for first connection\r\n   */\n\n\n  sendConnectStats_() {\n    const stats = {};\n    let clientName = 'js';\n\n    if (isNodeSdk()) {\n      if (this.repoInfo_.nodeAdmin) {\n        clientName = 'admin_node';\n      } else {\n        clientName = 'node';\n      }\n    }\n\n    stats['sdk.' + clientName + '.' + SDK_VERSION.replace(/\\./g, '-')] = 1;\n\n    if (isMobileCordova()) {\n      stats['framework.cordova'] = 1;\n    } else if (isReactNative()) {\n      stats['framework.reactnative'] = 1;\n    }\n\n    this.reportStats(stats);\n  }\n\n  shouldReconnect_() {\n    const online = OnlineMonitor.getInstance().currentlyOnline();\n    return isEmpty(this.interruptReasons_) && online;\n  }\n\n}\n\nPersistentConnection.nextPersistentConnectionId_ = 0;\n/**\r\n * Counter for number of connections created. Mainly used for tagging in the logs\r\n */\n\nPersistentConnection.nextConnectionId_ = 0;\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nclass NamedNode {\n  constructor(name, node) {\n    this.name = name;\n    this.node = node;\n  }\n\n  static Wrap(name, node) {\n    return new NamedNode(name, node);\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nclass Index {\n  /**\r\n   * @returns A standalone comparison function for\r\n   * this index\r\n   */\n  getCompare() {\n    return this.compare.bind(this);\n  }\n  /**\r\n   * Given a before and after value for a node, determine if the indexed value has changed. Even if they are different,\r\n   * it's possible that the changes are isolated to parts of the snapshot that are not indexed.\r\n   *\r\n   *\r\n   * @returns True if the portion of the snapshot being indexed changed between oldNode and newNode\r\n   */\n\n\n  indexedValueChanged(oldNode, newNode) {\n    const oldWrapped = new NamedNode(MIN_NAME, oldNode);\n    const newWrapped = new NamedNode(MIN_NAME, newNode);\n    return this.compare(oldWrapped, newWrapped) !== 0;\n  }\n  /**\r\n   * @returns a node wrapper that will sort equal to or less than\r\n   * any other node wrapper, using this index\r\n   */\n\n\n  minPost() {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return NamedNode.MIN;\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nlet __EMPTY_NODE;\n\nclass KeyIndex extends Index {\n  static get __EMPTY_NODE() {\n    return __EMPTY_NODE;\n  }\n\n  static set __EMPTY_NODE(val) {\n    __EMPTY_NODE = val;\n  }\n\n  compare(a, b) {\n    return nameCompare(a.name, b.name);\n  }\n\n  isDefinedOn(node) {\n    // We could probably return true here (since every node has a key), but it's never called\n    // so just leaving unimplemented for now.\n    throw assertionError('KeyIndex.isDefinedOn not expected to be called.');\n  }\n\n  indexedValueChanged(oldNode, newNode) {\n    return false; // The key for a node never changes.\n  }\n\n  minPost() {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return NamedNode.MIN;\n  }\n\n  maxPost() {\n    // TODO: This should really be created once and cached in a static property, but\n    // NamedNode isn't defined yet, so I can't use it in a static.  Bleh.\n    return new NamedNode(MAX_NAME, __EMPTY_NODE);\n  }\n\n  makePost(indexValue, name) {\n    assert(typeof indexValue === 'string', 'KeyIndex indexValue must always be a string.'); // We just use empty node, but it'll never be compared, since our comparator only looks at name.\n\n    return new NamedNode(indexValue, __EMPTY_NODE);\n  }\n  /**\r\n   * @returns String representation for inclusion in a query spec\r\n   */\n\n\n  toString() {\n    return '.key';\n  }\n\n}\n\nconst KEY_INDEX = new KeyIndex();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * An iterator over an LLRBNode.\r\n */\n\nclass SortedMapIterator {\n  /**\r\n   * @param node - Node to iterate.\r\n   * @param isReverse_ - Whether or not to iterate in reverse\r\n   */\n  constructor(node, startKey, comparator, isReverse_) {\n    let resultGenerator_ = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n    this.isReverse_ = isReverse_;\n    this.resultGenerator_ = resultGenerator_;\n    this.nodeStack_ = [];\n    let cmp = 1;\n\n    while (!node.isEmpty()) {\n      node = node;\n      cmp = startKey ? comparator(node.key, startKey) : 1; // flip the comparison if we're going in reverse\n\n      if (isReverse_) {\n        cmp *= -1;\n      }\n\n      if (cmp < 0) {\n        // This node is less than our start key. ignore it\n        if (this.isReverse_) {\n          node = node.left;\n        } else {\n          node = node.right;\n        }\n      } else if (cmp === 0) {\n        // This node is exactly equal to our start key. Push it on the stack, but stop iterating;\n        this.nodeStack_.push(node);\n        break;\n      } else {\n        // This node is greater than our start key, add it to the stack and move to the next one\n        this.nodeStack_.push(node);\n\n        if (this.isReverse_) {\n          node = node.right;\n        } else {\n          node = node.left;\n        }\n      }\n    }\n  }\n\n  getNext() {\n    if (this.nodeStack_.length === 0) {\n      return null;\n    }\n\n    let node = this.nodeStack_.pop();\n    let result;\n\n    if (this.resultGenerator_) {\n      result = this.resultGenerator_(node.key, node.value);\n    } else {\n      result = {\n        key: node.key,\n        value: node.value\n      };\n    }\n\n    if (this.isReverse_) {\n      node = node.left;\n\n      while (!node.isEmpty()) {\n        this.nodeStack_.push(node);\n        node = node.right;\n      }\n    } else {\n      node = node.right;\n\n      while (!node.isEmpty()) {\n        this.nodeStack_.push(node);\n        node = node.left;\n      }\n    }\n\n    return result;\n  }\n\n  hasNext() {\n    return this.nodeStack_.length > 0;\n  }\n\n  peek() {\n    if (this.nodeStack_.length === 0) {\n      return null;\n    }\n\n    const node = this.nodeStack_[this.nodeStack_.length - 1];\n\n    if (this.resultGenerator_) {\n      return this.resultGenerator_(node.key, node.value);\n    } else {\n      return {\n        key: node.key,\n        value: node.value\n      };\n    }\n  }\n\n}\n/**\r\n * Represents a node in a Left-leaning Red-Black tree.\r\n */\n\n\nclass LLRBNode {\n  /**\r\n   * @param key - Key associated with this node.\r\n   * @param value - Value associated with this node.\r\n   * @param color - Whether this node is red.\r\n   * @param left - Left child.\r\n   * @param right - Right child.\r\n   */\n  constructor(key, value, color, left, right) {\n    this.key = key;\n    this.value = value;\n    this.color = color != null ? color : LLRBNode.RED;\n    this.left = left != null ? left : SortedMap.EMPTY_NODE;\n    this.right = right != null ? right : SortedMap.EMPTY_NODE;\n  }\n  /**\r\n   * Returns a copy of the current node, optionally replacing pieces of it.\r\n   *\r\n   * @param key - New key for the node, or null.\r\n   * @param value - New value for the node, or null.\r\n   * @param color - New color for the node, or null.\r\n   * @param left - New left child for the node, or null.\r\n   * @param right - New right child for the node, or null.\r\n   * @returns The node copy.\r\n   */\n\n\n  copy(key, value, color, left, right) {\n    return new LLRBNode(key != null ? key : this.key, value != null ? value : this.value, color != null ? color : this.color, left != null ? left : this.left, right != null ? right : this.right);\n  }\n  /**\r\n   * @returns The total number of nodes in the tree.\r\n   */\n\n\n  count() {\n    return this.left.count() + 1 + this.right.count();\n  }\n  /**\r\n   * @returns True if the tree is empty.\r\n   */\n\n\n  isEmpty() {\n    return false;\n  }\n  /**\r\n   * Traverses the tree in key order and calls the specified action function\r\n   * for each node.\r\n   *\r\n   * @param action - Callback function to be called for each\r\n   *   node.  If it returns true, traversal is aborted.\r\n   * @returns The first truthy value returned by action, or the last falsey\r\n   *   value returned by action\r\n   */\n\n\n  inorderTraversal(action) {\n    return this.left.inorderTraversal(action) || !!action(this.key, this.value) || this.right.inorderTraversal(action);\n  }\n  /**\r\n   * Traverses the tree in reverse key order and calls the specified action function\r\n   * for each node.\r\n   *\r\n   * @param action - Callback function to be called for each\r\n   * node.  If it returns true, traversal is aborted.\r\n   * @returns True if traversal was aborted.\r\n   */\n\n\n  reverseTraversal(action) {\n    return this.right.reverseTraversal(action) || action(this.key, this.value) || this.left.reverseTraversal(action);\n  }\n  /**\r\n   * @returns The minimum node in the tree.\r\n   */\n\n\n  min_() {\n    if (this.left.isEmpty()) {\n      return this;\n    } else {\n      return this.left.min_();\n    }\n  }\n  /**\r\n   * @returns The maximum key in the tree.\r\n   */\n\n\n  minKey() {\n    return this.min_().key;\n  }\n  /**\r\n   * @returns The maximum key in the tree.\r\n   */\n\n\n  maxKey() {\n    if (this.right.isEmpty()) {\n      return this.key;\n    } else {\n      return this.right.maxKey();\n    }\n  }\n  /**\r\n   * @param key - Key to insert.\r\n   * @param value - Value to insert.\r\n   * @param comparator - Comparator.\r\n   * @returns New tree, with the key/value added.\r\n   */\n\n\n  insert(key, value, comparator) {\n    let n = this;\n    const cmp = comparator(key, n.key);\n\n    if (cmp < 0) {\n      n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);\n    } else if (cmp === 0) {\n      n = n.copy(null, value, null, null, null);\n    } else {\n      n = n.copy(null, null, null, null, n.right.insert(key, value, comparator));\n    }\n\n    return n.fixUp_();\n  }\n  /**\r\n   * @returns New tree, with the minimum key removed.\r\n   */\n\n\n  removeMin_() {\n    if (this.left.isEmpty()) {\n      return SortedMap.EMPTY_NODE;\n    }\n\n    let n = this;\n\n    if (!n.left.isRed_() && !n.left.left.isRed_()) {\n      n = n.moveRedLeft_();\n    }\n\n    n = n.copy(null, null, null, n.left.removeMin_(), null);\n    return n.fixUp_();\n  }\n  /**\r\n   * @param key - The key of the item to remove.\r\n   * @param comparator - Comparator.\r\n   * @returns New tree, with the specified item removed.\r\n   */\n\n\n  remove(key, comparator) {\n    let n, smallest;\n    n = this;\n\n    if (comparator(key, n.key) < 0) {\n      if (!n.left.isEmpty() && !n.left.isRed_() && !n.left.left.isRed_()) {\n        n = n.moveRedLeft_();\n      }\n\n      n = n.copy(null, null, null, n.left.remove(key, comparator), null);\n    } else {\n      if (n.left.isRed_()) {\n        n = n.rotateRight_();\n      }\n\n      if (!n.right.isEmpty() && !n.right.isRed_() && !n.right.left.isRed_()) {\n        n = n.moveRedRight_();\n      }\n\n      if (comparator(key, n.key) === 0) {\n        if (n.right.isEmpty()) {\n          return SortedMap.EMPTY_NODE;\n        } else {\n          smallest = n.right.min_();\n          n = n.copy(smallest.key, smallest.value, null, null, n.right.removeMin_());\n        }\n      }\n\n      n = n.copy(null, null, null, null, n.right.remove(key, comparator));\n    }\n\n    return n.fixUp_();\n  }\n  /**\r\n   * @returns Whether this is a RED node.\r\n   */\n\n\n  isRed_() {\n    return this.color;\n  }\n  /**\r\n   * @returns New tree after performing any needed rotations.\r\n   */\n\n\n  fixUp_() {\n    let n = this;\n\n    if (n.right.isRed_() && !n.left.isRed_()) {\n      n = n.rotateLeft_();\n    }\n\n    if (n.left.isRed_() && n.left.left.isRed_()) {\n      n = n.rotateRight_();\n    }\n\n    if (n.left.isRed_() && n.right.isRed_()) {\n      n = n.colorFlip_();\n    }\n\n    return n;\n  }\n  /**\r\n   * @returns New tree, after moveRedLeft.\r\n   */\n\n\n  moveRedLeft_() {\n    let n = this.colorFlip_();\n\n    if (n.right.left.isRed_()) {\n      n = n.copy(null, null, null, null, n.right.rotateRight_());\n      n = n.rotateLeft_();\n      n = n.colorFlip_();\n    }\n\n    return n;\n  }\n  /**\r\n   * @returns New tree, after moveRedRight.\r\n   */\n\n\n  moveRedRight_() {\n    let n = this.colorFlip_();\n\n    if (n.left.left.isRed_()) {\n      n = n.rotateRight_();\n      n = n.colorFlip_();\n    }\n\n    return n;\n  }\n  /**\r\n   * @returns New tree, after rotateLeft.\r\n   */\n\n\n  rotateLeft_() {\n    const nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);\n    return this.right.copy(null, null, this.color, nl, null);\n  }\n  /**\r\n   * @returns New tree, after rotateRight.\r\n   */\n\n\n  rotateRight_() {\n    const nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);\n    return this.left.copy(null, null, this.color, null, nr);\n  }\n  /**\r\n   * @returns Newt ree, after colorFlip.\r\n   */\n\n\n  colorFlip_() {\n    const left = this.left.copy(null, null, !this.left.color, null, null);\n    const right = this.right.copy(null, null, !this.right.color, null, null);\n    return this.copy(null, null, !this.color, left, right);\n  }\n  /**\r\n   * For testing.\r\n   *\r\n   * @returns True if all is well.\r\n   */\n\n\n  checkMaxDepth_() {\n    const blackDepth = this.check_();\n    return Math.pow(2.0, blackDepth) <= this.count() + 1;\n  }\n\n  check_() {\n    if (this.isRed_() && this.left.isRed_()) {\n      throw new Error('Red node has red child(' + this.key + ',' + this.value + ')');\n    }\n\n    if (this.right.isRed_()) {\n      throw new Error('Right child of (' + this.key + ',' + this.value + ') is red');\n    }\n\n    const blackDepth = this.left.check_();\n\n    if (blackDepth !== this.right.check_()) {\n      throw new Error('Black depths differ');\n    } else {\n      return blackDepth + (this.isRed_() ? 0 : 1);\n    }\n  }\n\n}\n\nLLRBNode.RED = true;\nLLRBNode.BLACK = false;\n/**\r\n * Represents an empty node (a leaf node in the Red-Black Tree).\r\n */\n\nclass LLRBEmptyNode {\n  /**\r\n   * Returns a copy of the current node.\r\n   *\r\n   * @returns The node copy.\r\n   */\n  copy(key, value, color, left, right) {\n    return this;\n  }\n  /**\r\n   * Returns a copy of the tree, with the specified key/value added.\r\n   *\r\n   * @param key - Key to be added.\r\n   * @param value - Value to be added.\r\n   * @param comparator - Comparator.\r\n   * @returns New tree, with item added.\r\n   */\n\n\n  insert(key, value, comparator) {\n    return new LLRBNode(key, value, null);\n  }\n  /**\r\n   * Returns a copy of the tree, with the specified key removed.\r\n   *\r\n   * @param key - The key to remove.\r\n   * @param comparator - Comparator.\r\n   * @returns New tree, with item removed.\r\n   */\n\n\n  remove(key, comparator) {\n    return this;\n  }\n  /**\r\n   * @returns The total number of nodes in the tree.\r\n   */\n\n\n  count() {\n    return 0;\n  }\n  /**\r\n   * @returns True if the tree is empty.\r\n   */\n\n\n  isEmpty() {\n    return true;\n  }\n  /**\r\n   * Traverses the tree in key order and calls the specified action function\r\n   * for each node.\r\n   *\r\n   * @param action - Callback function to be called for each\r\n   * node.  If it returns true, traversal is aborted.\r\n   * @returns True if traversal was aborted.\r\n   */\n\n\n  inorderTraversal(action) {\n    return false;\n  }\n  /**\r\n   * Traverses the tree in reverse key order and calls the specified action function\r\n   * for each node.\r\n   *\r\n   * @param action - Callback function to be called for each\r\n   * node.  If it returns true, traversal is aborted.\r\n   * @returns True if traversal was aborted.\r\n   */\n\n\n  reverseTraversal(action) {\n    return false;\n  }\n\n  minKey() {\n    return null;\n  }\n\n  maxKey() {\n    return null;\n  }\n\n  check_() {\n    return 0;\n  }\n  /**\r\n   * @returns Whether this node is red.\r\n   */\n\n\n  isRed_() {\n    return false;\n  }\n\n}\n/**\r\n * An immutable sorted map implementation, based on a Left-leaning Red-Black\r\n * tree.\r\n */\n\n\nclass SortedMap {\n  /**\r\n   * @param comparator_ - Key comparator.\r\n   * @param root_ - Optional root node for the map.\r\n   */\n  constructor(comparator_) {\n    let root_ = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : SortedMap.EMPTY_NODE;\n    this.comparator_ = comparator_;\n    this.root_ = root_;\n  }\n  /**\r\n   * Returns a copy of the map, with the specified key/value added or replaced.\r\n   * (TODO: We should perhaps rename this method to 'put')\r\n   *\r\n   * @param key - Key to be added.\r\n   * @param value - Value to be added.\r\n   * @returns New map, with item added.\r\n   */\n\n\n  insert(key, value) {\n    return new SortedMap(this.comparator_, this.root_.insert(key, value, this.comparator_).copy(null, null, LLRBNode.BLACK, null, null));\n  }\n  /**\r\n   * Returns a copy of the map, with the specified key removed.\r\n   *\r\n   * @param key - The key to remove.\r\n   * @returns New map, with item removed.\r\n   */\n\n\n  remove(key) {\n    return new SortedMap(this.comparator_, this.root_.remove(key, this.comparator_).copy(null, null, LLRBNode.BLACK, null, null));\n  }\n  /**\r\n   * Returns the value of the node with the given key, or null.\r\n   *\r\n   * @param key - The key to look up.\r\n   * @returns The value of the node with the given key, or null if the\r\n   * key doesn't exist.\r\n   */\n\n\n  get(key) {\n    let cmp;\n    let node = this.root_;\n\n    while (!node.isEmpty()) {\n      cmp = this.comparator_(key, node.key);\n\n      if (cmp === 0) {\n        return node.value;\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        node = node.right;\n      }\n    }\n\n    return null;\n  }\n  /**\r\n   * Returns the key of the item *before* the specified key, or null if key is the first item.\r\n   * @param key - The key to find the predecessor of\r\n   * @returns The predecessor key.\r\n   */\n\n\n  getPredecessorKey(key) {\n    let cmp,\n        node = this.root_,\n        rightParent = null;\n\n    while (!node.isEmpty()) {\n      cmp = this.comparator_(key, node.key);\n\n      if (cmp === 0) {\n        if (!node.left.isEmpty()) {\n          node = node.left;\n\n          while (!node.right.isEmpty()) {\n            node = node.right;\n          }\n\n          return node.key;\n        } else if (rightParent) {\n          return rightParent.key;\n        } else {\n          return null; // first item.\n        }\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        rightParent = node;\n        node = node.right;\n      }\n    }\n\n    throw new Error('Attempted to find predecessor key for a nonexistent key.  What gives?');\n  }\n  /**\r\n   * @returns True if the map is empty.\r\n   */\n\n\n  isEmpty() {\n    return this.root_.isEmpty();\n  }\n  /**\r\n   * @returns The total number of nodes in the map.\r\n   */\n\n\n  count() {\n    return this.root_.count();\n  }\n  /**\r\n   * @returns The minimum key in the map.\r\n   */\n\n\n  minKey() {\n    return this.root_.minKey();\n  }\n  /**\r\n   * @returns The maximum key in the map.\r\n   */\n\n\n  maxKey() {\n    return this.root_.maxKey();\n  }\n  /**\r\n   * Traverses the map in key order and calls the specified action function\r\n   * for each key/value pair.\r\n   *\r\n   * @param action - Callback function to be called\r\n   * for each key/value pair.  If action returns true, traversal is aborted.\r\n   * @returns The first truthy value returned by action, or the last falsey\r\n   *   value returned by action\r\n   */\n\n\n  inorderTraversal(action) {\n    return this.root_.inorderTraversal(action);\n  }\n  /**\r\n   * Traverses the map in reverse key order and calls the specified action function\r\n   * for each key/value pair.\r\n   *\r\n   * @param action - Callback function to be called\r\n   * for each key/value pair.  If action returns true, traversal is aborted.\r\n   * @returns True if the traversal was aborted.\r\n   */\n\n\n  reverseTraversal(action) {\n    return this.root_.reverseTraversal(action);\n  }\n  /**\r\n   * Returns an iterator over the SortedMap.\r\n   * @returns The iterator.\r\n   */\n\n\n  getIterator(resultGenerator) {\n    return new SortedMapIterator(this.root_, null, this.comparator_, false, resultGenerator);\n  }\n\n  getIteratorFrom(key, resultGenerator) {\n    return new SortedMapIterator(this.root_, key, this.comparator_, false, resultGenerator);\n  }\n\n  getReverseIteratorFrom(key, resultGenerator) {\n    return new SortedMapIterator(this.root_, key, this.comparator_, true, resultGenerator);\n  }\n\n  getReverseIterator(resultGenerator) {\n    return new SortedMapIterator(this.root_, null, this.comparator_, true, resultGenerator);\n  }\n\n}\n/**\r\n * Always use the same empty node, to reduce memory.\r\n */\n\n\nSortedMap.EMPTY_NODE = new LLRBEmptyNode();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nfunction NAME_ONLY_COMPARATOR(left, right) {\n  return nameCompare(left.name, right.name);\n}\n\nfunction NAME_COMPARATOR(left, right) {\n  return nameCompare(left, right);\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nlet MAX_NODE$2;\n\nfunction setMaxNode$1(val) {\n  MAX_NODE$2 = val;\n}\n\nconst priorityHashText = function (priority) {\n  if (typeof priority === 'number') {\n    return 'number:' + doubleToIEEE754String(priority);\n  } else {\n    return 'string:' + priority;\n  }\n};\n/**\r\n * Validates that a priority snapshot Node is valid.\r\n */\n\n\nconst validatePriorityNode = function (priorityNode) {\n  if (priorityNode.isLeafNode()) {\n    const val = priorityNode.val();\n    assert(typeof val === 'string' || typeof val === 'number' || typeof val === 'object' && contains(val, '.sv'), 'Priority must be a string or number.');\n  } else {\n    assert(priorityNode === MAX_NODE$2 || priorityNode.isEmpty(), 'priority of unexpected type.');\n  } // Don't call getPriority() on MAX_NODE to avoid hitting assertion.\n\n\n  assert(priorityNode === MAX_NODE$2 || priorityNode.getPriority().isEmpty(), \"Priority nodes can't have a priority of their own.\");\n};\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nlet __childrenNodeConstructor;\n/**\r\n * LeafNode is a class for storing leaf nodes in a DataSnapshot.  It\r\n * implements Node and stores the value of the node (a string,\r\n * number, or boolean) accessible via getValue().\r\n */\n\n\nclass LeafNode {\n  /**\r\n   * @param value_ - The value to store in this leaf node. The object type is\r\n   * possible in the event of a deferred value\r\n   * @param priorityNode_ - The priority of this node.\r\n   */\n  constructor(value_) {\n    let priorityNode_ = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    this.value_ = value_;\n    this.priorityNode_ = priorityNode_;\n    this.lazyHash_ = null;\n    assert(this.value_ !== undefined && this.value_ !== null, \"LeafNode shouldn't be created with null/undefined value.\");\n    validatePriorityNode(this.priorityNode_);\n  }\n\n  static set __childrenNodeConstructor(val) {\n    __childrenNodeConstructor = val;\n  }\n\n  static get __childrenNodeConstructor() {\n    return __childrenNodeConstructor;\n  }\n  /** @inheritDoc */\n\n\n  isLeafNode() {\n    return true;\n  }\n  /** @inheritDoc */\n\n\n  getPriority() {\n    return this.priorityNode_;\n  }\n  /** @inheritDoc */\n\n\n  updatePriority(newPriorityNode) {\n    return new LeafNode(this.value_, newPriorityNode);\n  }\n  /** @inheritDoc */\n\n\n  getImmediateChild(childName) {\n    // Hack to treat priority as a regular child\n    if (childName === '.priority') {\n      return this.priorityNode_;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    }\n  }\n  /** @inheritDoc */\n\n\n  getChild(path) {\n    if (pathIsEmpty(path)) {\n      return this;\n    } else if (pathGetFront(path) === '.priority') {\n      return this.priorityNode_;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    }\n  }\n\n  hasChild() {\n    return false;\n  }\n  /** @inheritDoc */\n\n\n  getPredecessorChildName(childName, childNode) {\n    return null;\n  }\n  /** @inheritDoc */\n\n\n  updateImmediateChild(childName, newChildNode) {\n    if (childName === '.priority') {\n      return this.updatePriority(newChildNode);\n    } else if (newChildNode.isEmpty() && childName !== '.priority') {\n      return this;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(childName, newChildNode).updatePriority(this.priorityNode_);\n    }\n  }\n  /** @inheritDoc */\n\n\n  updateChild(path, newChildNode) {\n    const front = pathGetFront(path);\n\n    if (front === null) {\n      return newChildNode;\n    } else if (newChildNode.isEmpty() && front !== '.priority') {\n      return this;\n    } else {\n      assert(front !== '.priority' || pathGetLength(path) === 1, '.priority must be the last token in a path');\n      return this.updateImmediateChild(front, LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateChild(pathPopFront(path), newChildNode));\n    }\n  }\n  /** @inheritDoc */\n\n\n  isEmpty() {\n    return false;\n  }\n  /** @inheritDoc */\n\n\n  numChildren() {\n    return 0;\n  }\n  /** @inheritDoc */\n\n\n  forEachChild(index, action) {\n    return false;\n  }\n\n  val(exportFormat) {\n    if (exportFormat && !this.getPriority().isEmpty()) {\n      return {\n        '.value': this.getValue(),\n        '.priority': this.getPriority().val()\n      };\n    } else {\n      return this.getValue();\n    }\n  }\n  /** @inheritDoc */\n\n\n  hash() {\n    if (this.lazyHash_ === null) {\n      let toHash = '';\n\n      if (!this.priorityNode_.isEmpty()) {\n        toHash += 'priority:' + priorityHashText(this.priorityNode_.val()) + ':';\n      }\n\n      const type = typeof this.value_;\n      toHash += type + ':';\n\n      if (type === 'number') {\n        toHash += doubleToIEEE754String(this.value_);\n      } else {\n        toHash += this.value_;\n      }\n\n      this.lazyHash_ = sha1(toHash);\n    }\n\n    return this.lazyHash_;\n  }\n  /**\r\n   * Returns the value of the leaf node.\r\n   * @returns The value of the node.\r\n   */\n\n\n  getValue() {\n    return this.value_;\n  }\n\n  compareTo(other) {\n    if (other === LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\n      return 1;\n    } else if (other instanceof LeafNode.__childrenNodeConstructor) {\n      return -1;\n    } else {\n      assert(other.isLeafNode(), 'Unknown node type');\n      return this.compareToLeafNode_(other);\n    }\n  }\n  /**\r\n   * Comparison specifically for two leaf nodes\r\n   */\n\n\n  compareToLeafNode_(otherLeaf) {\n    const otherLeafType = typeof otherLeaf.value_;\n    const thisLeafType = typeof this.value_;\n    const otherIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(otherLeafType);\n    const thisIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(thisLeafType);\n    assert(otherIndex >= 0, 'Unknown leaf type: ' + otherLeafType);\n    assert(thisIndex >= 0, 'Unknown leaf type: ' + thisLeafType);\n\n    if (otherIndex === thisIndex) {\n      // Same type, compare values\n      if (thisLeafType === 'object') {\n        // Deferred value nodes are all equal, but we should also never get to this point...\n        return 0;\n      } else {\n        // Note that this works because true > false, all others are number or string comparisons\n        if (this.value_ < otherLeaf.value_) {\n          return -1;\n        } else if (this.value_ === otherLeaf.value_) {\n          return 0;\n        } else {\n          return 1;\n        }\n      }\n    } else {\n      return thisIndex - otherIndex;\n    }\n  }\n\n  withIndex() {\n    return this;\n  }\n\n  isIndexed() {\n    return true;\n  }\n\n  equals(other) {\n    if (other === this) {\n      return true;\n    } else if (other.isLeafNode()) {\n      const otherLeaf = other;\n      return this.value_ === otherLeaf.value_ && this.priorityNode_.equals(otherLeaf.priorityNode_);\n    } else {\n      return false;\n    }\n  }\n\n}\n/**\r\n * The sort order for comparing leaf nodes of different types. If two leaf nodes have\r\n * the same type, the comparison falls back to their value\r\n */\n\n\nLeafNode.VALUE_TYPE_ORDER = ['object', 'boolean', 'number', 'string'];\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nlet nodeFromJSON$1;\nlet MAX_NODE$1;\n\nfunction setNodeFromJSON(val) {\n  nodeFromJSON$1 = val;\n}\n\nfunction setMaxNode(val) {\n  MAX_NODE$1 = val;\n}\n\nclass PriorityIndex extends Index {\n  compare(a, b) {\n    const aPriority = a.node.getPriority();\n    const bPriority = b.node.getPriority();\n    const indexCmp = aPriority.compareTo(bPriority);\n\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n\n  isDefinedOn(node) {\n    return !node.getPriority().isEmpty();\n  }\n\n  indexedValueChanged(oldNode, newNode) {\n    return !oldNode.getPriority().equals(newNode.getPriority());\n  }\n\n  minPost() {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return NamedNode.MIN;\n  }\n\n  maxPost() {\n    return new NamedNode(MAX_NAME, new LeafNode('[PRIORITY-POST]', MAX_NODE$1));\n  }\n\n  makePost(indexValue, name) {\n    const priorityNode = nodeFromJSON$1(indexValue);\n    return new NamedNode(name, new LeafNode('[PRIORITY-POST]', priorityNode));\n  }\n  /**\r\n   * @returns String representation for inclusion in a query spec\r\n   */\n\n\n  toString() {\n    return '.priority';\n  }\n\n}\n\nconst PRIORITY_INDEX = new PriorityIndex();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nconst LOG_2 = Math.log(2);\n\nclass Base12Num {\n  constructor(length) {\n    const logBase2 = num => // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    parseInt(Math.log(num) / LOG_2, 10);\n\n    const bitMask = bits => parseInt(Array(bits + 1).join('1'), 2);\n\n    this.count = logBase2(length + 1);\n    this.current_ = this.count - 1;\n    const mask = bitMask(this.count);\n    this.bits_ = length + 1 & mask;\n  }\n\n  nextBitIsOne() {\n    //noinspection JSBitwiseOperatorUsage\n    const result = !(this.bits_ & 0x1 << this.current_);\n    this.current_--;\n    return result;\n  }\n\n}\n/**\r\n * Takes a list of child nodes and constructs a SortedSet using the given comparison\r\n * function\r\n *\r\n * Uses the algorithm described in the paper linked here:\r\n * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.1458\r\n *\r\n * @param childList - Unsorted list of children\r\n * @param cmp - The comparison method to be used\r\n * @param keyFn - An optional function to extract K from a node wrapper, if K's\r\n * type is not NamedNode\r\n * @param mapSortFn - An optional override for comparator used by the generated sorted map\r\n */\n\n\nconst buildChildSet = function (childList, cmp, keyFn, mapSortFn) {\n  childList.sort(cmp);\n\n  const buildBalancedTree = function (low, high) {\n    const length = high - low;\n    let namedNode;\n    let key;\n\n    if (length === 0) {\n      return null;\n    } else if (length === 1) {\n      namedNode = childList[low];\n      key = keyFn ? keyFn(namedNode) : namedNode;\n      return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, null, null);\n    } else {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const middle = parseInt(length / 2, 10) + low;\n      const left = buildBalancedTree(low, middle);\n      const right = buildBalancedTree(middle + 1, high);\n      namedNode = childList[middle];\n      key = keyFn ? keyFn(namedNode) : namedNode;\n      return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, left, right);\n    }\n  };\n\n  const buildFrom12Array = function (base12) {\n    let node = null;\n    let root = null;\n    let index = childList.length;\n\n    const buildPennant = function (chunkSize, color) {\n      const low = index - chunkSize;\n      const high = index;\n      index -= chunkSize;\n      const childTree = buildBalancedTree(low + 1, high);\n      const namedNode = childList[low];\n      const key = keyFn ? keyFn(namedNode) : namedNode;\n      attachPennant(new LLRBNode(key, namedNode.node, color, null, childTree));\n    };\n\n    const attachPennant = function (pennant) {\n      if (node) {\n        node.left = pennant;\n        node = pennant;\n      } else {\n        root = pennant;\n        node = pennant;\n      }\n    };\n\n    for (let i = 0; i < base12.count; ++i) {\n      const isOne = base12.nextBitIsOne(); // The number of nodes taken in each slice is 2^(arr.length - (i + 1))\n\n      const chunkSize = Math.pow(2, base12.count - (i + 1));\n\n      if (isOne) {\n        buildPennant(chunkSize, LLRBNode.BLACK);\n      } else {\n        // current == 2\n        buildPennant(chunkSize, LLRBNode.BLACK);\n        buildPennant(chunkSize, LLRBNode.RED);\n      }\n    }\n\n    return root;\n  };\n\n  const base12 = new Base12Num(childList.length);\n  const root = buildFrom12Array(base12); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n  return new SortedMap(mapSortFn || cmp, root);\n};\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nlet _defaultIndexMap;\n\nconst fallbackObject = {};\n\nclass IndexMap {\n  constructor(indexes_, indexSet_) {\n    this.indexes_ = indexes_;\n    this.indexSet_ = indexSet_;\n  }\n  /**\r\n   * The default IndexMap for nodes without a priority\r\n   */\n\n\n  static get Default() {\n    assert(fallbackObject && PRIORITY_INDEX, 'ChildrenNode.ts has not been loaded');\n    _defaultIndexMap = _defaultIndexMap || new IndexMap({\n      '.priority': fallbackObject\n    }, {\n      '.priority': PRIORITY_INDEX\n    });\n    return _defaultIndexMap;\n  }\n\n  get(indexKey) {\n    const sortedMap = safeGet(this.indexes_, indexKey);\n\n    if (!sortedMap) {\n      throw new Error('No index defined for ' + indexKey);\n    }\n\n    if (sortedMap instanceof SortedMap) {\n      return sortedMap;\n    } else {\n      // The index exists, but it falls back to just name comparison. Return null so that the calling code uses the\n      // regular child map\n      return null;\n    }\n  }\n\n  hasIndex(indexDefinition) {\n    return contains(this.indexSet_, indexDefinition.toString());\n  }\n\n  addIndex(indexDefinition, existingChildren) {\n    assert(indexDefinition !== KEY_INDEX, \"KeyIndex always exists and isn't meant to be added to the IndexMap.\");\n    const childList = [];\n    let sawIndexedValue = false;\n    const iter = existingChildren.getIterator(NamedNode.Wrap);\n    let next = iter.getNext();\n\n    while (next) {\n      sawIndexedValue = sawIndexedValue || indexDefinition.isDefinedOn(next.node);\n      childList.push(next);\n      next = iter.getNext();\n    }\n\n    let newIndex;\n\n    if (sawIndexedValue) {\n      newIndex = buildChildSet(childList, indexDefinition.getCompare());\n    } else {\n      newIndex = fallbackObject;\n    }\n\n    const indexName = indexDefinition.toString();\n    const newIndexSet = Object.assign({}, this.indexSet_);\n    newIndexSet[indexName] = indexDefinition;\n    const newIndexes = Object.assign({}, this.indexes_);\n    newIndexes[indexName] = newIndex;\n    return new IndexMap(newIndexes, newIndexSet);\n  }\n  /**\r\n   * Ensure that this node is properly tracked in any indexes that we're maintaining\r\n   */\n\n\n  addToIndexes(namedNode, existingChildren) {\n    const newIndexes = map(this.indexes_, (indexedChildren, indexName) => {\n      const index = safeGet(this.indexSet_, indexName);\n      assert(index, 'Missing index implementation for ' + indexName);\n\n      if (indexedChildren === fallbackObject) {\n        // Check to see if we need to index everything\n        if (index.isDefinedOn(namedNode.node)) {\n          // We need to build this index\n          const childList = [];\n          const iter = existingChildren.getIterator(NamedNode.Wrap);\n          let next = iter.getNext();\n\n          while (next) {\n            if (next.name !== namedNode.name) {\n              childList.push(next);\n            }\n\n            next = iter.getNext();\n          }\n\n          childList.push(namedNode);\n          return buildChildSet(childList, index.getCompare());\n        } else {\n          // No change, this remains a fallback\n          return fallbackObject;\n        }\n      } else {\n        const existingSnap = existingChildren.get(namedNode.name);\n        let newChildren = indexedChildren;\n\n        if (existingSnap) {\n          newChildren = newChildren.remove(new NamedNode(namedNode.name, existingSnap));\n        }\n\n        return newChildren.insert(namedNode, namedNode.node);\n      }\n    });\n    return new IndexMap(newIndexes, this.indexSet_);\n  }\n  /**\r\n   * Create a new IndexMap instance with the given value removed\r\n   */\n\n\n  removeFromIndexes(namedNode, existingChildren) {\n    const newIndexes = map(this.indexes_, indexedChildren => {\n      if (indexedChildren === fallbackObject) {\n        // This is the fallback. Just return it, nothing to do in this case\n        return indexedChildren;\n      } else {\n        const existingSnap = existingChildren.get(namedNode.name);\n\n        if (existingSnap) {\n          return indexedChildren.remove(new NamedNode(namedNode.name, existingSnap));\n        } else {\n          // No record of this child\n          return indexedChildren;\n        }\n      }\n    });\n    return new IndexMap(newIndexes, this.indexSet_);\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// TODO: For memory savings, don't store priorityNode_ if it's empty.\n\n\nlet EMPTY_NODE;\n/**\r\n * ChildrenNode is a class for storing internal nodes in a DataSnapshot\r\n * (i.e. nodes with children).  It implements Node and stores the\r\n * list of children in the children property, sorted by child name.\r\n */\n\nclass ChildrenNode {\n  /**\r\n   * @param children_ - List of children of this node..\r\n   * @param priorityNode_ - The priority of this node (as a snapshot node).\r\n   */\n  constructor(children_, priorityNode_, indexMap_) {\n    this.children_ = children_;\n    this.priorityNode_ = priorityNode_;\n    this.indexMap_ = indexMap_;\n    this.lazyHash_ = null;\n    /**\r\n     * Note: The only reason we allow null priority is for EMPTY_NODE, since we can't use\r\n     * EMPTY_NODE as the priority of EMPTY_NODE.  We might want to consider making EMPTY_NODE its own\r\n     * class instead of an empty ChildrenNode.\r\n     */\n\n    if (this.priorityNode_) {\n      validatePriorityNode(this.priorityNode_);\n    }\n\n    if (this.children_.isEmpty()) {\n      assert(!this.priorityNode_ || this.priorityNode_.isEmpty(), 'An empty node cannot have a priority');\n    }\n  }\n\n  static get EMPTY_NODE() {\n    return EMPTY_NODE || (EMPTY_NODE = new ChildrenNode(new SortedMap(NAME_COMPARATOR), null, IndexMap.Default));\n  }\n  /** @inheritDoc */\n\n\n  isLeafNode() {\n    return false;\n  }\n  /** @inheritDoc */\n\n\n  getPriority() {\n    return this.priorityNode_ || EMPTY_NODE;\n  }\n  /** @inheritDoc */\n\n\n  updatePriority(newPriorityNode) {\n    if (this.children_.isEmpty()) {\n      // Don't allow priorities on empty nodes\n      return this;\n    } else {\n      return new ChildrenNode(this.children_, newPriorityNode, this.indexMap_);\n    }\n  }\n  /** @inheritDoc */\n\n\n  getImmediateChild(childName) {\n    // Hack to treat priority as a regular child\n    if (childName === '.priority') {\n      return this.getPriority();\n    } else {\n      const child = this.children_.get(childName);\n      return child === null ? EMPTY_NODE : child;\n    }\n  }\n  /** @inheritDoc */\n\n\n  getChild(path) {\n    const front = pathGetFront(path);\n\n    if (front === null) {\n      return this;\n    }\n\n    return this.getImmediateChild(front).getChild(pathPopFront(path));\n  }\n  /** @inheritDoc */\n\n\n  hasChild(childName) {\n    return this.children_.get(childName) !== null;\n  }\n  /** @inheritDoc */\n\n\n  updateImmediateChild(childName, newChildNode) {\n    assert(newChildNode, 'We should always be passing snapshot nodes');\n\n    if (childName === '.priority') {\n      return this.updatePriority(newChildNode);\n    } else {\n      const namedNode = new NamedNode(childName, newChildNode);\n      let newChildren, newIndexMap;\n\n      if (newChildNode.isEmpty()) {\n        newChildren = this.children_.remove(childName);\n        newIndexMap = this.indexMap_.removeFromIndexes(namedNode, this.children_);\n      } else {\n        newChildren = this.children_.insert(childName, newChildNode);\n        newIndexMap = this.indexMap_.addToIndexes(namedNode, this.children_);\n      }\n\n      const newPriority = newChildren.isEmpty() ? EMPTY_NODE : this.priorityNode_;\n      return new ChildrenNode(newChildren, newPriority, newIndexMap);\n    }\n  }\n  /** @inheritDoc */\n\n\n  updateChild(path, newChildNode) {\n    const front = pathGetFront(path);\n\n    if (front === null) {\n      return newChildNode;\n    } else {\n      assert(pathGetFront(path) !== '.priority' || pathGetLength(path) === 1, '.priority must be the last token in a path');\n      const newImmediateChild = this.getImmediateChild(front).updateChild(pathPopFront(path), newChildNode);\n      return this.updateImmediateChild(front, newImmediateChild);\n    }\n  }\n  /** @inheritDoc */\n\n\n  isEmpty() {\n    return this.children_.isEmpty();\n  }\n  /** @inheritDoc */\n\n\n  numChildren() {\n    return this.children_.count();\n  }\n  /** @inheritDoc */\n\n\n  val(exportFormat) {\n    if (this.isEmpty()) {\n      return null;\n    }\n\n    const obj = {};\n    let numKeys = 0,\n        maxKey = 0,\n        allIntegerKeys = true;\n    this.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n      obj[key] = childNode.val(exportFormat);\n      numKeys++;\n\n      if (allIntegerKeys && ChildrenNode.INTEGER_REGEXP_.test(key)) {\n        maxKey = Math.max(maxKey, Number(key));\n      } else {\n        allIntegerKeys = false;\n      }\n    });\n\n    if (!exportFormat && allIntegerKeys && maxKey < 2 * numKeys) {\n      // convert to array.\n      const array = []; // eslint-disable-next-line guard-for-in\n\n      for (const key in obj) {\n        array[key] = obj[key];\n      }\n\n      return array;\n    } else {\n      if (exportFormat && !this.getPriority().isEmpty()) {\n        obj['.priority'] = this.getPriority().val();\n      }\n\n      return obj;\n    }\n  }\n  /** @inheritDoc */\n\n\n  hash() {\n    if (this.lazyHash_ === null) {\n      let toHash = '';\n\n      if (!this.getPriority().isEmpty()) {\n        toHash += 'priority:' + priorityHashText(this.getPriority().val()) + ':';\n      }\n\n      this.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n        const childHash = childNode.hash();\n\n        if (childHash !== '') {\n          toHash += ':' + key + ':' + childHash;\n        }\n      });\n      this.lazyHash_ = toHash === '' ? '' : sha1(toHash);\n    }\n\n    return this.lazyHash_;\n  }\n  /** @inheritDoc */\n\n\n  getPredecessorChildName(childName, childNode, index) {\n    const idx = this.resolveIndex_(index);\n\n    if (idx) {\n      const predecessor = idx.getPredecessorKey(new NamedNode(childName, childNode));\n      return predecessor ? predecessor.name : null;\n    } else {\n      return this.children_.getPredecessorKey(childName);\n    }\n  }\n\n  getFirstChildName(indexDefinition) {\n    const idx = this.resolveIndex_(indexDefinition);\n\n    if (idx) {\n      const minKey = idx.minKey();\n      return minKey && minKey.name;\n    } else {\n      return this.children_.minKey();\n    }\n  }\n\n  getFirstChild(indexDefinition) {\n    const minKey = this.getFirstChildName(indexDefinition);\n\n    if (minKey) {\n      return new NamedNode(minKey, this.children_.get(minKey));\n    } else {\n      return null;\n    }\n  }\n  /**\r\n   * Given an index, return the key name of the largest value we have, according to that index\r\n   */\n\n\n  getLastChildName(indexDefinition) {\n    const idx = this.resolveIndex_(indexDefinition);\n\n    if (idx) {\n      const maxKey = idx.maxKey();\n      return maxKey && maxKey.name;\n    } else {\n      return this.children_.maxKey();\n    }\n  }\n\n  getLastChild(indexDefinition) {\n    const maxKey = this.getLastChildName(indexDefinition);\n\n    if (maxKey) {\n      return new NamedNode(maxKey, this.children_.get(maxKey));\n    } else {\n      return null;\n    }\n  }\n\n  forEachChild(index, action) {\n    const idx = this.resolveIndex_(index);\n\n    if (idx) {\n      return idx.inorderTraversal(wrappedNode => {\n        return action(wrappedNode.name, wrappedNode.node);\n      });\n    } else {\n      return this.children_.inorderTraversal(action);\n    }\n  }\n\n  getIterator(indexDefinition) {\n    return this.getIteratorFrom(indexDefinition.minPost(), indexDefinition);\n  }\n\n  getIteratorFrom(startPost, indexDefinition) {\n    const idx = this.resolveIndex_(indexDefinition);\n\n    if (idx) {\n      return idx.getIteratorFrom(startPost, key => key);\n    } else {\n      const iterator = this.children_.getIteratorFrom(startPost.name, NamedNode.Wrap);\n      let next = iterator.peek();\n\n      while (next != null && indexDefinition.compare(next, startPost) < 0) {\n        iterator.getNext();\n        next = iterator.peek();\n      }\n\n      return iterator;\n    }\n  }\n\n  getReverseIterator(indexDefinition) {\n    return this.getReverseIteratorFrom(indexDefinition.maxPost(), indexDefinition);\n  }\n\n  getReverseIteratorFrom(endPost, indexDefinition) {\n    const idx = this.resolveIndex_(indexDefinition);\n\n    if (idx) {\n      return idx.getReverseIteratorFrom(endPost, key => {\n        return key;\n      });\n    } else {\n      const iterator = this.children_.getReverseIteratorFrom(endPost.name, NamedNode.Wrap);\n      let next = iterator.peek();\n\n      while (next != null && indexDefinition.compare(next, endPost) > 0) {\n        iterator.getNext();\n        next = iterator.peek();\n      }\n\n      return iterator;\n    }\n  }\n\n  compareTo(other) {\n    if (this.isEmpty()) {\n      if (other.isEmpty()) {\n        return 0;\n      } else {\n        return -1;\n      }\n    } else if (other.isLeafNode() || other.isEmpty()) {\n      return 1;\n    } else if (other === MAX_NODE) {\n      return -1;\n    } else {\n      // Must be another node with children.\n      return 0;\n    }\n  }\n\n  withIndex(indexDefinition) {\n    if (indexDefinition === KEY_INDEX || this.indexMap_.hasIndex(indexDefinition)) {\n      return this;\n    } else {\n      const newIndexMap = this.indexMap_.addIndex(indexDefinition, this.children_);\n      return new ChildrenNode(this.children_, this.priorityNode_, newIndexMap);\n    }\n  }\n\n  isIndexed(index) {\n    return index === KEY_INDEX || this.indexMap_.hasIndex(index);\n  }\n\n  equals(other) {\n    if (other === this) {\n      return true;\n    } else if (other.isLeafNode()) {\n      return false;\n    } else {\n      const otherChildrenNode = other;\n\n      if (!this.getPriority().equals(otherChildrenNode.getPriority())) {\n        return false;\n      } else if (this.children_.count() === otherChildrenNode.children_.count()) {\n        const thisIter = this.getIterator(PRIORITY_INDEX);\n        const otherIter = otherChildrenNode.getIterator(PRIORITY_INDEX);\n        let thisCurrent = thisIter.getNext();\n        let otherCurrent = otherIter.getNext();\n\n        while (thisCurrent && otherCurrent) {\n          if (thisCurrent.name !== otherCurrent.name || !thisCurrent.node.equals(otherCurrent.node)) {\n            return false;\n          }\n\n          thisCurrent = thisIter.getNext();\n          otherCurrent = otherIter.getNext();\n        }\n\n        return thisCurrent === null && otherCurrent === null;\n      } else {\n        return false;\n      }\n    }\n  }\n  /**\r\n   * Returns a SortedMap ordered by index, or null if the default (by-key) ordering can be used\r\n   * instead.\r\n   *\r\n   */\n\n\n  resolveIndex_(indexDefinition) {\n    if (indexDefinition === KEY_INDEX) {\n      return null;\n    } else {\n      return this.indexMap_.get(indexDefinition.toString());\n    }\n  }\n\n}\n\nChildrenNode.INTEGER_REGEXP_ = /^(0|[1-9]\\d*)$/;\n\nclass MaxNode extends ChildrenNode {\n  constructor() {\n    super(new SortedMap(NAME_COMPARATOR), ChildrenNode.EMPTY_NODE, IndexMap.Default);\n  }\n\n  compareTo(other) {\n    if (other === this) {\n      return 0;\n    } else {\n      return 1;\n    }\n  }\n\n  equals(other) {\n    // Not that we every compare it, but MAX_NODE is only ever equal to itself\n    return other === this;\n  }\n\n  getPriority() {\n    return this;\n  }\n\n  getImmediateChild(childName) {\n    return ChildrenNode.EMPTY_NODE;\n  }\n\n  isEmpty() {\n    return false;\n  }\n\n}\n/**\r\n * Marker that will sort higher than any other snapshot.\r\n */\n\n\nconst MAX_NODE = new MaxNode();\nObject.defineProperties(NamedNode, {\n  MIN: {\n    value: new NamedNode(MIN_NAME, ChildrenNode.EMPTY_NODE)\n  },\n  MAX: {\n    value: new NamedNode(MAX_NAME, MAX_NODE)\n  }\n});\n/**\r\n * Reference Extensions\r\n */\n\nKeyIndex.__EMPTY_NODE = ChildrenNode.EMPTY_NODE;\nLeafNode.__childrenNodeConstructor = ChildrenNode;\nsetMaxNode$1(MAX_NODE);\nsetMaxNode(MAX_NODE);\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nconst USE_HINZE = true;\n/**\r\n * Constructs a snapshot node representing the passed JSON and returns it.\r\n * @param json - JSON to create a node for.\r\n * @param priority - Optional priority to use.  This will be ignored if the\r\n * passed JSON contains a .priority property.\r\n */\n\nfunction nodeFromJSON(json) {\n  let priority = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n  if (json === null) {\n    return ChildrenNode.EMPTY_NODE;\n  }\n\n  if (typeof json === 'object' && '.priority' in json) {\n    priority = json['.priority'];\n  }\n\n  assert(priority === null || typeof priority === 'string' || typeof priority === 'number' || typeof priority === 'object' && '.sv' in priority, 'Invalid priority type found: ' + typeof priority);\n\n  if (typeof json === 'object' && '.value' in json && json['.value'] !== null) {\n    json = json['.value'];\n  } // Valid leaf nodes include non-objects or server-value wrapper objects\n\n\n  if (typeof json !== 'object' || '.sv' in json) {\n    const jsonLeaf = json;\n    return new LeafNode(jsonLeaf, nodeFromJSON(priority));\n  }\n\n  if (!(json instanceof Array) && USE_HINZE) {\n    const children = [];\n    let childrenHavePriority = false;\n    const hinzeJsonObj = json;\n    each(hinzeJsonObj, (key, child) => {\n      if (key.substring(0, 1) !== '.') {\n        // Ignore metadata nodes\n        const childNode = nodeFromJSON(child);\n\n        if (!childNode.isEmpty()) {\n          childrenHavePriority = childrenHavePriority || !childNode.getPriority().isEmpty();\n          children.push(new NamedNode(key, childNode));\n        }\n      }\n    });\n\n    if (children.length === 0) {\n      return ChildrenNode.EMPTY_NODE;\n    }\n\n    const childSet = buildChildSet(children, NAME_ONLY_COMPARATOR, namedNode => namedNode.name, NAME_COMPARATOR);\n\n    if (childrenHavePriority) {\n      const sortedChildSet = buildChildSet(children, PRIORITY_INDEX.getCompare());\n      return new ChildrenNode(childSet, nodeFromJSON(priority), new IndexMap({\n        '.priority': sortedChildSet\n      }, {\n        '.priority': PRIORITY_INDEX\n      }));\n    } else {\n      return new ChildrenNode(childSet, nodeFromJSON(priority), IndexMap.Default);\n    }\n  } else {\n    let node = ChildrenNode.EMPTY_NODE;\n    each(json, (key, childData) => {\n      if (contains(json, key)) {\n        if (key.substring(0, 1) !== '.') {\n          // ignore metadata nodes.\n          const childNode = nodeFromJSON(childData);\n\n          if (childNode.isLeafNode() || !childNode.isEmpty()) {\n            node = node.updateImmediateChild(key, childNode);\n          }\n        }\n      }\n    });\n    return node.updatePriority(nodeFromJSON(priority));\n  }\n}\n\nsetNodeFromJSON(nodeFromJSON);\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nclass PathIndex extends Index {\n  constructor(indexPath_) {\n    super();\n    this.indexPath_ = indexPath_;\n    assert(!pathIsEmpty(indexPath_) && pathGetFront(indexPath_) !== '.priority', \"Can't create PathIndex with empty path or .priority key\");\n  }\n\n  extractChild(snap) {\n    return snap.getChild(this.indexPath_);\n  }\n\n  isDefinedOn(node) {\n    return !node.getChild(this.indexPath_).isEmpty();\n  }\n\n  compare(a, b) {\n    const aChild = this.extractChild(a.node);\n    const bChild = this.extractChild(b.node);\n    const indexCmp = aChild.compareTo(bChild);\n\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n\n  makePost(indexValue, name) {\n    const valueNode = nodeFromJSON(indexValue);\n    const node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, valueNode);\n    return new NamedNode(name, node);\n  }\n\n  maxPost() {\n    const node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, MAX_NODE);\n    return new NamedNode(MAX_NAME, node);\n  }\n\n  toString() {\n    return pathSlice(this.indexPath_, 0).join('/');\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nclass ValueIndex extends Index {\n  compare(a, b) {\n    const indexCmp = a.node.compareTo(b.node);\n\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n\n  isDefinedOn(node) {\n    return true;\n  }\n\n  indexedValueChanged(oldNode, newNode) {\n    return !oldNode.equals(newNode);\n  }\n\n  minPost() {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return NamedNode.MIN;\n  }\n\n  maxPost() {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return NamedNode.MAX;\n  }\n\n  makePost(indexValue, name) {\n    const valueNode = nodeFromJSON(indexValue);\n    return new NamedNode(name, valueNode);\n  }\n  /**\r\n   * @returns String representation for inclusion in a query spec\r\n   */\n\n\n  toString() {\n    return '.value';\n  }\n\n}\n\nconst VALUE_INDEX = new ValueIndex();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// Modeled after base64 web-safe chars, but ordered by ASCII.\n\nconst PUSH_CHARS = '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';\nconst MIN_PUSH_CHAR = '-';\nconst MAX_PUSH_CHAR = 'z';\nconst MAX_KEY_LEN = 786;\n/**\r\n * Fancy ID generator that creates 20-character string identifiers with the\r\n * following properties:\r\n *\r\n * 1. They're based on timestamp so that they sort *after* any existing ids.\r\n * 2. They contain 72-bits of random data after the timestamp so that IDs won't\r\n *    collide with other clients' IDs.\r\n * 3. They sort *lexicographically* (so the timestamp is converted to characters\r\n *    that will sort properly).\r\n * 4. They're monotonically increasing. Even if you generate more than one in\r\n *    the same timestamp, the latter ones will sort after the former ones. We do\r\n *    this by using the previous random bits but \"incrementing\" them by 1 (only\r\n *    in the case of a timestamp collision).\r\n */\n\nconst nextPushId = function () {\n  // Timestamp of last push, used to prevent local collisions if you push twice\n  // in one ms.\n  let lastPushTime = 0; // We generate 72-bits of randomness which get turned into 12 characters and\n  // appended to the timestamp to prevent collisions with other clients. We\n  // store the last characters we generated because in the event of a collision,\n  // we'll use those same characters except \"incremented\" by one.\n\n  const lastRandChars = [];\n  return function (now) {\n    const duplicateTime = now === lastPushTime;\n    lastPushTime = now;\n    let i;\n    const timeStampChars = new Array(8);\n\n    for (i = 7; i >= 0; i--) {\n      timeStampChars[i] = PUSH_CHARS.charAt(now % 64); // NOTE: Can't use << here because javascript will convert to int and lose\n      // the upper bits.\n\n      now = Math.floor(now / 64);\n    }\n\n    assert(now === 0, 'Cannot push at time == 0');\n    let id = timeStampChars.join('');\n\n    if (!duplicateTime) {\n      for (i = 0; i < 12; i++) {\n        lastRandChars[i] = Math.floor(Math.random() * 64);\n      }\n    } else {\n      // If the timestamp hasn't changed since last push, use the same random\n      // number, except incremented by 1.\n      for (i = 11; i >= 0 && lastRandChars[i] === 63; i--) {\n        lastRandChars[i] = 0;\n      }\n\n      lastRandChars[i]++;\n    }\n\n    for (i = 0; i < 12; i++) {\n      id += PUSH_CHARS.charAt(lastRandChars[i]);\n    }\n\n    assert(id.length === 20, 'nextPushId: Length should be 20.');\n    return id;\n  };\n}();\n\nconst successor = function (key) {\n  if (key === '' + INTEGER_32_MAX) {\n    // See https://firebase.google.com/docs/database/web/lists-of-data#data-order\n    return MIN_PUSH_CHAR;\n  }\n\n  const keyAsInt = tryParseInt(key);\n\n  if (keyAsInt != null) {\n    return '' + (keyAsInt + 1);\n  }\n\n  const next = new Array(key.length);\n\n  for (let i = 0; i < next.length; i++) {\n    next[i] = key.charAt(i);\n  }\n\n  if (next.length < MAX_KEY_LEN) {\n    next.push(MIN_PUSH_CHAR);\n    return next.join('');\n  }\n\n  let i = next.length - 1;\n\n  while (i >= 0 && next[i] === MAX_PUSH_CHAR) {\n    i--;\n  } // `successor` was called on the largest possible key, so return the\n  // MAX_NAME, which sorts larger than all keys.\n\n\n  if (i === -1) {\n    return MAX_NAME;\n  }\n\n  const source = next[i];\n  const sourcePlusOne = PUSH_CHARS.charAt(PUSH_CHARS.indexOf(source) + 1);\n  next[i] = sourcePlusOne;\n  return next.slice(0, i + 1).join('');\n}; // `key` is assumed to be non-empty.\n\n\nconst predecessor = function (key) {\n  if (key === '' + INTEGER_32_MIN) {\n    return MIN_NAME;\n  }\n\n  const keyAsInt = tryParseInt(key);\n\n  if (keyAsInt != null) {\n    return '' + (keyAsInt - 1);\n  }\n\n  const next = new Array(key.length);\n\n  for (let i = 0; i < next.length; i++) {\n    next[i] = key.charAt(i);\n  } // If `key` ends in `MIN_PUSH_CHAR`, the largest key lexicographically\n  // smaller than `key`, is `key[0:key.length - 1]`. The next key smaller\n  // than that, `predecessor(predecessor(key))`, is\n  //\n  // `key[0:key.length - 2] + (key[key.length - 1] - 1) + \\\n  //   { MAX_PUSH_CHAR repeated MAX_KEY_LEN - (key.length - 1) times }\n  //\n  // analogous to increment/decrement for base-10 integers.\n  //\n  // This works because lexigographic comparison works character-by-character,\n  // using length as a tie-breaker if one key is a prefix of the other.\n\n\n  if (next[next.length - 1] === MIN_PUSH_CHAR) {\n    if (next.length === 1) {\n      // See https://firebase.google.com/docs/database/web/lists-of-data#orderbykey\n      return '' + INTEGER_32_MAX;\n    }\n\n    delete next[next.length - 1];\n    return next.join('');\n  } // Replace the last character with it's immediate predecessor, and\n  // fill the suffix of the key with MAX_PUSH_CHAR. This is the\n  // lexicographically largest possible key smaller than `key`.\n\n\n  next[next.length - 1] = PUSH_CHARS.charAt(PUSH_CHARS.indexOf(next[next.length - 1]) - 1);\n  return next.join('') + MAX_PUSH_CHAR.repeat(MAX_KEY_LEN - next.length);\n};\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction changeValue(snapshotNode) {\n  return {\n    type: \"value\"\n    /* VALUE */\n    ,\n    snapshotNode\n  };\n}\n\nfunction changeChildAdded(childName, snapshotNode) {\n  return {\n    type: \"child_added\"\n    /* CHILD_ADDED */\n    ,\n    snapshotNode,\n    childName\n  };\n}\n\nfunction changeChildRemoved(childName, snapshotNode) {\n  return {\n    type: \"child_removed\"\n    /* CHILD_REMOVED */\n    ,\n    snapshotNode,\n    childName\n  };\n}\n\nfunction changeChildChanged(childName, snapshotNode, oldSnap) {\n  return {\n    type: \"child_changed\"\n    /* CHILD_CHANGED */\n    ,\n    snapshotNode,\n    childName,\n    oldSnap\n  };\n}\n\nfunction changeChildMoved(childName, snapshotNode) {\n  return {\n    type: \"child_moved\"\n    /* CHILD_MOVED */\n    ,\n    snapshotNode,\n    childName\n  };\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Doesn't really filter nodes but applies an index to the node and keeps track of any changes\r\n */\n\n\nclass IndexedFilter {\n  constructor(index_) {\n    this.index_ = index_;\n  }\n\n  updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator) {\n    assert(snap.isIndexed(this.index_), 'A node must be indexed if only a child is updated');\n    const oldChild = snap.getImmediateChild(key); // Check if anything actually changed.\n\n    if (oldChild.getChild(affectedPath).equals(newChild.getChild(affectedPath))) {\n      // There's an edge case where a child can enter or leave the view because affectedPath was set to null.\n      // In this case, affectedPath will appear null in both the old and new snapshots.  So we need\n      // to avoid treating these cases as \"nothing changed.\"\n      if (oldChild.isEmpty() === newChild.isEmpty()) {\n        // Nothing changed.\n        // This assert should be valid, but it's expensive (can dominate perf testing) so don't actually do it.\n        //assert(oldChild.equals(newChild), 'Old and new snapshots should be equal.');\n        return snap;\n      }\n    }\n\n    if (optChangeAccumulator != null) {\n      if (newChild.isEmpty()) {\n        if (snap.hasChild(key)) {\n          optChangeAccumulator.trackChildChange(changeChildRemoved(key, oldChild));\n        } else {\n          assert(snap.isLeafNode(), 'A child remove without an old child only makes sense on a leaf node');\n        }\n      } else if (oldChild.isEmpty()) {\n        optChangeAccumulator.trackChildChange(changeChildAdded(key, newChild));\n      } else {\n        optChangeAccumulator.trackChildChange(changeChildChanged(key, newChild, oldChild));\n      }\n    }\n\n    if (snap.isLeafNode() && newChild.isEmpty()) {\n      return snap;\n    } else {\n      // Make sure the node is indexed\n      return snap.updateImmediateChild(key, newChild).withIndex(this.index_);\n    }\n  }\n\n  updateFullNode(oldSnap, newSnap, optChangeAccumulator) {\n    if (optChangeAccumulator != null) {\n      if (!oldSnap.isLeafNode()) {\n        oldSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n          if (!newSnap.hasChild(key)) {\n            optChangeAccumulator.trackChildChange(changeChildRemoved(key, childNode));\n          }\n        });\n      }\n\n      if (!newSnap.isLeafNode()) {\n        newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n          if (oldSnap.hasChild(key)) {\n            const oldChild = oldSnap.getImmediateChild(key);\n\n            if (!oldChild.equals(childNode)) {\n              optChangeAccumulator.trackChildChange(changeChildChanged(key, childNode, oldChild));\n            }\n          } else {\n            optChangeAccumulator.trackChildChange(changeChildAdded(key, childNode));\n          }\n        });\n      }\n    }\n\n    return newSnap.withIndex(this.index_);\n  }\n\n  updatePriority(oldSnap, newPriority) {\n    if (oldSnap.isEmpty()) {\n      return ChildrenNode.EMPTY_NODE;\n    } else {\n      return oldSnap.updatePriority(newPriority);\n    }\n  }\n\n  filtersNodes() {\n    return false;\n  }\n\n  getIndexedFilter() {\n    return this;\n  }\n\n  getIndex() {\n    return this.index_;\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Filters nodes by range and uses an IndexFilter to track any changes after filtering the node\r\n */\n\n\nclass RangedFilter {\n  constructor(params) {\n    this.indexedFilter_ = new IndexedFilter(params.getIndex());\n    this.index_ = params.getIndex();\n    this.startPost_ = RangedFilter.getStartPost_(params);\n    this.endPost_ = RangedFilter.getEndPost_(params);\n  }\n\n  getStartPost() {\n    return this.startPost_;\n  }\n\n  getEndPost() {\n    return this.endPost_;\n  }\n\n  matches(node) {\n    return this.index_.compare(this.getStartPost(), node) <= 0 && this.index_.compare(node, this.getEndPost()) <= 0;\n  }\n\n  updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator) {\n    if (!this.matches(new NamedNode(key, newChild))) {\n      newChild = ChildrenNode.EMPTY_NODE;\n    }\n\n    return this.indexedFilter_.updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);\n  }\n\n  updateFullNode(oldSnap, newSnap, optChangeAccumulator) {\n    if (newSnap.isLeafNode()) {\n      // Make sure we have a children node with the correct index, not a leaf node;\n      newSnap = ChildrenNode.EMPTY_NODE;\n    }\n\n    let filtered = newSnap.withIndex(this.index_); // Don't support priorities on queries\n\n    filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\n    const self = this;\n    newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n      if (!self.matches(new NamedNode(key, childNode))) {\n        filtered = filtered.updateImmediateChild(key, ChildrenNode.EMPTY_NODE);\n      }\n    });\n    return this.indexedFilter_.updateFullNode(oldSnap, filtered, optChangeAccumulator);\n  }\n\n  updatePriority(oldSnap, newPriority) {\n    // Don't support priorities on queries\n    return oldSnap;\n  }\n\n  filtersNodes() {\n    return true;\n  }\n\n  getIndexedFilter() {\n    return this.indexedFilter_;\n  }\n\n  getIndex() {\n    return this.index_;\n  }\n\n  static getStartPost_(params) {\n    if (params.hasStart()) {\n      const startName = params.getIndexStartName();\n      return params.getIndex().makePost(params.getIndexStartValue(), startName);\n    } else {\n      return params.getIndex().minPost();\n    }\n  }\n\n  static getEndPost_(params) {\n    if (params.hasEnd()) {\n      const endName = params.getIndexEndName();\n      return params.getIndex().makePost(params.getIndexEndValue(), endName);\n    } else {\n      return params.getIndex().maxPost();\n    }\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Applies a limit and a range to a node and uses RangedFilter to do the heavy lifting where possible\r\n */\n\n\nclass LimitedFilter {\n  constructor(params) {\n    this.rangedFilter_ = new RangedFilter(params);\n    this.index_ = params.getIndex();\n    this.limit_ = params.getLimit();\n    this.reverse_ = !params.isViewFromLeft();\n  }\n\n  updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator) {\n    if (!this.rangedFilter_.matches(new NamedNode(key, newChild))) {\n      newChild = ChildrenNode.EMPTY_NODE;\n    }\n\n    if (snap.getImmediateChild(key).equals(newChild)) {\n      // No change\n      return snap;\n    } else if (snap.numChildren() < this.limit_) {\n      return this.rangedFilter_.getIndexedFilter().updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);\n    } else {\n      return this.fullLimitUpdateChild_(snap, key, newChild, source, optChangeAccumulator);\n    }\n  }\n\n  updateFullNode(oldSnap, newSnap, optChangeAccumulator) {\n    let filtered;\n\n    if (newSnap.isLeafNode() || newSnap.isEmpty()) {\n      // Make sure we have a children node with the correct index, not a leaf node;\n      filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\n    } else {\n      if (this.limit_ * 2 < newSnap.numChildren() && newSnap.isIndexed(this.index_)) {\n        // Easier to build up a snapshot, since what we're given has more than twice the elements we want\n        filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_); // anchor to the startPost, endPost, or last element as appropriate\n\n        let iterator;\n\n        if (this.reverse_) {\n          iterator = newSnap.getReverseIteratorFrom(this.rangedFilter_.getEndPost(), this.index_);\n        } else {\n          iterator = newSnap.getIteratorFrom(this.rangedFilter_.getStartPost(), this.index_);\n        }\n\n        let count = 0;\n\n        while (iterator.hasNext() && count < this.limit_) {\n          const next = iterator.getNext();\n          let inRange;\n\n          if (this.reverse_) {\n            inRange = this.index_.compare(this.rangedFilter_.getStartPost(), next) <= 0;\n          } else {\n            inRange = this.index_.compare(next, this.rangedFilter_.getEndPost()) <= 0;\n          }\n\n          if (inRange) {\n            filtered = filtered.updateImmediateChild(next.name, next.node);\n            count++;\n          } else {\n            // if we have reached the end post, we cannot keep adding elemments\n            break;\n          }\n        }\n      } else {\n        // The snap contains less than twice the limit. Faster to delete from the snap than build up a new one\n        filtered = newSnap.withIndex(this.index_); // Don't support priorities on queries\n\n        filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\n        let startPost;\n        let endPost;\n        let cmp;\n        let iterator;\n\n        if (this.reverse_) {\n          iterator = filtered.getReverseIterator(this.index_);\n          startPost = this.rangedFilter_.getEndPost();\n          endPost = this.rangedFilter_.getStartPost();\n          const indexCompare = this.index_.getCompare();\n\n          cmp = (a, b) => indexCompare(b, a);\n        } else {\n          iterator = filtered.getIterator(this.index_);\n          startPost = this.rangedFilter_.getStartPost();\n          endPost = this.rangedFilter_.getEndPost();\n          cmp = this.index_.getCompare();\n        }\n\n        let count = 0;\n        let foundStartPost = false;\n\n        while (iterator.hasNext()) {\n          const next = iterator.getNext();\n\n          if (!foundStartPost && cmp(startPost, next) <= 0) {\n            // start adding\n            foundStartPost = true;\n          }\n\n          const inRange = foundStartPost && count < this.limit_ && cmp(next, endPost) <= 0;\n\n          if (inRange) {\n            count++;\n          } else {\n            filtered = filtered.updateImmediateChild(next.name, ChildrenNode.EMPTY_NODE);\n          }\n        }\n      }\n    }\n\n    return this.rangedFilter_.getIndexedFilter().updateFullNode(oldSnap, filtered, optChangeAccumulator);\n  }\n\n  updatePriority(oldSnap, newPriority) {\n    // Don't support priorities on queries\n    return oldSnap;\n  }\n\n  filtersNodes() {\n    return true;\n  }\n\n  getIndexedFilter() {\n    return this.rangedFilter_.getIndexedFilter();\n  }\n\n  getIndex() {\n    return this.index_;\n  }\n\n  fullLimitUpdateChild_(snap, childKey, childSnap, source, changeAccumulator) {\n    // TODO: rename all cache stuff etc to general snap terminology\n    let cmp;\n\n    if (this.reverse_) {\n      const indexCmp = this.index_.getCompare();\n\n      cmp = (a, b) => indexCmp(b, a);\n    } else {\n      cmp = this.index_.getCompare();\n    }\n\n    const oldEventCache = snap;\n    assert(oldEventCache.numChildren() === this.limit_, '');\n    const newChildNamedNode = new NamedNode(childKey, childSnap);\n    const windowBoundary = this.reverse_ ? oldEventCache.getFirstChild(this.index_) : oldEventCache.getLastChild(this.index_);\n    const inRange = this.rangedFilter_.matches(newChildNamedNode);\n\n    if (oldEventCache.hasChild(childKey)) {\n      const oldChildSnap = oldEventCache.getImmediateChild(childKey);\n      let nextChild = source.getChildAfterChild(this.index_, windowBoundary, this.reverse_);\n\n      while (nextChild != null && (nextChild.name === childKey || oldEventCache.hasChild(nextChild.name))) {\n        // There is a weird edge case where a node is updated as part of a merge in the write tree, but hasn't\n        // been applied to the limited filter yet. Ignore this next child which will be updated later in\n        // the limited filter...\n        nextChild = source.getChildAfterChild(this.index_, nextChild, this.reverse_);\n      }\n\n      const compareNext = nextChild == null ? 1 : cmp(nextChild, newChildNamedNode);\n      const remainsInWindow = inRange && !childSnap.isEmpty() && compareNext >= 0;\n\n      if (remainsInWindow) {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(changeChildChanged(childKey, childSnap, oldChildSnap));\n        }\n\n        return oldEventCache.updateImmediateChild(childKey, childSnap);\n      } else {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(changeChildRemoved(childKey, oldChildSnap));\n        }\n\n        const newEventCache = oldEventCache.updateImmediateChild(childKey, ChildrenNode.EMPTY_NODE);\n        const nextChildInRange = nextChild != null && this.rangedFilter_.matches(nextChild);\n\n        if (nextChildInRange) {\n          if (changeAccumulator != null) {\n            changeAccumulator.trackChildChange(changeChildAdded(nextChild.name, nextChild.node));\n          }\n\n          return newEventCache.updateImmediateChild(nextChild.name, nextChild.node);\n        } else {\n          return newEventCache;\n        }\n      }\n    } else if (childSnap.isEmpty()) {\n      // we're deleting a node, but it was not in the window, so ignore it\n      return snap;\n    } else if (inRange) {\n      if (cmp(windowBoundary, newChildNamedNode) >= 0) {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(changeChildRemoved(windowBoundary.name, windowBoundary.node));\n          changeAccumulator.trackChildChange(changeChildAdded(childKey, childSnap));\n        }\n\n        return oldEventCache.updateImmediateChild(childKey, childSnap).updateImmediateChild(windowBoundary.name, ChildrenNode.EMPTY_NODE);\n      } else {\n        return snap;\n      }\n    } else {\n      return snap;\n    }\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * This class is an immutable-from-the-public-api struct containing a set of query parameters defining a\r\n * range to be returned for a particular location. It is assumed that validation of parameters is done at the\r\n * user-facing API level, so it is not done here.\r\n *\r\n * @internal\r\n */\n\n\nclass QueryParams {\n  constructor() {\n    this.limitSet_ = false;\n    this.startSet_ = false;\n    this.startNameSet_ = false;\n    this.startAfterSet_ = false;\n    this.endSet_ = false;\n    this.endNameSet_ = false;\n    this.endBeforeSet_ = false;\n    this.limit_ = 0;\n    this.viewFrom_ = '';\n    this.indexStartValue_ = null;\n    this.indexStartName_ = '';\n    this.indexEndValue_ = null;\n    this.indexEndName_ = '';\n    this.index_ = PRIORITY_INDEX;\n  }\n\n  hasStart() {\n    return this.startSet_;\n  }\n\n  hasStartAfter() {\n    return this.startAfterSet_;\n  }\n\n  hasEndBefore() {\n    return this.endBeforeSet_;\n  }\n  /**\r\n   * @returns True if it would return from left.\r\n   */\n\n\n  isViewFromLeft() {\n    if (this.viewFrom_ === '') {\n      // limit(), rather than limitToFirst or limitToLast was called.\n      // This means that only one of startSet_ and endSet_ is true. Use them\n      // to calculate which side of the view to anchor to. If neither is set,\n      // anchor to the end.\n      return this.startSet_;\n    } else {\n      return this.viewFrom_ === \"l\"\n      /* VIEW_FROM_LEFT */\n      ;\n    }\n  }\n  /**\r\n   * Only valid to call if hasStart() returns true\r\n   */\n\n\n  getIndexStartValue() {\n    assert(this.startSet_, 'Only valid if start has been set');\n    return this.indexStartValue_;\n  }\n  /**\r\n   * Only valid to call if hasStart() returns true.\r\n   * Returns the starting key name for the range defined by these query parameters\r\n   */\n\n\n  getIndexStartName() {\n    assert(this.startSet_, 'Only valid if start has been set');\n\n    if (this.startNameSet_) {\n      return this.indexStartName_;\n    } else {\n      return MIN_NAME;\n    }\n  }\n\n  hasEnd() {\n    return this.endSet_;\n  }\n  /**\r\n   * Only valid to call if hasEnd() returns true.\r\n   */\n\n\n  getIndexEndValue() {\n    assert(this.endSet_, 'Only valid if end has been set');\n    return this.indexEndValue_;\n  }\n  /**\r\n   * Only valid to call if hasEnd() returns true.\r\n   * Returns the end key name for the range defined by these query parameters\r\n   */\n\n\n  getIndexEndName() {\n    assert(this.endSet_, 'Only valid if end has been set');\n\n    if (this.endNameSet_) {\n      return this.indexEndName_;\n    } else {\n      return MAX_NAME;\n    }\n  }\n\n  hasLimit() {\n    return this.limitSet_;\n  }\n  /**\r\n   * @returns True if a limit has been set and it has been explicitly anchored\r\n   */\n\n\n  hasAnchoredLimit() {\n    return this.limitSet_ && this.viewFrom_ !== '';\n  }\n  /**\r\n   * Only valid to call if hasLimit() returns true\r\n   */\n\n\n  getLimit() {\n    assert(this.limitSet_, 'Only valid if limit has been set');\n    return this.limit_;\n  }\n\n  getIndex() {\n    return this.index_;\n  }\n\n  loadsAllData() {\n    return !(this.startSet_ || this.endSet_ || this.limitSet_);\n  }\n\n  isDefault() {\n    return this.loadsAllData() && this.index_ === PRIORITY_INDEX;\n  }\n\n  copy() {\n    const copy = new QueryParams();\n    copy.limitSet_ = this.limitSet_;\n    copy.limit_ = this.limit_;\n    copy.startSet_ = this.startSet_;\n    copy.indexStartValue_ = this.indexStartValue_;\n    copy.startNameSet_ = this.startNameSet_;\n    copy.indexStartName_ = this.indexStartName_;\n    copy.endSet_ = this.endSet_;\n    copy.indexEndValue_ = this.indexEndValue_;\n    copy.endNameSet_ = this.endNameSet_;\n    copy.indexEndName_ = this.indexEndName_;\n    copy.index_ = this.index_;\n    copy.viewFrom_ = this.viewFrom_;\n    return copy;\n  }\n\n}\n\nfunction queryParamsGetNodeFilter(queryParams) {\n  if (queryParams.loadsAllData()) {\n    return new IndexedFilter(queryParams.getIndex());\n  } else if (queryParams.hasLimit()) {\n    return new LimitedFilter(queryParams);\n  } else {\n    return new RangedFilter(queryParams);\n  }\n}\n\nfunction queryParamsLimitToFirst(queryParams, newLimit) {\n  const newParams = queryParams.copy();\n  newParams.limitSet_ = true;\n  newParams.limit_ = newLimit;\n  newParams.viewFrom_ = \"l\"\n  /* VIEW_FROM_LEFT */\n  ;\n  return newParams;\n}\n\nfunction queryParamsLimitToLast(queryParams, newLimit) {\n  const newParams = queryParams.copy();\n  newParams.limitSet_ = true;\n  newParams.limit_ = newLimit;\n  newParams.viewFrom_ = \"r\"\n  /* VIEW_FROM_RIGHT */\n  ;\n  return newParams;\n}\n\nfunction queryParamsStartAt(queryParams, indexValue, key) {\n  const newParams = queryParams.copy();\n  newParams.startSet_ = true;\n\n  if (indexValue === undefined) {\n    indexValue = null;\n  }\n\n  newParams.indexStartValue_ = indexValue;\n\n  if (key != null) {\n    newParams.startNameSet_ = true;\n    newParams.indexStartName_ = key;\n  } else {\n    newParams.startNameSet_ = false;\n    newParams.indexStartName_ = '';\n  }\n\n  return newParams;\n}\n\nfunction queryParamsStartAfter(queryParams, indexValue, key) {\n  let params;\n\n  if (queryParams.index_ === KEY_INDEX) {\n    if (typeof indexValue === 'string') {\n      indexValue = successor(indexValue);\n    }\n\n    params = queryParamsStartAt(queryParams, indexValue, key);\n  } else {\n    let childKey;\n\n    if (key == null) {\n      childKey = MAX_NAME;\n    } else {\n      childKey = successor(key);\n    }\n\n    params = queryParamsStartAt(queryParams, indexValue, childKey);\n  }\n\n  params.startAfterSet_ = true;\n  return params;\n}\n\nfunction queryParamsEndAt(queryParams, indexValue, key) {\n  const newParams = queryParams.copy();\n  newParams.endSet_ = true;\n\n  if (indexValue === undefined) {\n    indexValue = null;\n  }\n\n  newParams.indexEndValue_ = indexValue;\n\n  if (key !== undefined) {\n    newParams.endNameSet_ = true;\n    newParams.indexEndName_ = key;\n  } else {\n    newParams.endNameSet_ = false;\n    newParams.indexEndName_ = '';\n  }\n\n  return newParams;\n}\n\nfunction queryParamsEndBefore(queryParams, indexValue, key) {\n  let childKey;\n  let params;\n\n  if (queryParams.index_ === KEY_INDEX) {\n    if (typeof indexValue === 'string') {\n      indexValue = predecessor(indexValue);\n    }\n\n    params = queryParamsEndAt(queryParams, indexValue, key);\n  } else {\n    if (key == null) {\n      childKey = MIN_NAME;\n    } else {\n      childKey = predecessor(key);\n    }\n\n    params = queryParamsEndAt(queryParams, indexValue, childKey);\n  }\n\n  params.endBeforeSet_ = true;\n  return params;\n}\n\nfunction queryParamsOrderBy(queryParams, index) {\n  const newParams = queryParams.copy();\n  newParams.index_ = index;\n  return newParams;\n}\n/**\r\n * Returns a set of REST query string parameters representing this query.\r\n *\r\n * @returns query string parameters\r\n */\n\n\nfunction queryParamsToRestQueryStringParameters(queryParams) {\n  const qs = {};\n\n  if (queryParams.isDefault()) {\n    return qs;\n  }\n\n  let orderBy;\n\n  if (queryParams.index_ === PRIORITY_INDEX) {\n    orderBy = \"$priority\"\n    /* PRIORITY_INDEX */\n    ;\n  } else if (queryParams.index_ === VALUE_INDEX) {\n    orderBy = \"$value\"\n    /* VALUE_INDEX */\n    ;\n  } else if (queryParams.index_ === KEY_INDEX) {\n    orderBy = \"$key\"\n    /* KEY_INDEX */\n    ;\n  } else {\n    assert(queryParams.index_ instanceof PathIndex, 'Unrecognized index type!');\n    orderBy = queryParams.index_.toString();\n  }\n\n  qs[\"orderBy\"\n  /* ORDER_BY */\n  ] = stringify(orderBy);\n\n  if (queryParams.startSet_) {\n    qs[\"startAt\"\n    /* START_AT */\n    ] = stringify(queryParams.indexStartValue_);\n\n    if (queryParams.startNameSet_) {\n      qs[\"startAt\"\n      /* START_AT */\n      ] += ',' + stringify(queryParams.indexStartName_);\n    }\n  }\n\n  if (queryParams.endSet_) {\n    qs[\"endAt\"\n    /* END_AT */\n    ] = stringify(queryParams.indexEndValue_);\n\n    if (queryParams.endNameSet_) {\n      qs[\"endAt\"\n      /* END_AT */\n      ] += ',' + stringify(queryParams.indexEndName_);\n    }\n  }\n\n  if (queryParams.limitSet_) {\n    if (queryParams.isViewFromLeft()) {\n      qs[\"limitToFirst\"\n      /* LIMIT_TO_FIRST */\n      ] = queryParams.limit_;\n    } else {\n      qs[\"limitToLast\"\n      /* LIMIT_TO_LAST */\n      ] = queryParams.limit_;\n    }\n  }\n\n  return qs;\n}\n\nfunction queryParamsGetQueryObject(queryParams) {\n  const obj = {};\n\n  if (queryParams.startSet_) {\n    obj[\"sp\"\n    /* INDEX_START_VALUE */\n    ] = queryParams.indexStartValue_;\n\n    if (queryParams.startNameSet_) {\n      obj[\"sn\"\n      /* INDEX_START_NAME */\n      ] = queryParams.indexStartName_;\n    }\n  }\n\n  if (queryParams.endSet_) {\n    obj[\"ep\"\n    /* INDEX_END_VALUE */\n    ] = queryParams.indexEndValue_;\n\n    if (queryParams.endNameSet_) {\n      obj[\"en\"\n      /* INDEX_END_NAME */\n      ] = queryParams.indexEndName_;\n    }\n  }\n\n  if (queryParams.limitSet_) {\n    obj[\"l\"\n    /* LIMIT */\n    ] = queryParams.limit_;\n    let viewFrom = queryParams.viewFrom_;\n\n    if (viewFrom === '') {\n      if (queryParams.isViewFromLeft()) {\n        viewFrom = \"l\"\n        /* VIEW_FROM_LEFT */\n        ;\n      } else {\n        viewFrom = \"r\"\n        /* VIEW_FROM_RIGHT */\n        ;\n      }\n    }\n\n    obj[\"vf\"\n    /* VIEW_FROM */\n    ] = viewFrom;\n  } // For now, priority index is the default, so we only specify if it's some other index\n\n\n  if (queryParams.index_ !== PRIORITY_INDEX) {\n    obj[\"i\"\n    /* INDEX */\n    ] = queryParams.index_.toString();\n  }\n\n  return obj;\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * An implementation of ServerActions that communicates with the server via REST requests.\r\n * This is mostly useful for compatibility with crawlers, where we don't want to spin up a full\r\n * persistent connection (using WebSockets or long-polling)\r\n */\n\n\nclass ReadonlyRestClient extends ServerActions {\n  /**\r\n   * @param repoInfo_ - Data about the namespace we are connecting to\r\n   * @param onDataUpdate_ - A callback for new data from the server\r\n   */\n  constructor(repoInfo_, onDataUpdate_, authTokenProvider_, appCheckTokenProvider_) {\n    super();\n    this.repoInfo_ = repoInfo_;\n    this.onDataUpdate_ = onDataUpdate_;\n    this.authTokenProvider_ = authTokenProvider_;\n    this.appCheckTokenProvider_ = appCheckTokenProvider_;\n    /** @private {function(...[*])} */\n\n    this.log_ = logWrapper('p:rest:');\n    /**\r\n     * We don't actually need to track listens, except to prevent us calling an onComplete for a listen\r\n     * that's been removed. :-/\r\n     */\n\n    this.listens_ = {};\n  }\n\n  reportStats(stats) {\n    throw new Error('Method not implemented.');\n  }\n\n  static getListenId_(query, tag) {\n    if (tag !== undefined) {\n      return 'tag$' + tag;\n    } else {\n      assert(query._queryParams.isDefault(), \"should have a tag if it's not a default query.\");\n      return query._path.toString();\n    }\n  }\n  /** @inheritDoc */\n\n\n  listen(query, currentHashFn, tag, onComplete) {\n    const pathString = query._path.toString();\n\n    this.log_('Listen called for ' + pathString + ' ' + query._queryIdentifier); // Mark this listener so we can tell if it's removed.\n\n    const listenId = ReadonlyRestClient.getListenId_(query, tag);\n    const thisListen = {};\n    this.listens_[listenId] = thisListen;\n    const queryStringParameters = queryParamsToRestQueryStringParameters(query._queryParams);\n    this.restRequest_(pathString + '.json', queryStringParameters, (error, result) => {\n      let data = result;\n\n      if (error === 404) {\n        data = null;\n        error = null;\n      }\n\n      if (error === null) {\n        this.onDataUpdate_(pathString, data,\n        /*isMerge=*/\n        false, tag);\n      }\n\n      if (safeGet(this.listens_, listenId) === thisListen) {\n        let status;\n\n        if (!error) {\n          status = 'ok';\n        } else if (error === 401) {\n          status = 'permission_denied';\n        } else {\n          status = 'rest_error:' + error;\n        }\n\n        onComplete(status, null);\n      }\n    });\n  }\n  /** @inheritDoc */\n\n\n  unlisten(query, tag) {\n    const listenId = ReadonlyRestClient.getListenId_(query, tag);\n    delete this.listens_[listenId];\n  }\n\n  get(query) {\n    const queryStringParameters = queryParamsToRestQueryStringParameters(query._queryParams);\n\n    const pathString = query._path.toString();\n\n    const deferred = new Deferred();\n    this.restRequest_(pathString + '.json', queryStringParameters, (error, result) => {\n      let data = result;\n\n      if (error === 404) {\n        data = null;\n        error = null;\n      }\n\n      if (error === null) {\n        this.onDataUpdate_(pathString, data,\n        /*isMerge=*/\n        false,\n        /*tag=*/\n        null);\n        deferred.resolve(data);\n      } else {\n        deferred.reject(new Error(data));\n      }\n    });\n    return deferred.promise;\n  }\n  /** @inheritDoc */\n\n\n  refreshAuthToken(token) {// no-op since we just always call getToken.\n  }\n  /**\r\n   * Performs a REST request to the given path, with the provided query string parameters,\r\n   * and any auth credentials we have.\r\n   */\n\n\n  restRequest_(pathString) {\n    let queryStringParameters = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let callback = arguments.length > 2 ? arguments[2] : undefined;\n    queryStringParameters['format'] = 'export';\n    return Promise.all([this.authTokenProvider_.getToken(\n    /*forceRefresh=*/\n    false), this.appCheckTokenProvider_.getToken(\n    /*forceRefresh=*/\n    false)]).then(_ref => {\n      let [authToken, appCheckToken] = _ref;\n\n      if (authToken && authToken.accessToken) {\n        queryStringParameters['auth'] = authToken.accessToken;\n      }\n\n      if (appCheckToken && appCheckToken.token) {\n        queryStringParameters['ac'] = appCheckToken.token;\n      }\n\n      const url = (this.repoInfo_.secure ? 'https://' : 'http://') + this.repoInfo_.host + pathString + '?' + 'ns=' + this.repoInfo_.namespace + querystring(queryStringParameters);\n      this.log_('Sending REST request for ' + url);\n      const xhr = new XMLHttpRequest();\n\n      xhr.onreadystatechange = () => {\n        if (callback && xhr.readyState === 4) {\n          this.log_('REST Response for ' + url + ' received. status:', xhr.status, 'response:', xhr.responseText);\n          let res = null;\n\n          if (xhr.status >= 200 && xhr.status < 300) {\n            try {\n              res = jsonEval(xhr.responseText);\n            } catch (e) {\n              warn('Failed to parse JSON response for ' + url + ': ' + xhr.responseText);\n            }\n\n            callback(null, res);\n          } else {\n            // 401 and 404 are expected.\n            if (xhr.status !== 401 && xhr.status !== 404) {\n              warn('Got unsuccessful REST response for ' + url + ' Status: ' + xhr.status);\n            }\n\n            callback(xhr.status);\n          }\n\n          callback = null;\n        }\n      };\n\n      xhr.open('GET', url,\n      /*asynchronous=*/\n      true);\n      xhr.send();\n    });\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Mutable object which basically just stores a reference to the \"latest\" immutable snapshot.\r\n */\n\n\nclass SnapshotHolder {\n  constructor() {\n    this.rootNode_ = ChildrenNode.EMPTY_NODE;\n  }\n\n  getNode(path) {\n    return this.rootNode_.getChild(path);\n  }\n\n  updateSnapshot(path, newSnapshotNode) {\n    this.rootNode_ = this.rootNode_.updateChild(path, newSnapshotNode);\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction newSparseSnapshotTree() {\n  return {\n    value: null,\n    children: new Map()\n  };\n}\n/**\r\n * Stores the given node at the specified path. If there is already a node\r\n * at a shallower path, it merges the new data into that snapshot node.\r\n *\r\n * @param path - Path to look up snapshot for.\r\n * @param data - The new data, or null.\r\n */\n\n\nfunction sparseSnapshotTreeRemember(sparseSnapshotTree, path, data) {\n  if (pathIsEmpty(path)) {\n    sparseSnapshotTree.value = data;\n    sparseSnapshotTree.children.clear();\n  } else if (sparseSnapshotTree.value !== null) {\n    sparseSnapshotTree.value = sparseSnapshotTree.value.updateChild(path, data);\n  } else {\n    const childKey = pathGetFront(path);\n\n    if (!sparseSnapshotTree.children.has(childKey)) {\n      sparseSnapshotTree.children.set(childKey, newSparseSnapshotTree());\n    }\n\n    const child = sparseSnapshotTree.children.get(childKey);\n    path = pathPopFront(path);\n    sparseSnapshotTreeRemember(child, path, data);\n  }\n}\n/**\r\n * Purge the data at path from the cache.\r\n *\r\n * @param path - Path to look up snapshot for.\r\n * @returns True if this node should now be removed.\r\n */\n\n\nfunction sparseSnapshotTreeForget(sparseSnapshotTree, path) {\n  if (pathIsEmpty(path)) {\n    sparseSnapshotTree.value = null;\n    sparseSnapshotTree.children.clear();\n    return true;\n  } else {\n    if (sparseSnapshotTree.value !== null) {\n      if (sparseSnapshotTree.value.isLeafNode()) {\n        // We're trying to forget a node that doesn't exist\n        return false;\n      } else {\n        const value = sparseSnapshotTree.value;\n        sparseSnapshotTree.value = null;\n        value.forEachChild(PRIORITY_INDEX, (key, tree) => {\n          sparseSnapshotTreeRemember(sparseSnapshotTree, new Path(key), tree);\n        });\n        return sparseSnapshotTreeForget(sparseSnapshotTree, path);\n      }\n    } else if (sparseSnapshotTree.children.size > 0) {\n      const childKey = pathGetFront(path);\n      path = pathPopFront(path);\n\n      if (sparseSnapshotTree.children.has(childKey)) {\n        const safeToRemove = sparseSnapshotTreeForget(sparseSnapshotTree.children.get(childKey), path);\n\n        if (safeToRemove) {\n          sparseSnapshotTree.children.delete(childKey);\n        }\n      }\n\n      return sparseSnapshotTree.children.size === 0;\n    } else {\n      return true;\n    }\n  }\n}\n/**\r\n * Recursively iterates through all of the stored tree and calls the\r\n * callback on each one.\r\n *\r\n * @param prefixPath - Path to look up node for.\r\n * @param func - The function to invoke for each tree.\r\n */\n\n\nfunction sparseSnapshotTreeForEachTree(sparseSnapshotTree, prefixPath, func) {\n  if (sparseSnapshotTree.value !== null) {\n    func(prefixPath, sparseSnapshotTree.value);\n  } else {\n    sparseSnapshotTreeForEachChild(sparseSnapshotTree, (key, tree) => {\n      const path = new Path(prefixPath.toString() + '/' + key);\n      sparseSnapshotTreeForEachTree(tree, path, func);\n    });\n  }\n}\n/**\r\n * Iterates through each immediate child and triggers the callback.\r\n * Only seems to be used in tests.\r\n *\r\n * @param func - The function to invoke for each child.\r\n */\n\n\nfunction sparseSnapshotTreeForEachChild(sparseSnapshotTree, func) {\n  sparseSnapshotTree.children.forEach((tree, key) => {\n    func(key, tree);\n  });\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Returns the delta from the previous call to get stats.\r\n *\r\n * @param collection_ - The collection to \"listen\" to.\r\n */\n\n\nclass StatsListener {\n  constructor(collection_) {\n    this.collection_ = collection_;\n    this.last_ = null;\n  }\n\n  get() {\n    const newStats = this.collection_.get();\n    const delta = Object.assign({}, newStats);\n\n    if (this.last_) {\n      each(this.last_, (stat, value) => {\n        delta[stat] = delta[stat] - value;\n      });\n    }\n\n    this.last_ = newStats;\n    return delta;\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// Assuming some apps may have a short amount of time on page, and a bulk of firebase operations probably\n// happen on page load, we try to report our first set of stats pretty quickly, but we wait at least 10\n// seconds to try to ensure the Firebase connection is established / settled.\n\n\nconst FIRST_STATS_MIN_TIME = 10 * 1000;\nconst FIRST_STATS_MAX_TIME = 30 * 1000; // We'll continue to report stats on average every 5 minutes.\n\nconst REPORT_STATS_INTERVAL = 5 * 60 * 1000;\n\nclass StatsReporter {\n  constructor(collection, server_) {\n    this.server_ = server_;\n    this.statsToReport_ = {};\n    this.statsListener_ = new StatsListener(collection);\n    const timeout = FIRST_STATS_MIN_TIME + (FIRST_STATS_MAX_TIME - FIRST_STATS_MIN_TIME) * Math.random();\n    setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(timeout));\n  }\n\n  reportStats_() {\n    const stats = this.statsListener_.get();\n    const reportedStats = {};\n    let haveStatsToReport = false;\n    each(stats, (stat, value) => {\n      if (value > 0 && contains(this.statsToReport_, stat)) {\n        reportedStats[stat] = value;\n        haveStatsToReport = true;\n      }\n    });\n\n    if (haveStatsToReport) {\n      this.server_.reportStats(reportedStats);\n    } // queue our next run.\n\n\n    setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(Math.random() * 2 * REPORT_STATS_INTERVAL));\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n *\r\n * @enum\r\n */\n\n\nvar OperationType;\n\n(function (OperationType) {\n  OperationType[OperationType[\"OVERWRITE\"] = 0] = \"OVERWRITE\";\n  OperationType[OperationType[\"MERGE\"] = 1] = \"MERGE\";\n  OperationType[OperationType[\"ACK_USER_WRITE\"] = 2] = \"ACK_USER_WRITE\";\n  OperationType[OperationType[\"LISTEN_COMPLETE\"] = 3] = \"LISTEN_COMPLETE\";\n})(OperationType || (OperationType = {}));\n\nfunction newOperationSourceUser() {\n  return {\n    fromUser: true,\n    fromServer: false,\n    queryId: null,\n    tagged: false\n  };\n}\n\nfunction newOperationSourceServer() {\n  return {\n    fromUser: false,\n    fromServer: true,\n    queryId: null,\n    tagged: false\n  };\n}\n\nfunction newOperationSourceServerTaggedQuery(queryId) {\n  return {\n    fromUser: false,\n    fromServer: true,\n    queryId,\n    tagged: true\n  };\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nclass AckUserWrite {\n  /**\r\n   * @param affectedTree - A tree containing true for each affected path. Affected paths can't overlap.\r\n   */\n  constructor(\n  /** @inheritDoc */\n  path,\n  /** @inheritDoc */\n  affectedTree,\n  /** @inheritDoc */\n  revert) {\n    this.path = path;\n    this.affectedTree = affectedTree;\n    this.revert = revert;\n    /** @inheritDoc */\n\n    this.type = OperationType.ACK_USER_WRITE;\n    /** @inheritDoc */\n\n    this.source = newOperationSourceUser();\n  }\n\n  operationForChild(childName) {\n    if (!pathIsEmpty(this.path)) {\n      assert(pathGetFront(this.path) === childName, 'operationForChild called for unrelated child.');\n      return new AckUserWrite(pathPopFront(this.path), this.affectedTree, this.revert);\n    } else if (this.affectedTree.value != null) {\n      assert(this.affectedTree.children.isEmpty(), 'affectedTree should not have overlapping affected paths.'); // All child locations are affected as well; just return same operation.\n\n      return this;\n    } else {\n      const childTree = this.affectedTree.subtree(new Path(childName));\n      return new AckUserWrite(newEmptyPath(), childTree, this.revert);\n    }\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nclass ListenComplete {\n  constructor(source, path) {\n    this.source = source;\n    this.path = path;\n    /** @inheritDoc */\n\n    this.type = OperationType.LISTEN_COMPLETE;\n  }\n\n  operationForChild(childName) {\n    if (pathIsEmpty(this.path)) {\n      return new ListenComplete(this.source, newEmptyPath());\n    } else {\n      return new ListenComplete(this.source, pathPopFront(this.path));\n    }\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nclass Overwrite {\n  constructor(source, path, snap) {\n    this.source = source;\n    this.path = path;\n    this.snap = snap;\n    /** @inheritDoc */\n\n    this.type = OperationType.OVERWRITE;\n  }\n\n  operationForChild(childName) {\n    if (pathIsEmpty(this.path)) {\n      return new Overwrite(this.source, newEmptyPath(), this.snap.getImmediateChild(childName));\n    } else {\n      return new Overwrite(this.source, pathPopFront(this.path), this.snap);\n    }\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nclass Merge {\n  constructor(\n  /** @inheritDoc */\n  source,\n  /** @inheritDoc */\n  path,\n  /** @inheritDoc */\n  children) {\n    this.source = source;\n    this.path = path;\n    this.children = children;\n    /** @inheritDoc */\n\n    this.type = OperationType.MERGE;\n  }\n\n  operationForChild(childName) {\n    if (pathIsEmpty(this.path)) {\n      const childTree = this.children.subtree(new Path(childName));\n\n      if (childTree.isEmpty()) {\n        // This child is unaffected\n        return null;\n      } else if (childTree.value) {\n        // We have a snapshot for the child in question.  This becomes an overwrite of the child.\n        return new Overwrite(this.source, newEmptyPath(), childTree.value);\n      } else {\n        // This is a merge at a deeper level\n        return new Merge(this.source, newEmptyPath(), childTree);\n      }\n    } else {\n      assert(pathGetFront(this.path) === childName, \"Can't get a merge for a child not on the path of the operation\");\n      return new Merge(this.source, pathPopFront(this.path), this.children);\n    }\n  }\n\n  toString() {\n    return 'Operation(' + this.path + ': ' + this.source.toString() + ' merge: ' + this.children.toString() + ')';\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * A cache node only stores complete children. Additionally it holds a flag whether the node can be considered fully\r\n * initialized in the sense that we know at one point in time this represented a valid state of the world, e.g.\r\n * initialized with data from the server, or a complete overwrite by the client. The filtered flag also tracks\r\n * whether a node potentially had children removed due to a filter.\r\n */\n\n\nclass CacheNode {\n  constructor(node_, fullyInitialized_, filtered_) {\n    this.node_ = node_;\n    this.fullyInitialized_ = fullyInitialized_;\n    this.filtered_ = filtered_;\n  }\n  /**\r\n   * Returns whether this node was fully initialized with either server data or a complete overwrite by the client\r\n   */\n\n\n  isFullyInitialized() {\n    return this.fullyInitialized_;\n  }\n  /**\r\n   * Returns whether this node is potentially missing children due to a filter applied to the node\r\n   */\n\n\n  isFiltered() {\n    return this.filtered_;\n  }\n\n  isCompleteForPath(path) {\n    if (pathIsEmpty(path)) {\n      return this.isFullyInitialized() && !this.filtered_;\n    }\n\n    const childKey = pathGetFront(path);\n    return this.isCompleteForChild(childKey);\n  }\n\n  isCompleteForChild(key) {\n    return this.isFullyInitialized() && !this.filtered_ || this.node_.hasChild(key);\n  }\n\n  getNode() {\n    return this.node_;\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * An EventGenerator is used to convert \"raw\" changes (Change) as computed by the\r\n * CacheDiffer into actual events (Event) that can be raised.  See generateEventsForChanges()\r\n * for details.\r\n *\r\n */\n\n\nclass EventGenerator {\n  constructor(query_) {\n    this.query_ = query_;\n    this.index_ = this.query_._queryParams.getIndex();\n  }\n\n}\n/**\r\n * Given a set of raw changes (no moved events and prevName not specified yet), and a set of\r\n * EventRegistrations that should be notified of these changes, generate the actual events to be raised.\r\n *\r\n * Notes:\r\n *  - child_moved events will be synthesized at this time for any child_changed events that affect\r\n *    our index.\r\n *  - prevName will be calculated based on the index ordering.\r\n */\n\n\nfunction eventGeneratorGenerateEventsForChanges(eventGenerator, changes, eventCache, eventRegistrations) {\n  const events = [];\n  const moves = [];\n  changes.forEach(change => {\n    if (change.type === \"child_changed\"\n    /* CHILD_CHANGED */\n    && eventGenerator.index_.indexedValueChanged(change.oldSnap, change.snapshotNode)) {\n      moves.push(changeChildMoved(change.childName, change.snapshotNode));\n    }\n  });\n  eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_removed\"\n  /* CHILD_REMOVED */\n  , changes, eventRegistrations, eventCache);\n  eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_added\"\n  /* CHILD_ADDED */\n  , changes, eventRegistrations, eventCache);\n  eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_moved\"\n  /* CHILD_MOVED */\n  , moves, eventRegistrations, eventCache);\n  eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_changed\"\n  /* CHILD_CHANGED */\n  , changes, eventRegistrations, eventCache);\n  eventGeneratorGenerateEventsForType(eventGenerator, events, \"value\"\n  /* VALUE */\n  , changes, eventRegistrations, eventCache);\n  return events;\n}\n/**\r\n * Given changes of a single change type, generate the corresponding events.\r\n */\n\n\nfunction eventGeneratorGenerateEventsForType(eventGenerator, events, eventType, changes, registrations, eventCache) {\n  const filteredChanges = changes.filter(change => change.type === eventType);\n  filteredChanges.sort((a, b) => eventGeneratorCompareChanges(eventGenerator, a, b));\n  filteredChanges.forEach(change => {\n    const materializedChange = eventGeneratorMaterializeSingleChange(eventGenerator, change, eventCache);\n    registrations.forEach(registration => {\n      if (registration.respondsTo(change.type)) {\n        events.push(registration.createEvent(materializedChange, eventGenerator.query_));\n      }\n    });\n  });\n}\n\nfunction eventGeneratorMaterializeSingleChange(eventGenerator, change, eventCache) {\n  if (change.type === 'value' || change.type === 'child_removed') {\n    return change;\n  } else {\n    change.prevName = eventCache.getPredecessorChildName(change.childName, change.snapshotNode, eventGenerator.index_);\n    return change;\n  }\n}\n\nfunction eventGeneratorCompareChanges(eventGenerator, a, b) {\n  if (a.childName == null || b.childName == null) {\n    throw assertionError('Should only compare child_ events.');\n  }\n\n  const aWrapped = new NamedNode(a.childName, a.snapshotNode);\n  const bWrapped = new NamedNode(b.childName, b.snapshotNode);\n  return eventGenerator.index_.compare(aWrapped, bWrapped);\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction newViewCache(eventCache, serverCache) {\n  return {\n    eventCache,\n    serverCache\n  };\n}\n\nfunction viewCacheUpdateEventSnap(viewCache, eventSnap, complete, filtered) {\n  return newViewCache(new CacheNode(eventSnap, complete, filtered), viewCache.serverCache);\n}\n\nfunction viewCacheUpdateServerSnap(viewCache, serverSnap, complete, filtered) {\n  return newViewCache(viewCache.eventCache, new CacheNode(serverSnap, complete, filtered));\n}\n\nfunction viewCacheGetCompleteEventSnap(viewCache) {\n  return viewCache.eventCache.isFullyInitialized() ? viewCache.eventCache.getNode() : null;\n}\n\nfunction viewCacheGetCompleteServerSnap(viewCache) {\n  return viewCache.serverCache.isFullyInitialized() ? viewCache.serverCache.getNode() : null;\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nlet emptyChildrenSingleton;\n/**\r\n * Singleton empty children collection.\r\n *\r\n */\n\nconst EmptyChildren = () => {\n  if (!emptyChildrenSingleton) {\n    emptyChildrenSingleton = new SortedMap(stringCompare);\n  }\n\n  return emptyChildrenSingleton;\n};\n/**\r\n * A tree with immutable elements.\r\n */\n\n\nclass ImmutableTree {\n  constructor(value) {\n    let children = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : EmptyChildren();\n    this.value = value;\n    this.children = children;\n  }\n\n  static fromObject(obj) {\n    let tree = new ImmutableTree(null);\n    each(obj, (childPath, childSnap) => {\n      tree = tree.set(new Path(childPath), childSnap);\n    });\n    return tree;\n  }\n  /**\r\n   * True if the value is empty and there are no children\r\n   */\n\n\n  isEmpty() {\n    return this.value === null && this.children.isEmpty();\n  }\n  /**\r\n   * Given a path and predicate, return the first node and the path to that node\r\n   * where the predicate returns true.\r\n   *\r\n   * TODO Do a perf test -- If we're creating a bunch of `{path: value:}`\r\n   * objects on the way back out, it may be better to pass down a pathSoFar obj.\r\n   *\r\n   * @param relativePath - The remainder of the path\r\n   * @param predicate - The predicate to satisfy to return a node\r\n   */\n\n\n  findRootMostMatchingPathAndValue(relativePath, predicate) {\n    if (this.value != null && predicate(this.value)) {\n      return {\n        path: newEmptyPath(),\n        value: this.value\n      };\n    } else {\n      if (pathIsEmpty(relativePath)) {\n        return null;\n      } else {\n        const front = pathGetFront(relativePath);\n        const child = this.children.get(front);\n\n        if (child !== null) {\n          const childExistingPathAndValue = child.findRootMostMatchingPathAndValue(pathPopFront(relativePath), predicate);\n\n          if (childExistingPathAndValue != null) {\n            const fullPath = pathChild(new Path(front), childExistingPathAndValue.path);\n            return {\n              path: fullPath,\n              value: childExistingPathAndValue.value\n            };\n          } else {\n            return null;\n          }\n        } else {\n          return null;\n        }\n      }\n    }\n  }\n  /**\r\n   * Find, if it exists, the shortest subpath of the given path that points a defined\r\n   * value in the tree\r\n   */\n\n\n  findRootMostValueAndPath(relativePath) {\n    return this.findRootMostMatchingPathAndValue(relativePath, () => true);\n  }\n  /**\r\n   * @returns The subtree at the given path\r\n   */\n\n\n  subtree(relativePath) {\n    if (pathIsEmpty(relativePath)) {\n      return this;\n    } else {\n      const front = pathGetFront(relativePath);\n      const childTree = this.children.get(front);\n\n      if (childTree !== null) {\n        return childTree.subtree(pathPopFront(relativePath));\n      } else {\n        return new ImmutableTree(null);\n      }\n    }\n  }\n  /**\r\n   * Sets a value at the specified path.\r\n   *\r\n   * @param relativePath - Path to set value at.\r\n   * @param toSet - Value to set.\r\n   * @returns Resulting tree.\r\n   */\n\n\n  set(relativePath, toSet) {\n    if (pathIsEmpty(relativePath)) {\n      return new ImmutableTree(toSet, this.children);\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front) || new ImmutableTree(null);\n      const newChild = child.set(pathPopFront(relativePath), toSet);\n      const newChildren = this.children.insert(front, newChild);\n      return new ImmutableTree(this.value, newChildren);\n    }\n  }\n  /**\r\n   * Removes the value at the specified path.\r\n   *\r\n   * @param relativePath - Path to value to remove.\r\n   * @returns Resulting tree.\r\n   */\n\n\n  remove(relativePath) {\n    if (pathIsEmpty(relativePath)) {\n      if (this.children.isEmpty()) {\n        return new ImmutableTree(null);\n      } else {\n        return new ImmutableTree(null, this.children);\n      }\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front);\n\n      if (child) {\n        const newChild = child.remove(pathPopFront(relativePath));\n        let newChildren;\n\n        if (newChild.isEmpty()) {\n          newChildren = this.children.remove(front);\n        } else {\n          newChildren = this.children.insert(front, newChild);\n        }\n\n        if (this.value === null && newChildren.isEmpty()) {\n          return new ImmutableTree(null);\n        } else {\n          return new ImmutableTree(this.value, newChildren);\n        }\n      } else {\n        return this;\n      }\n    }\n  }\n  /**\r\n   * Gets a value from the tree.\r\n   *\r\n   * @param relativePath - Path to get value for.\r\n   * @returns Value at path, or null.\r\n   */\n\n\n  get(relativePath) {\n    if (pathIsEmpty(relativePath)) {\n      return this.value;\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front);\n\n      if (child) {\n        return child.get(pathPopFront(relativePath));\n      } else {\n        return null;\n      }\n    }\n  }\n  /**\r\n   * Replace the subtree at the specified path with the given new tree.\r\n   *\r\n   * @param relativePath - Path to replace subtree for.\r\n   * @param newTree - New tree.\r\n   * @returns Resulting tree.\r\n   */\n\n\n  setTree(relativePath, newTree) {\n    if (pathIsEmpty(relativePath)) {\n      return newTree;\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front) || new ImmutableTree(null);\n      const newChild = child.setTree(pathPopFront(relativePath), newTree);\n      let newChildren;\n\n      if (newChild.isEmpty()) {\n        newChildren = this.children.remove(front);\n      } else {\n        newChildren = this.children.insert(front, newChild);\n      }\n\n      return new ImmutableTree(this.value, newChildren);\n    }\n  }\n  /**\r\n   * Performs a depth first fold on this tree. Transforms a tree into a single\r\n   * value, given a function that operates on the path to a node, an optional\r\n   * current value, and a map of child names to folded subtrees\r\n   */\n\n\n  fold(fn) {\n    return this.fold_(newEmptyPath(), fn);\n  }\n  /**\r\n   * Recursive helper for public-facing fold() method\r\n   */\n\n\n  fold_(pathSoFar, fn) {\n    const accum = {};\n    this.children.inorderTraversal((childKey, childTree) => {\n      accum[childKey] = childTree.fold_(pathChild(pathSoFar, childKey), fn);\n    });\n    return fn(pathSoFar, this.value, accum);\n  }\n  /**\r\n   * Find the first matching value on the given path. Return the result of applying f to it.\r\n   */\n\n\n  findOnPath(path, f) {\n    return this.findOnPath_(path, newEmptyPath(), f);\n  }\n\n  findOnPath_(pathToFollow, pathSoFar, f) {\n    const result = this.value ? f(pathSoFar, this.value) : false;\n\n    if (result) {\n      return result;\n    } else {\n      if (pathIsEmpty(pathToFollow)) {\n        return null;\n      } else {\n        const front = pathGetFront(pathToFollow);\n        const nextChild = this.children.get(front);\n\n        if (nextChild) {\n          return nextChild.findOnPath_(pathPopFront(pathToFollow), pathChild(pathSoFar, front), f);\n        } else {\n          return null;\n        }\n      }\n    }\n  }\n\n  foreachOnPath(path, f) {\n    return this.foreachOnPath_(path, newEmptyPath(), f);\n  }\n\n  foreachOnPath_(pathToFollow, currentRelativePath, f) {\n    if (pathIsEmpty(pathToFollow)) {\n      return this;\n    } else {\n      if (this.value) {\n        f(currentRelativePath, this.value);\n      }\n\n      const front = pathGetFront(pathToFollow);\n      const nextChild = this.children.get(front);\n\n      if (nextChild) {\n        return nextChild.foreachOnPath_(pathPopFront(pathToFollow), pathChild(currentRelativePath, front), f);\n      } else {\n        return new ImmutableTree(null);\n      }\n    }\n  }\n  /**\r\n   * Calls the given function for each node in the tree that has a value.\r\n   *\r\n   * @param f - A function to be called with the path from the root of the tree to\r\n   * a node, and the value at that node. Called in depth-first order.\r\n   */\n\n\n  foreach(f) {\n    this.foreach_(newEmptyPath(), f);\n  }\n\n  foreach_(currentRelativePath, f) {\n    this.children.inorderTraversal((childName, childTree) => {\n      childTree.foreach_(pathChild(currentRelativePath, childName), f);\n    });\n\n    if (this.value) {\n      f(currentRelativePath, this.value);\n    }\n  }\n\n  foreachChild(f) {\n    this.children.inorderTraversal((childName, childTree) => {\n      if (childTree.value) {\n        f(childName, childTree.value);\n      }\n    });\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * This class holds a collection of writes that can be applied to nodes in unison. It abstracts away the logic with\r\n * dealing with priority writes and multiple nested writes. At any given path there is only allowed to be one write\r\n * modifying that path. Any write to an existing path or shadowing an existing path will modify that existing write\r\n * to reflect the write added.\r\n */\n\n\nclass CompoundWrite {\n  constructor(writeTree_) {\n    this.writeTree_ = writeTree_;\n  }\n\n  static empty() {\n    return new CompoundWrite(new ImmutableTree(null));\n  }\n\n}\n\nfunction compoundWriteAddWrite(compoundWrite, path, node) {\n  if (pathIsEmpty(path)) {\n    return new CompoundWrite(new ImmutableTree(node));\n  } else {\n    const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\n\n    if (rootmost != null) {\n      const rootMostPath = rootmost.path;\n      let value = rootmost.value;\n      const relativePath = newRelativePath(rootMostPath, path);\n      value = value.updateChild(relativePath, node);\n      return new CompoundWrite(compoundWrite.writeTree_.set(rootMostPath, value));\n    } else {\n      const subtree = new ImmutableTree(node);\n      const newWriteTree = compoundWrite.writeTree_.setTree(path, subtree);\n      return new CompoundWrite(newWriteTree);\n    }\n  }\n}\n\nfunction compoundWriteAddWrites(compoundWrite, path, updates) {\n  let newWrite = compoundWrite;\n  each(updates, (childKey, node) => {\n    newWrite = compoundWriteAddWrite(newWrite, pathChild(path, childKey), node);\n  });\n  return newWrite;\n}\n/**\r\n * Will remove a write at the given path and deeper paths. This will <em>not</em> modify a write at a higher\r\n * location, which must be removed by calling this method with that path.\r\n *\r\n * @param compoundWrite - The CompoundWrite to remove.\r\n * @param path - The path at which a write and all deeper writes should be removed\r\n * @returns The new CompoundWrite with the removed path\r\n */\n\n\nfunction compoundWriteRemoveWrite(compoundWrite, path) {\n  if (pathIsEmpty(path)) {\n    return CompoundWrite.empty();\n  } else {\n    const newWriteTree = compoundWrite.writeTree_.setTree(path, new ImmutableTree(null));\n    return new CompoundWrite(newWriteTree);\n  }\n}\n/**\r\n * Returns whether this CompoundWrite will fully overwrite a node at a given location and can therefore be\r\n * considered \"complete\".\r\n *\r\n * @param compoundWrite - The CompoundWrite to check.\r\n * @param path - The path to check for\r\n * @returns Whether there is a complete write at that path\r\n */\n\n\nfunction compoundWriteHasCompleteWrite(compoundWrite, path) {\n  return compoundWriteGetCompleteNode(compoundWrite, path) != null;\n}\n/**\r\n * Returns a node for a path if and only if the node is a \"complete\" overwrite at that path. This will not aggregate\r\n * writes from deeper paths, but will return child nodes from a more shallow path.\r\n *\r\n * @param compoundWrite - The CompoundWrite to get the node from.\r\n * @param path - The path to get a complete write\r\n * @returns The node if complete at that path, or null otherwise.\r\n */\n\n\nfunction compoundWriteGetCompleteNode(compoundWrite, path) {\n  const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\n\n  if (rootmost != null) {\n    return compoundWrite.writeTree_.get(rootmost.path).getChild(newRelativePath(rootmost.path, path));\n  } else {\n    return null;\n  }\n}\n/**\r\n * Returns all children that are guaranteed to be a complete overwrite.\r\n *\r\n * @param compoundWrite - The CompoundWrite to get children from.\r\n * @returns A list of all complete children.\r\n */\n\n\nfunction compoundWriteGetCompleteChildren(compoundWrite) {\n  const children = [];\n  const node = compoundWrite.writeTree_.value;\n\n  if (node != null) {\n    // If it's a leaf node, it has no children; so nothing to do.\n    if (!node.isLeafNode()) {\n      node.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\n        children.push(new NamedNode(childName, childNode));\n      });\n    }\n  } else {\n    compoundWrite.writeTree_.children.inorderTraversal((childName, childTree) => {\n      if (childTree.value != null) {\n        children.push(new NamedNode(childName, childTree.value));\n      }\n    });\n  }\n\n  return children;\n}\n\nfunction compoundWriteChildCompoundWrite(compoundWrite, path) {\n  if (pathIsEmpty(path)) {\n    return compoundWrite;\n  } else {\n    const shadowingNode = compoundWriteGetCompleteNode(compoundWrite, path);\n\n    if (shadowingNode != null) {\n      return new CompoundWrite(new ImmutableTree(shadowingNode));\n    } else {\n      return new CompoundWrite(compoundWrite.writeTree_.subtree(path));\n    }\n  }\n}\n/**\r\n * Returns true if this CompoundWrite is empty and therefore does not modify any nodes.\r\n * @returns Whether this CompoundWrite is empty\r\n */\n\n\nfunction compoundWriteIsEmpty(compoundWrite) {\n  return compoundWrite.writeTree_.isEmpty();\n}\n/**\r\n * Applies this CompoundWrite to a node. The node is returned with all writes from this CompoundWrite applied to the\r\n * node\r\n * @param node - The node to apply this CompoundWrite to\r\n * @returns The node with all writes applied\r\n */\n\n\nfunction compoundWriteApply(compoundWrite, node) {\n  return applySubtreeWrite(newEmptyPath(), compoundWrite.writeTree_, node);\n}\n\nfunction applySubtreeWrite(relativePath, writeTree, node) {\n  if (writeTree.value != null) {\n    // Since there a write is always a leaf, we're done here\n    return node.updateChild(relativePath, writeTree.value);\n  } else {\n    let priorityWrite = null;\n    writeTree.children.inorderTraversal((childKey, childTree) => {\n      if (childKey === '.priority') {\n        // Apply priorities at the end so we don't update priorities for either empty nodes or forget\n        // to apply priorities to empty nodes that are later filled\n        assert(childTree.value !== null, 'Priority writes must always be leaf nodes');\n        priorityWrite = childTree.value;\n      } else {\n        node = applySubtreeWrite(pathChild(relativePath, childKey), childTree, node);\n      }\n    }); // If there was a priority write, we only apply it if the node is not empty\n\n    if (!node.getChild(relativePath).isEmpty() && priorityWrite !== null) {\n      node = node.updateChild(pathChild(relativePath, '.priority'), priorityWrite);\n    }\n\n    return node;\n  }\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Create a new WriteTreeRef for the given path. For use with a new sync point at the given path.\r\n *\r\n */\n\n\nfunction writeTreeChildWrites(writeTree, path) {\n  return newWriteTreeRef(path, writeTree);\n}\n/**\r\n * Record a new overwrite from user code.\r\n *\r\n * @param visible - This is set to false by some transactions. It should be excluded from event caches\r\n */\n\n\nfunction writeTreeAddOverwrite(writeTree, path, snap, writeId, visible) {\n  assert(writeId > writeTree.lastWriteId, 'Stacking an older write on top of newer ones');\n\n  if (visible === undefined) {\n    visible = true;\n  }\n\n  writeTree.allWrites.push({\n    path,\n    snap,\n    writeId,\n    visible\n  });\n\n  if (visible) {\n    writeTree.visibleWrites = compoundWriteAddWrite(writeTree.visibleWrites, path, snap);\n  }\n\n  writeTree.lastWriteId = writeId;\n}\n/**\r\n * Record a new merge from user code.\r\n */\n\n\nfunction writeTreeAddMerge(writeTree, path, changedChildren, writeId) {\n  assert(writeId > writeTree.lastWriteId, 'Stacking an older merge on top of newer ones');\n  writeTree.allWrites.push({\n    path,\n    children: changedChildren,\n    writeId,\n    visible: true\n  });\n  writeTree.visibleWrites = compoundWriteAddWrites(writeTree.visibleWrites, path, changedChildren);\n  writeTree.lastWriteId = writeId;\n}\n\nfunction writeTreeGetWrite(writeTree, writeId) {\n  for (let i = 0; i < writeTree.allWrites.length; i++) {\n    const record = writeTree.allWrites[i];\n\n    if (record.writeId === writeId) {\n      return record;\n    }\n  }\n\n  return null;\n}\n/**\r\n * Remove a write (either an overwrite or merge) that has been successfully acknowledge by the server. Recalculates\r\n * the tree if necessary.  We return true if it may have been visible, meaning views need to reevaluate.\r\n *\r\n * @returns true if the write may have been visible (meaning we'll need to reevaluate / raise\r\n * events as a result).\r\n */\n\n\nfunction writeTreeRemoveWrite(writeTree, writeId) {\n  // Note: disabling this check. It could be a transaction that preempted another transaction, and thus was applied\n  // out of order.\n  //const validClear = revert || this.allWrites_.length === 0 || writeId <= this.allWrites_[0].writeId;\n  //assert(validClear, \"Either we don't have this write, or it's the first one in the queue\");\n  const idx = writeTree.allWrites.findIndex(s => {\n    return s.writeId === writeId;\n  });\n  assert(idx >= 0, 'removeWrite called with nonexistent writeId.');\n  const writeToRemove = writeTree.allWrites[idx];\n  writeTree.allWrites.splice(idx, 1);\n  let removedWriteWasVisible = writeToRemove.visible;\n  let removedWriteOverlapsWithOtherWrites = false;\n  let i = writeTree.allWrites.length - 1;\n\n  while (removedWriteWasVisible && i >= 0) {\n    const currentWrite = writeTree.allWrites[i];\n\n    if (currentWrite.visible) {\n      if (i >= idx && writeTreeRecordContainsPath_(currentWrite, writeToRemove.path)) {\n        // The removed write was completely shadowed by a subsequent write.\n        removedWriteWasVisible = false;\n      } else if (pathContains(writeToRemove.path, currentWrite.path)) {\n        // Either we're covering some writes or they're covering part of us (depending on which came first).\n        removedWriteOverlapsWithOtherWrites = true;\n      }\n    }\n\n    i--;\n  }\n\n  if (!removedWriteWasVisible) {\n    return false;\n  } else if (removedWriteOverlapsWithOtherWrites) {\n    // There's some shadowing going on. Just rebuild the visible writes from scratch.\n    writeTreeResetTree_(writeTree);\n    return true;\n  } else {\n    // There's no shadowing.  We can safely just remove the write(s) from visibleWrites.\n    if (writeToRemove.snap) {\n      writeTree.visibleWrites = compoundWriteRemoveWrite(writeTree.visibleWrites, writeToRemove.path);\n    } else {\n      const children = writeToRemove.children;\n      each(children, childName => {\n        writeTree.visibleWrites = compoundWriteRemoveWrite(writeTree.visibleWrites, pathChild(writeToRemove.path, childName));\n      });\n    }\n\n    return true;\n  }\n}\n\nfunction writeTreeRecordContainsPath_(writeRecord, path) {\n  if (writeRecord.snap) {\n    return pathContains(writeRecord.path, path);\n  } else {\n    for (const childName in writeRecord.children) {\n      if (writeRecord.children.hasOwnProperty(childName) && pathContains(pathChild(writeRecord.path, childName), path)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n}\n/**\r\n * Re-layer the writes and merges into a tree so we can efficiently calculate event snapshots\r\n */\n\n\nfunction writeTreeResetTree_(writeTree) {\n  writeTree.visibleWrites = writeTreeLayerTree_(writeTree.allWrites, writeTreeDefaultFilter_, newEmptyPath());\n\n  if (writeTree.allWrites.length > 0) {\n    writeTree.lastWriteId = writeTree.allWrites[writeTree.allWrites.length - 1].writeId;\n  } else {\n    writeTree.lastWriteId = -1;\n  }\n}\n/**\r\n * The default filter used when constructing the tree. Keep everything that's visible.\r\n */\n\n\nfunction writeTreeDefaultFilter_(write) {\n  return write.visible;\n}\n/**\r\n * Static method. Given an array of WriteRecords, a filter for which ones to include, and a path, construct the tree of\r\n * event data at that path.\r\n */\n\n\nfunction writeTreeLayerTree_(writes, filter, treeRoot) {\n  let compoundWrite = CompoundWrite.empty();\n\n  for (let i = 0; i < writes.length; ++i) {\n    const write = writes[i]; // Theory, a later set will either:\n    // a) abort a relevant transaction, so no need to worry about excluding it from calculating that transaction\n    // b) not be relevant to a transaction (separate branch), so again will not affect the data for that transaction\n\n    if (filter(write)) {\n      const writePath = write.path;\n      let relativePath;\n\n      if (write.snap) {\n        if (pathContains(treeRoot, writePath)) {\n          relativePath = newRelativePath(treeRoot, writePath);\n          compoundWrite = compoundWriteAddWrite(compoundWrite, relativePath, write.snap);\n        } else if (pathContains(writePath, treeRoot)) {\n          relativePath = newRelativePath(writePath, treeRoot);\n          compoundWrite = compoundWriteAddWrite(compoundWrite, newEmptyPath(), write.snap.getChild(relativePath));\n        } else ;\n      } else if (write.children) {\n        if (pathContains(treeRoot, writePath)) {\n          relativePath = newRelativePath(treeRoot, writePath);\n          compoundWrite = compoundWriteAddWrites(compoundWrite, relativePath, write.children);\n        } else if (pathContains(writePath, treeRoot)) {\n          relativePath = newRelativePath(writePath, treeRoot);\n\n          if (pathIsEmpty(relativePath)) {\n            compoundWrite = compoundWriteAddWrites(compoundWrite, newEmptyPath(), write.children);\n          } else {\n            const child = safeGet(write.children, pathGetFront(relativePath));\n\n            if (child) {\n              // There exists a child in this node that matches the root path\n              const deepNode = child.getChild(pathPopFront(relativePath));\n              compoundWrite = compoundWriteAddWrite(compoundWrite, newEmptyPath(), deepNode);\n            }\n          }\n        } else ;\n      } else {\n        throw assertionError('WriteRecord should have .snap or .children');\n      }\n    }\n  }\n\n  return compoundWrite;\n}\n/**\r\n * Given optional, underlying server data, and an optional set of constraints (exclude some sets, include hidden\r\n * writes), attempt to calculate a complete snapshot for the given path\r\n *\r\n * @param writeIdsToExclude - An optional set to be excluded\r\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\r\n */\n\n\nfunction writeTreeCalcCompleteEventCache(writeTree, treePath, completeServerCache, writeIdsToExclude, includeHiddenWrites) {\n  if (!writeIdsToExclude && !includeHiddenWrites) {\n    const shadowingNode = compoundWriteGetCompleteNode(writeTree.visibleWrites, treePath);\n\n    if (shadowingNode != null) {\n      return shadowingNode;\n    } else {\n      const subMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\n\n      if (compoundWriteIsEmpty(subMerge)) {\n        return completeServerCache;\n      } else if (completeServerCache == null && !compoundWriteHasCompleteWrite(subMerge, newEmptyPath())) {\n        // We wouldn't have a complete snapshot, since there's no underlying data and no complete shadow\n        return null;\n      } else {\n        const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n        return compoundWriteApply(subMerge, layeredCache);\n      }\n    }\n  } else {\n    const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\n\n    if (!includeHiddenWrites && compoundWriteIsEmpty(merge)) {\n      return completeServerCache;\n    } else {\n      // If the server cache is null, and we don't have a complete cache, we need to return null\n      if (!includeHiddenWrites && completeServerCache == null && !compoundWriteHasCompleteWrite(merge, newEmptyPath())) {\n        return null;\n      } else {\n        const filter = function (write) {\n          return (write.visible || includeHiddenWrites) && (!writeIdsToExclude || !~writeIdsToExclude.indexOf(write.writeId)) && (pathContains(write.path, treePath) || pathContains(treePath, write.path));\n        };\n\n        const mergeAtPath = writeTreeLayerTree_(writeTree.allWrites, filter, treePath);\n        const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n        return compoundWriteApply(mergeAtPath, layeredCache);\n      }\n    }\n  }\n}\n/**\r\n * With optional, underlying server data, attempt to return a children node of children that we have complete data for.\r\n * Used when creating new views, to pre-fill their complete event children snapshot.\r\n */\n\n\nfunction writeTreeCalcCompleteEventChildren(writeTree, treePath, completeServerChildren) {\n  let completeChildren = ChildrenNode.EMPTY_NODE;\n  const topLevelSet = compoundWriteGetCompleteNode(writeTree.visibleWrites, treePath);\n\n  if (topLevelSet) {\n    if (!topLevelSet.isLeafNode()) {\n      // we're shadowing everything. Return the children.\n      topLevelSet.forEachChild(PRIORITY_INDEX, (childName, childSnap) => {\n        completeChildren = completeChildren.updateImmediateChild(childName, childSnap);\n      });\n    }\n\n    return completeChildren;\n  } else if (completeServerChildren) {\n    // Layer any children we have on top of this\n    // We know we don't have a top-level set, so just enumerate existing children\n    const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\n    completeServerChildren.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\n      const node = compoundWriteApply(compoundWriteChildCompoundWrite(merge, new Path(childName)), childNode);\n      completeChildren = completeChildren.updateImmediateChild(childName, node);\n    }); // Add any complete children we have from the set\n\n    compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\n      completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);\n    });\n    return completeChildren;\n  } else {\n    // We don't have anything to layer on top of. Layer on any children we have\n    // Note that we can return an empty snap if we have a defined delete\n    const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\n    compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\n      completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);\n    });\n    return completeChildren;\n  }\n}\n/**\r\n * Given that the underlying server data has updated, determine what, if anything, needs to be\r\n * applied to the event cache.\r\n *\r\n * Possibilities:\r\n *\r\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\r\n *\r\n * 2. Some write is completely shadowing. No events to be raised\r\n *\r\n * 3. Is partially shadowed. Events\r\n *\r\n * Either existingEventSnap or existingServerSnap must exist\r\n */\n\n\nfunction writeTreeCalcEventCacheAfterServerOverwrite(writeTree, treePath, childPath, existingEventSnap, existingServerSnap) {\n  assert(existingEventSnap || existingServerSnap, 'Either existingEventSnap or existingServerSnap must exist');\n  const path = pathChild(treePath, childPath);\n\n  if (compoundWriteHasCompleteWrite(writeTree.visibleWrites, path)) {\n    // At this point we can probably guarantee that we're in case 2, meaning no events\n    // May need to check visibility while doing the findRootMostValueAndPath call\n    return null;\n  } else {\n    // No complete shadowing. We're either partially shadowing or not shadowing at all.\n    const childMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, path);\n\n    if (compoundWriteIsEmpty(childMerge)) {\n      // We're not shadowing at all. Case 1\n      return existingServerSnap.getChild(childPath);\n    } else {\n      // This could be more efficient if the serverNode + updates doesn't change the eventSnap\n      // However this is tricky to find out, since user updates don't necessary change the server\n      // snap, e.g. priority updates on empty nodes, or deep deletes. Another special case is if the server\n      // adds nodes, but doesn't change any existing writes. It is therefore not enough to\n      // only check if the updates change the serverNode.\n      // Maybe check if the merge tree contains these special cases and only do a full overwrite in that case?\n      return compoundWriteApply(childMerge, existingServerSnap.getChild(childPath));\n    }\n  }\n}\n/**\r\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\r\n * complete child for this ChildKey.\r\n */\n\n\nfunction writeTreeCalcCompleteChild(writeTree, treePath, childKey, existingServerSnap) {\n  const path = pathChild(treePath, childKey);\n  const shadowingNode = compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\n\n  if (shadowingNode != null) {\n    return shadowingNode;\n  } else {\n    if (existingServerSnap.isCompleteForChild(childKey)) {\n      const childMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, path);\n      return compoundWriteApply(childMerge, existingServerSnap.getNode().getImmediateChild(childKey));\n    } else {\n      return null;\n    }\n  }\n}\n/**\r\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\r\n * a higher path, this will return the child of that write relative to the write and this path.\r\n * Returns null if there is no write at this path.\r\n */\n\n\nfunction writeTreeShadowingWrite(writeTree, path) {\n  return compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\n}\n/**\r\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\r\n * the window, but may now be in the window.\r\n */\n\n\nfunction writeTreeCalcIndexedSlice(writeTree, treePath, completeServerData, startPost, count, reverse, index) {\n  let toIterate;\n  const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\n  const shadowingNode = compoundWriteGetCompleteNode(merge, newEmptyPath());\n\n  if (shadowingNode != null) {\n    toIterate = shadowingNode;\n  } else if (completeServerData != null) {\n    toIterate = compoundWriteApply(merge, completeServerData);\n  } else {\n    // no children to iterate on\n    return [];\n  }\n\n  toIterate = toIterate.withIndex(index);\n\n  if (!toIterate.isEmpty() && !toIterate.isLeafNode()) {\n    const nodes = [];\n    const cmp = index.getCompare();\n    const iter = reverse ? toIterate.getReverseIteratorFrom(startPost, index) : toIterate.getIteratorFrom(startPost, index);\n    let next = iter.getNext();\n\n    while (next && nodes.length < count) {\n      if (cmp(next, startPost) !== 0) {\n        nodes.push(next);\n      }\n\n      next = iter.getNext();\n    }\n\n    return nodes;\n  } else {\n    return [];\n  }\n}\n\nfunction newWriteTree() {\n  return {\n    visibleWrites: CompoundWrite.empty(),\n    allWrites: [],\n    lastWriteId: -1\n  };\n}\n/**\r\n * If possible, returns a complete event cache, using the underlying server data if possible. In addition, can be used\r\n * to get a cache that includes hidden writes, and excludes arbitrary writes. Note that customizing the returned node\r\n * can lead to a more expensive calculation.\r\n *\r\n * @param writeIdsToExclude - Optional writes to exclude.\r\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\r\n */\n\n\nfunction writeTreeRefCalcCompleteEventCache(writeTreeRef, completeServerCache, writeIdsToExclude, includeHiddenWrites) {\n  return writeTreeCalcCompleteEventCache(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerCache, writeIdsToExclude, includeHiddenWrites);\n}\n/**\r\n * If possible, returns a children node containing all of the complete children we have data for. The returned data is a\r\n * mix of the given server data and write data.\r\n *\r\n */\n\n\nfunction writeTreeRefCalcCompleteEventChildren(writeTreeRef, completeServerChildren) {\n  return writeTreeCalcCompleteEventChildren(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerChildren);\n}\n/**\r\n * Given that either the underlying server data has updated or the outstanding writes have updated, determine what,\r\n * if anything, needs to be applied to the event cache.\r\n *\r\n * Possibilities:\r\n *\r\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\r\n *\r\n * 2. Some write is completely shadowing. No events to be raised\r\n *\r\n * 3. Is partially shadowed. Events should be raised\r\n *\r\n * Either existingEventSnap or existingServerSnap must exist, this is validated via an assert\r\n *\r\n *\r\n */\n\n\nfunction writeTreeRefCalcEventCacheAfterServerOverwrite(writeTreeRef, path, existingEventSnap, existingServerSnap) {\n  return writeTreeCalcEventCacheAfterServerOverwrite(writeTreeRef.writeTree, writeTreeRef.treePath, path, existingEventSnap, existingServerSnap);\n}\n/**\r\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\r\n * a higher path, this will return the child of that write relative to the write and this path.\r\n * Returns null if there is no write at this path.\r\n *\r\n */\n\n\nfunction writeTreeRefShadowingWrite(writeTreeRef, path) {\n  return writeTreeShadowingWrite(writeTreeRef.writeTree, pathChild(writeTreeRef.treePath, path));\n}\n/**\r\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\r\n * the window, but may now be in the window\r\n */\n\n\nfunction writeTreeRefCalcIndexedSlice(writeTreeRef, completeServerData, startPost, count, reverse, index) {\n  return writeTreeCalcIndexedSlice(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerData, startPost, count, reverse, index);\n}\n/**\r\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\r\n * complete child for this ChildKey.\r\n */\n\n\nfunction writeTreeRefCalcCompleteChild(writeTreeRef, childKey, existingServerCache) {\n  return writeTreeCalcCompleteChild(writeTreeRef.writeTree, writeTreeRef.treePath, childKey, existingServerCache);\n}\n/**\r\n * Return a WriteTreeRef for a child.\r\n */\n\n\nfunction writeTreeRefChild(writeTreeRef, childName) {\n  return newWriteTreeRef(pathChild(writeTreeRef.treePath, childName), writeTreeRef.writeTree);\n}\n\nfunction newWriteTreeRef(path, writeTree) {\n  return {\n    treePath: path,\n    writeTree\n  };\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nclass ChildChangeAccumulator {\n  constructor() {\n    this.changeMap = new Map();\n  }\n\n  trackChildChange(change) {\n    const type = change.type;\n    const childKey = change.childName;\n    assert(type === \"child_added\"\n    /* CHILD_ADDED */\n    || type === \"child_changed\"\n    /* CHILD_CHANGED */\n    || type === \"child_removed\"\n    /* CHILD_REMOVED */\n    , 'Only child changes supported for tracking');\n    assert(childKey !== '.priority', 'Only non-priority child changes can be tracked.');\n    const oldChange = this.changeMap.get(childKey);\n\n    if (oldChange) {\n      const oldType = oldChange.type;\n\n      if (type === \"child_added\"\n      /* CHILD_ADDED */\n      && oldType === \"child_removed\"\n      /* CHILD_REMOVED */\n      ) {\n        this.changeMap.set(childKey, changeChildChanged(childKey, change.snapshotNode, oldChange.snapshotNode));\n      } else if (type === \"child_removed\"\n      /* CHILD_REMOVED */\n      && oldType === \"child_added\"\n      /* CHILD_ADDED */\n      ) {\n        this.changeMap.delete(childKey);\n      } else if (type === \"child_removed\"\n      /* CHILD_REMOVED */\n      && oldType === \"child_changed\"\n      /* CHILD_CHANGED */\n      ) {\n        this.changeMap.set(childKey, changeChildRemoved(childKey, oldChange.oldSnap));\n      } else if (type === \"child_changed\"\n      /* CHILD_CHANGED */\n      && oldType === \"child_added\"\n      /* CHILD_ADDED */\n      ) {\n        this.changeMap.set(childKey, changeChildAdded(childKey, change.snapshotNode));\n      } else if (type === \"child_changed\"\n      /* CHILD_CHANGED */\n      && oldType === \"child_changed\"\n      /* CHILD_CHANGED */\n      ) {\n        this.changeMap.set(childKey, changeChildChanged(childKey, change.snapshotNode, oldChange.oldSnap));\n      } else {\n        throw assertionError('Illegal combination of changes: ' + change + ' occurred after ' + oldChange);\n      }\n    } else {\n      this.changeMap.set(childKey, change);\n    }\n  }\n\n  getChanges() {\n    return Array.from(this.changeMap.values());\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * An implementation of CompleteChildSource that never returns any additional children\r\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\n\n\nclass NoCompleteChildSource_ {\n  getCompleteChild(childKey) {\n    return null;\n  }\n\n  getChildAfterChild(index, child, reverse) {\n    return null;\n  }\n\n}\n/**\r\n * Singleton instance.\r\n */\n\n\nconst NO_COMPLETE_CHILD_SOURCE = new NoCompleteChildSource_();\n/**\r\n * An implementation of CompleteChildSource that uses a WriteTree in addition to any other server data or\r\n * old event caches available to calculate complete children.\r\n */\n\nclass WriteTreeCompleteChildSource {\n  constructor(writes_, viewCache_) {\n    let optCompleteServerCache_ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    this.writes_ = writes_;\n    this.viewCache_ = viewCache_;\n    this.optCompleteServerCache_ = optCompleteServerCache_;\n  }\n\n  getCompleteChild(childKey) {\n    const node = this.viewCache_.eventCache;\n\n    if (node.isCompleteForChild(childKey)) {\n      return node.getNode().getImmediateChild(childKey);\n    } else {\n      const serverNode = this.optCompleteServerCache_ != null ? new CacheNode(this.optCompleteServerCache_, true, false) : this.viewCache_.serverCache;\n      return writeTreeRefCalcCompleteChild(this.writes_, childKey, serverNode);\n    }\n  }\n\n  getChildAfterChild(index, child, reverse) {\n    const completeServerData = this.optCompleteServerCache_ != null ? this.optCompleteServerCache_ : viewCacheGetCompleteServerSnap(this.viewCache_);\n    const nodes = writeTreeRefCalcIndexedSlice(this.writes_, completeServerData, child, 1, reverse, index);\n\n    if (nodes.length === 0) {\n      return null;\n    } else {\n      return nodes[0];\n    }\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction newViewProcessor(filter) {\n  return {\n    filter\n  };\n}\n\nfunction viewProcessorAssertIndexed(viewProcessor, viewCache) {\n  assert(viewCache.eventCache.getNode().isIndexed(viewProcessor.filter.getIndex()), 'Event snap not indexed');\n  assert(viewCache.serverCache.getNode().isIndexed(viewProcessor.filter.getIndex()), 'Server snap not indexed');\n}\n\nfunction viewProcessorApplyOperation(viewProcessor, oldViewCache, operation, writesCache, completeCache) {\n  const accumulator = new ChildChangeAccumulator();\n  let newViewCache, filterServerNode;\n\n  if (operation.type === OperationType.OVERWRITE) {\n    const overwrite = operation;\n\n    if (overwrite.source.fromUser) {\n      newViewCache = viewProcessorApplyUserOverwrite(viewProcessor, oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, accumulator);\n    } else {\n      assert(overwrite.source.fromServer, 'Unknown source.'); // We filter the node if it's a tagged update or the node has been previously filtered  and the\n      // update is not at the root in which case it is ok (and necessary) to mark the node unfiltered\n      // again\n\n      filterServerNode = overwrite.source.tagged || oldViewCache.serverCache.isFiltered() && !pathIsEmpty(overwrite.path);\n      newViewCache = viewProcessorApplyServerOverwrite(viewProcessor, oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, filterServerNode, accumulator);\n    }\n  } else if (operation.type === OperationType.MERGE) {\n    const merge = operation;\n\n    if (merge.source.fromUser) {\n      newViewCache = viewProcessorApplyUserMerge(viewProcessor, oldViewCache, merge.path, merge.children, writesCache, completeCache, accumulator);\n    } else {\n      assert(merge.source.fromServer, 'Unknown source.'); // We filter the node if it's a tagged update or the node has been previously filtered\n\n      filterServerNode = merge.source.tagged || oldViewCache.serverCache.isFiltered();\n      newViewCache = viewProcessorApplyServerMerge(viewProcessor, oldViewCache, merge.path, merge.children, writesCache, completeCache, filterServerNode, accumulator);\n    }\n  } else if (operation.type === OperationType.ACK_USER_WRITE) {\n    const ackUserWrite = operation;\n\n    if (!ackUserWrite.revert) {\n      newViewCache = viewProcessorAckUserWrite(viewProcessor, oldViewCache, ackUserWrite.path, ackUserWrite.affectedTree, writesCache, completeCache, accumulator);\n    } else {\n      newViewCache = viewProcessorRevertUserWrite(viewProcessor, oldViewCache, ackUserWrite.path, writesCache, completeCache, accumulator);\n    }\n  } else if (operation.type === OperationType.LISTEN_COMPLETE) {\n    newViewCache = viewProcessorListenComplete(viewProcessor, oldViewCache, operation.path, writesCache, accumulator);\n  } else {\n    throw assertionError('Unknown operation type: ' + operation.type);\n  }\n\n  const changes = accumulator.getChanges();\n  viewProcessorMaybeAddValueEvent(oldViewCache, newViewCache, changes);\n  return {\n    viewCache: newViewCache,\n    changes\n  };\n}\n\nfunction viewProcessorMaybeAddValueEvent(oldViewCache, newViewCache, accumulator) {\n  const eventSnap = newViewCache.eventCache;\n\n  if (eventSnap.isFullyInitialized()) {\n    const isLeafOrEmpty = eventSnap.getNode().isLeafNode() || eventSnap.getNode().isEmpty();\n    const oldCompleteSnap = viewCacheGetCompleteEventSnap(oldViewCache);\n\n    if (accumulator.length > 0 || !oldViewCache.eventCache.isFullyInitialized() || isLeafOrEmpty && !eventSnap.getNode().equals(oldCompleteSnap) || !eventSnap.getNode().getPriority().equals(oldCompleteSnap.getPriority())) {\n      accumulator.push(changeValue(viewCacheGetCompleteEventSnap(newViewCache)));\n    }\n  }\n}\n\nfunction viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, viewCache, changePath, writesCache, source, accumulator) {\n  const oldEventSnap = viewCache.eventCache;\n\n  if (writeTreeRefShadowingWrite(writesCache, changePath) != null) {\n    // we have a shadowing write, ignore changes\n    return viewCache;\n  } else {\n    let newEventCache, serverNode;\n\n    if (pathIsEmpty(changePath)) {\n      // TODO: figure out how this plays with \"sliding ack windows\"\n      assert(viewCache.serverCache.isFullyInitialized(), 'If change path is empty, we must have complete server data');\n\n      if (viewCache.serverCache.isFiltered()) {\n        // We need to special case this, because we need to only apply writes to complete children, or\n        // we might end up raising events for incomplete children. If the server data is filtered deep\n        // writes cannot be guaranteed to be complete\n        const serverCache = viewCacheGetCompleteServerSnap(viewCache);\n        const completeChildren = serverCache instanceof ChildrenNode ? serverCache : ChildrenNode.EMPTY_NODE;\n        const completeEventChildren = writeTreeRefCalcCompleteEventChildren(writesCache, completeChildren);\n        newEventCache = viewProcessor.filter.updateFullNode(viewCache.eventCache.getNode(), completeEventChildren, accumulator);\n      } else {\n        const completeNode = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));\n        newEventCache = viewProcessor.filter.updateFullNode(viewCache.eventCache.getNode(), completeNode, accumulator);\n      }\n    } else {\n      const childKey = pathGetFront(changePath);\n\n      if (childKey === '.priority') {\n        assert(pathGetLength(changePath) === 1, \"Can't have a priority with additional path components\");\n        const oldEventNode = oldEventSnap.getNode();\n        serverNode = viewCache.serverCache.getNode(); // we might have overwrites for this priority\n\n        const updatedPriority = writeTreeRefCalcEventCacheAfterServerOverwrite(writesCache, changePath, oldEventNode, serverNode);\n\n        if (updatedPriority != null) {\n          newEventCache = viewProcessor.filter.updatePriority(oldEventNode, updatedPriority);\n        } else {\n          // priority didn't change, keep old node\n          newEventCache = oldEventSnap.getNode();\n        }\n      } else {\n        const childChangePath = pathPopFront(changePath); // update child\n\n        let newEventChild;\n\n        if (oldEventSnap.isCompleteForChild(childKey)) {\n          serverNode = viewCache.serverCache.getNode();\n          const eventChildUpdate = writeTreeRefCalcEventCacheAfterServerOverwrite(writesCache, changePath, oldEventSnap.getNode(), serverNode);\n\n          if (eventChildUpdate != null) {\n            newEventChild = oldEventSnap.getNode().getImmediateChild(childKey).updateChild(childChangePath, eventChildUpdate);\n          } else {\n            // Nothing changed, just keep the old child\n            newEventChild = oldEventSnap.getNode().getImmediateChild(childKey);\n          }\n        } else {\n          newEventChild = writeTreeRefCalcCompleteChild(writesCache, childKey, viewCache.serverCache);\n        }\n\n        if (newEventChild != null) {\n          newEventCache = viewProcessor.filter.updateChild(oldEventSnap.getNode(), childKey, newEventChild, childChangePath, source, accumulator);\n        } else {\n          // no complete child available or no change\n          newEventCache = oldEventSnap.getNode();\n        }\n      }\n    }\n\n    return viewCacheUpdateEventSnap(viewCache, newEventCache, oldEventSnap.isFullyInitialized() || pathIsEmpty(changePath), viewProcessor.filter.filtersNodes());\n  }\n}\n\nfunction viewProcessorApplyServerOverwrite(viewProcessor, oldViewCache, changePath, changedSnap, writesCache, completeCache, filterServerNode, accumulator) {\n  const oldServerSnap = oldViewCache.serverCache;\n  let newServerCache;\n  const serverFilter = filterServerNode ? viewProcessor.filter : viewProcessor.filter.getIndexedFilter();\n\n  if (pathIsEmpty(changePath)) {\n    newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), changedSnap, null);\n  } else if (serverFilter.filtersNodes() && !oldServerSnap.isFiltered()) {\n    // we want to filter the server node, but we didn't filter the server node yet, so simulate a full update\n    const newServerNode = oldServerSnap.getNode().updateChild(changePath, changedSnap);\n    newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), newServerNode, null);\n  } else {\n    const childKey = pathGetFront(changePath);\n\n    if (!oldServerSnap.isCompleteForPath(changePath) && pathGetLength(changePath) > 1) {\n      // We don't update incomplete nodes with updates intended for other listeners\n      return oldViewCache;\n    }\n\n    const childChangePath = pathPopFront(changePath);\n    const childNode = oldServerSnap.getNode().getImmediateChild(childKey);\n    const newChildNode = childNode.updateChild(childChangePath, changedSnap);\n\n    if (childKey === '.priority') {\n      newServerCache = serverFilter.updatePriority(oldServerSnap.getNode(), newChildNode);\n    } else {\n      newServerCache = serverFilter.updateChild(oldServerSnap.getNode(), childKey, newChildNode, childChangePath, NO_COMPLETE_CHILD_SOURCE, null);\n    }\n  }\n\n  const newViewCache = viewCacheUpdateServerSnap(oldViewCache, newServerCache, oldServerSnap.isFullyInitialized() || pathIsEmpty(changePath), serverFilter.filtersNodes());\n  const source = new WriteTreeCompleteChildSource(writesCache, newViewCache, completeCache);\n  return viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, newViewCache, changePath, writesCache, source, accumulator);\n}\n\nfunction viewProcessorApplyUserOverwrite(viewProcessor, oldViewCache, changePath, changedSnap, writesCache, completeCache, accumulator) {\n  const oldEventSnap = oldViewCache.eventCache;\n  let newViewCache, newEventCache;\n  const source = new WriteTreeCompleteChildSource(writesCache, oldViewCache, completeCache);\n\n  if (pathIsEmpty(changePath)) {\n    newEventCache = viewProcessor.filter.updateFullNode(oldViewCache.eventCache.getNode(), changedSnap, accumulator);\n    newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventCache, true, viewProcessor.filter.filtersNodes());\n  } else {\n    const childKey = pathGetFront(changePath);\n\n    if (childKey === '.priority') {\n      newEventCache = viewProcessor.filter.updatePriority(oldViewCache.eventCache.getNode(), changedSnap);\n      newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventCache, oldEventSnap.isFullyInitialized(), oldEventSnap.isFiltered());\n    } else {\n      const childChangePath = pathPopFront(changePath);\n      const oldChild = oldEventSnap.getNode().getImmediateChild(childKey);\n      let newChild;\n\n      if (pathIsEmpty(childChangePath)) {\n        // Child overwrite, we can replace the child\n        newChild = changedSnap;\n      } else {\n        const childNode = source.getCompleteChild(childKey);\n\n        if (childNode != null) {\n          if (pathGetBack(childChangePath) === '.priority' && childNode.getChild(pathParent(childChangePath)).isEmpty()) {\n            // This is a priority update on an empty node. If this node exists on the server, the\n            // server will send down the priority in the update, so ignore for now\n            newChild = childNode;\n          } else {\n            newChild = childNode.updateChild(childChangePath, changedSnap);\n          }\n        } else {\n          // There is no complete child node available\n          newChild = ChildrenNode.EMPTY_NODE;\n        }\n      }\n\n      if (!oldChild.equals(newChild)) {\n        const newEventSnap = viewProcessor.filter.updateChild(oldEventSnap.getNode(), childKey, newChild, childChangePath, source, accumulator);\n        newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventSnap, oldEventSnap.isFullyInitialized(), viewProcessor.filter.filtersNodes());\n      } else {\n        newViewCache = oldViewCache;\n      }\n    }\n  }\n\n  return newViewCache;\n}\n\nfunction viewProcessorCacheHasChild(viewCache, childKey) {\n  return viewCache.eventCache.isCompleteForChild(childKey);\n}\n\nfunction viewProcessorApplyUserMerge(viewProcessor, viewCache, path, changedChildren, writesCache, serverCache, accumulator) {\n  // HACK: In the case of a limit query, there may be some changes that bump things out of the\n  // window leaving room for new items.  It's important we process these changes first, so we\n  // iterate the changes twice, first processing any that affect items currently in view.\n  // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n  // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n  // not the other.\n  let curViewCache = viewCache;\n  changedChildren.foreach((relativePath, childNode) => {\n    const writePath = pathChild(path, relativePath);\n\n    if (viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\n      curViewCache = viewProcessorApplyUserOverwrite(viewProcessor, curViewCache, writePath, childNode, writesCache, serverCache, accumulator);\n    }\n  });\n  changedChildren.foreach((relativePath, childNode) => {\n    const writePath = pathChild(path, relativePath);\n\n    if (!viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\n      curViewCache = viewProcessorApplyUserOverwrite(viewProcessor, curViewCache, writePath, childNode, writesCache, serverCache, accumulator);\n    }\n  });\n  return curViewCache;\n}\n\nfunction viewProcessorApplyMerge(viewProcessor, node, merge) {\n  merge.foreach((relativePath, childNode) => {\n    node = node.updateChild(relativePath, childNode);\n  });\n  return node;\n}\n\nfunction viewProcessorApplyServerMerge(viewProcessor, viewCache, path, changedChildren, writesCache, serverCache, filterServerNode, accumulator) {\n  // If we don't have a cache yet, this merge was intended for a previously listen in the same location. Ignore it and\n  // wait for the complete data update coming soon.\n  if (viewCache.serverCache.getNode().isEmpty() && !viewCache.serverCache.isFullyInitialized()) {\n    return viewCache;\n  } // HACK: In the case of a limit query, there may be some changes that bump things out of the\n  // window leaving room for new items.  It's important we process these changes first, so we\n  // iterate the changes twice, first processing any that affect items currently in view.\n  // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n  // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n  // not the other.\n\n\n  let curViewCache = viewCache;\n  let viewMergeTree;\n\n  if (pathIsEmpty(path)) {\n    viewMergeTree = changedChildren;\n  } else {\n    viewMergeTree = new ImmutableTree(null).setTree(path, changedChildren);\n  }\n\n  const serverNode = viewCache.serverCache.getNode();\n  viewMergeTree.children.inorderTraversal((childKey, childTree) => {\n    if (serverNode.hasChild(childKey)) {\n      const serverChild = viewCache.serverCache.getNode().getImmediateChild(childKey);\n      const newChild = viewProcessorApplyMerge(viewProcessor, serverChild, childTree);\n      curViewCache = viewProcessorApplyServerOverwrite(viewProcessor, curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);\n    }\n  });\n  viewMergeTree.children.inorderTraversal((childKey, childMergeTree) => {\n    const isUnknownDeepMerge = !viewCache.serverCache.isCompleteForChild(childKey) && childMergeTree.value === undefined;\n\n    if (!serverNode.hasChild(childKey) && !isUnknownDeepMerge) {\n      const serverChild = viewCache.serverCache.getNode().getImmediateChild(childKey);\n      const newChild = viewProcessorApplyMerge(viewProcessor, serverChild, childMergeTree);\n      curViewCache = viewProcessorApplyServerOverwrite(viewProcessor, curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);\n    }\n  });\n  return curViewCache;\n}\n\nfunction viewProcessorAckUserWrite(viewProcessor, viewCache, ackPath, affectedTree, writesCache, completeCache, accumulator) {\n  if (writeTreeRefShadowingWrite(writesCache, ackPath) != null) {\n    return viewCache;\n  } // Only filter server node if it is currently filtered\n\n\n  const filterServerNode = viewCache.serverCache.isFiltered(); // Essentially we'll just get our existing server cache for the affected paths and re-apply it as a server update\n  // now that it won't be shadowed.\n\n  const serverCache = viewCache.serverCache;\n\n  if (affectedTree.value != null) {\n    // This is an overwrite.\n    if (pathIsEmpty(ackPath) && serverCache.isFullyInitialized() || serverCache.isCompleteForPath(ackPath)) {\n      return viewProcessorApplyServerOverwrite(viewProcessor, viewCache, ackPath, serverCache.getNode().getChild(ackPath), writesCache, completeCache, filterServerNode, accumulator);\n    } else if (pathIsEmpty(ackPath)) {\n      // This is a goofy edge case where we are acking data at this location but don't have full data.  We\n      // should just re-apply whatever we have in our cache as a merge.\n      let changedChildren = new ImmutableTree(null);\n      serverCache.getNode().forEachChild(KEY_INDEX, (name, node) => {\n        changedChildren = changedChildren.set(new Path(name), node);\n      });\n      return viewProcessorApplyServerMerge(viewProcessor, viewCache, ackPath, changedChildren, writesCache, completeCache, filterServerNode, accumulator);\n    } else {\n      return viewCache;\n    }\n  } else {\n    // This is a merge.\n    let changedChildren = new ImmutableTree(null);\n    affectedTree.foreach((mergePath, value) => {\n      const serverCachePath = pathChild(ackPath, mergePath);\n\n      if (serverCache.isCompleteForPath(serverCachePath)) {\n        changedChildren = changedChildren.set(mergePath, serverCache.getNode().getChild(serverCachePath));\n      }\n    });\n    return viewProcessorApplyServerMerge(viewProcessor, viewCache, ackPath, changedChildren, writesCache, completeCache, filterServerNode, accumulator);\n  }\n}\n\nfunction viewProcessorListenComplete(viewProcessor, viewCache, path, writesCache, accumulator) {\n  const oldServerNode = viewCache.serverCache;\n  const newViewCache = viewCacheUpdateServerSnap(viewCache, oldServerNode.getNode(), oldServerNode.isFullyInitialized() || pathIsEmpty(path), oldServerNode.isFiltered());\n  return viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, newViewCache, path, writesCache, NO_COMPLETE_CHILD_SOURCE, accumulator);\n}\n\nfunction viewProcessorRevertUserWrite(viewProcessor, viewCache, path, writesCache, completeServerCache, accumulator) {\n  let complete;\n\n  if (writeTreeRefShadowingWrite(writesCache, path) != null) {\n    return viewCache;\n  } else {\n    const source = new WriteTreeCompleteChildSource(writesCache, viewCache, completeServerCache);\n    const oldEventCache = viewCache.eventCache.getNode();\n    let newEventCache;\n\n    if (pathIsEmpty(path) || pathGetFront(path) === '.priority') {\n      let newNode;\n\n      if (viewCache.serverCache.isFullyInitialized()) {\n        newNode = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));\n      } else {\n        const serverChildren = viewCache.serverCache.getNode();\n        assert(serverChildren instanceof ChildrenNode, 'serverChildren would be complete if leaf node');\n        newNode = writeTreeRefCalcCompleteEventChildren(writesCache, serverChildren);\n      }\n\n      newNode = newNode;\n      newEventCache = viewProcessor.filter.updateFullNode(oldEventCache, newNode, accumulator);\n    } else {\n      const childKey = pathGetFront(path);\n      let newChild = writeTreeRefCalcCompleteChild(writesCache, childKey, viewCache.serverCache);\n\n      if (newChild == null && viewCache.serverCache.isCompleteForChild(childKey)) {\n        newChild = oldEventCache.getImmediateChild(childKey);\n      }\n\n      if (newChild != null) {\n        newEventCache = viewProcessor.filter.updateChild(oldEventCache, childKey, newChild, pathPopFront(path), source, accumulator);\n      } else if (viewCache.eventCache.getNode().hasChild(childKey)) {\n        // No complete child available, delete the existing one, if any\n        newEventCache = viewProcessor.filter.updateChild(oldEventCache, childKey, ChildrenNode.EMPTY_NODE, pathPopFront(path), source, accumulator);\n      } else {\n        newEventCache = oldEventCache;\n      }\n\n      if (newEventCache.isEmpty() && viewCache.serverCache.isFullyInitialized()) {\n        // We might have reverted all child writes. Maybe the old event was a leaf node\n        complete = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));\n\n        if (complete.isLeafNode()) {\n          newEventCache = viewProcessor.filter.updateFullNode(newEventCache, complete, accumulator);\n        }\n      }\n    }\n\n    complete = viewCache.serverCache.isFullyInitialized() || writeTreeRefShadowingWrite(writesCache, newEmptyPath()) != null;\n    return viewCacheUpdateEventSnap(viewCache, newEventCache, complete, viewProcessor.filter.filtersNodes());\n  }\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * A view represents a specific location and query that has 1 or more event registrations.\r\n *\r\n * It does several things:\r\n *  - Maintains the list of event registrations for this location/query.\r\n *  - Maintains a cache of the data visible for this location/query.\r\n *  - Applies new operations (via applyOperation), updates the cache, and based on the event\r\n *    registrations returns the set of events to be raised.\r\n */\n\n\nclass View {\n  constructor(query_, initialViewCache) {\n    this.query_ = query_;\n    this.eventRegistrations_ = [];\n    const params = this.query_._queryParams;\n    const indexFilter = new IndexedFilter(params.getIndex());\n    const filter = queryParamsGetNodeFilter(params);\n    this.processor_ = newViewProcessor(filter);\n    const initialServerCache = initialViewCache.serverCache;\n    const initialEventCache = initialViewCache.eventCache; // Don't filter server node with other filter than index, wait for tagged listen\n\n    const serverSnap = indexFilter.updateFullNode(ChildrenNode.EMPTY_NODE, initialServerCache.getNode(), null);\n    const eventSnap = filter.updateFullNode(ChildrenNode.EMPTY_NODE, initialEventCache.getNode(), null);\n    const newServerCache = new CacheNode(serverSnap, initialServerCache.isFullyInitialized(), indexFilter.filtersNodes());\n    const newEventCache = new CacheNode(eventSnap, initialEventCache.isFullyInitialized(), filter.filtersNodes());\n    this.viewCache_ = newViewCache(newEventCache, newServerCache);\n    this.eventGenerator_ = new EventGenerator(this.query_);\n  }\n\n  get query() {\n    return this.query_;\n  }\n\n}\n\nfunction viewGetServerCache(view) {\n  return view.viewCache_.serverCache.getNode();\n}\n\nfunction viewGetCompleteNode(view) {\n  return viewCacheGetCompleteEventSnap(view.viewCache_);\n}\n\nfunction viewGetCompleteServerCache(view, path) {\n  const cache = viewCacheGetCompleteServerSnap(view.viewCache_);\n\n  if (cache) {\n    // If this isn't a \"loadsAllData\" view, then cache isn't actually a complete cache and\n    // we need to see if it contains the child we're interested in.\n    if (view.query._queryParams.loadsAllData() || !pathIsEmpty(path) && !cache.getImmediateChild(pathGetFront(path)).isEmpty()) {\n      return cache.getChild(path);\n    }\n  }\n\n  return null;\n}\n\nfunction viewIsEmpty(view) {\n  return view.eventRegistrations_.length === 0;\n}\n\nfunction viewAddEventRegistration(view, eventRegistration) {\n  view.eventRegistrations_.push(eventRegistration);\n}\n/**\r\n * @param eventRegistration - If null, remove all callbacks.\r\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\r\n * @returns Cancel events, if cancelError was provided.\r\n */\n\n\nfunction viewRemoveEventRegistration(view, eventRegistration, cancelError) {\n  const cancelEvents = [];\n\n  if (cancelError) {\n    assert(eventRegistration == null, 'A cancel should cancel all event registrations.');\n    const path = view.query._path;\n    view.eventRegistrations_.forEach(registration => {\n      const maybeEvent = registration.createCancelEvent(cancelError, path);\n\n      if (maybeEvent) {\n        cancelEvents.push(maybeEvent);\n      }\n    });\n  }\n\n  if (eventRegistration) {\n    let remaining = [];\n\n    for (let i = 0; i < view.eventRegistrations_.length; ++i) {\n      const existing = view.eventRegistrations_[i];\n\n      if (!existing.matches(eventRegistration)) {\n        remaining.push(existing);\n      } else if (eventRegistration.hasAnyCallback()) {\n        // We're removing just this one\n        remaining = remaining.concat(view.eventRegistrations_.slice(i + 1));\n        break;\n      }\n    }\n\n    view.eventRegistrations_ = remaining;\n  } else {\n    view.eventRegistrations_ = [];\n  }\n\n  return cancelEvents;\n}\n/**\r\n * Applies the given Operation, updates our cache, and returns the appropriate events.\r\n */\n\n\nfunction viewApplyOperation(view, operation, writesCache, completeServerCache) {\n  if (operation.type === OperationType.MERGE && operation.source.queryId !== null) {\n    assert(viewCacheGetCompleteServerSnap(view.viewCache_), 'We should always have a full cache before handling merges');\n    assert(viewCacheGetCompleteEventSnap(view.viewCache_), 'Missing event cache, even though we have a server cache');\n  }\n\n  const oldViewCache = view.viewCache_;\n  const result = viewProcessorApplyOperation(view.processor_, oldViewCache, operation, writesCache, completeServerCache);\n  viewProcessorAssertIndexed(view.processor_, result.viewCache);\n  assert(result.viewCache.serverCache.isFullyInitialized() || !oldViewCache.serverCache.isFullyInitialized(), 'Once a server snap is complete, it should never go back');\n  view.viewCache_ = result.viewCache;\n  return viewGenerateEventsForChanges_(view, result.changes, result.viewCache.eventCache.getNode(), null);\n}\n\nfunction viewGetInitialEvents(view, registration) {\n  const eventSnap = view.viewCache_.eventCache;\n  const initialChanges = [];\n\n  if (!eventSnap.getNode().isLeafNode()) {\n    const eventNode = eventSnap.getNode();\n    eventNode.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n      initialChanges.push(changeChildAdded(key, childNode));\n    });\n  }\n\n  if (eventSnap.isFullyInitialized()) {\n    initialChanges.push(changeValue(eventSnap.getNode()));\n  }\n\n  return viewGenerateEventsForChanges_(view, initialChanges, eventSnap.getNode(), registration);\n}\n\nfunction viewGenerateEventsForChanges_(view, changes, eventCache, eventRegistration) {\n  const registrations = eventRegistration ? [eventRegistration] : view.eventRegistrations_;\n  return eventGeneratorGenerateEventsForChanges(view.eventGenerator_, changes, eventCache, registrations);\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nlet referenceConstructor$1;\n/**\r\n * SyncPoint represents a single location in a SyncTree with 1 or more event registrations, meaning we need to\r\n * maintain 1 or more Views at this location to cache server data and raise appropriate events for server changes\r\n * and user writes (set, transaction, update).\r\n *\r\n * It's responsible for:\r\n *  - Maintaining the set of 1 or more views necessary at this location (a SyncPoint with 0 views should be removed).\r\n *  - Proxying user / server operations to the views as appropriate (i.e. applyServerOverwrite,\r\n *    applyUserOverwrite, etc.)\r\n */\n\nclass SyncPoint {\n  constructor() {\n    /**\r\n     * The Views being tracked at this location in the tree, stored as a map where the key is a\r\n     * queryId and the value is the View for that query.\r\n     *\r\n     * NOTE: This list will be quite small (usually 1, but perhaps 2 or 3; any more is an odd use case).\r\n     */\n    this.views = new Map();\n  }\n\n}\n\nfunction syncPointSetReferenceConstructor(val) {\n  assert(!referenceConstructor$1, '__referenceConstructor has already been defined');\n  referenceConstructor$1 = val;\n}\n\nfunction syncPointGetReferenceConstructor() {\n  assert(referenceConstructor$1, 'Reference.ts has not been loaded');\n  return referenceConstructor$1;\n}\n\nfunction syncPointIsEmpty(syncPoint) {\n  return syncPoint.views.size === 0;\n}\n\nfunction syncPointApplyOperation(syncPoint, operation, writesCache, optCompleteServerCache) {\n  const queryId = operation.source.queryId;\n\n  if (queryId !== null) {\n    const view = syncPoint.views.get(queryId);\n    assert(view != null, 'SyncTree gave us an op for an invalid query.');\n    return viewApplyOperation(view, operation, writesCache, optCompleteServerCache);\n  } else {\n    let events = [];\n\n    for (const view of syncPoint.views.values()) {\n      events = events.concat(viewApplyOperation(view, operation, writesCache, optCompleteServerCache));\n    }\n\n    return events;\n  }\n}\n/**\r\n * Get a view for the specified query.\r\n *\r\n * @param query - The query to return a view for\r\n * @param writesCache\r\n * @param serverCache\r\n * @param serverCacheComplete\r\n * @returns Events to raise.\r\n */\n\n\nfunction syncPointGetView(syncPoint, query, writesCache, serverCache, serverCacheComplete) {\n  const queryId = query._queryIdentifier;\n  const view = syncPoint.views.get(queryId);\n\n  if (!view) {\n    // TODO: make writesCache take flag for complete server node\n    let eventCache = writeTreeRefCalcCompleteEventCache(writesCache, serverCacheComplete ? serverCache : null);\n    let eventCacheComplete = false;\n\n    if (eventCache) {\n      eventCacheComplete = true;\n    } else if (serverCache instanceof ChildrenNode) {\n      eventCache = writeTreeRefCalcCompleteEventChildren(writesCache, serverCache);\n      eventCacheComplete = false;\n    } else {\n      eventCache = ChildrenNode.EMPTY_NODE;\n      eventCacheComplete = false;\n    }\n\n    const viewCache = newViewCache(new CacheNode(eventCache, eventCacheComplete, false), new CacheNode(serverCache, serverCacheComplete, false));\n    return new View(query, viewCache);\n  }\n\n  return view;\n}\n/**\r\n * Add an event callback for the specified query.\r\n *\r\n * @param query\r\n * @param eventRegistration\r\n * @param writesCache\r\n * @param serverCache - Complete server cache, if we have it.\r\n * @param serverCacheComplete\r\n * @returns Events to raise.\r\n */\n\n\nfunction syncPointAddEventRegistration(syncPoint, query, eventRegistration, writesCache, serverCache, serverCacheComplete) {\n  const view = syncPointGetView(syncPoint, query, writesCache, serverCache, serverCacheComplete);\n\n  if (!syncPoint.views.has(query._queryIdentifier)) {\n    syncPoint.views.set(query._queryIdentifier, view);\n  } // This is guaranteed to exist now, we just created anything that was missing\n\n\n  viewAddEventRegistration(view, eventRegistration);\n  return viewGetInitialEvents(view, eventRegistration);\n}\n/**\r\n * Remove event callback(s).  Return cancelEvents if a cancelError is specified.\r\n *\r\n * If query is the default query, we'll check all views for the specified eventRegistration.\r\n * If eventRegistration is null, we'll remove all callbacks for the specified view(s).\r\n *\r\n * @param eventRegistration - If null, remove all callbacks.\r\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\r\n * @returns removed queries and any cancel events\r\n */\n\n\nfunction syncPointRemoveEventRegistration(syncPoint, query, eventRegistration, cancelError) {\n  const queryId = query._queryIdentifier;\n  const removed = [];\n  let cancelEvents = [];\n  const hadCompleteView = syncPointHasCompleteView(syncPoint);\n\n  if (queryId === 'default') {\n    // When you do ref.off(...), we search all views for the registration to remove.\n    for (const [viewQueryId, view] of syncPoint.views.entries()) {\n      cancelEvents = cancelEvents.concat(viewRemoveEventRegistration(view, eventRegistration, cancelError));\n\n      if (viewIsEmpty(view)) {\n        syncPoint.views.delete(viewQueryId); // We'll deal with complete views later.\n\n        if (!view.query._queryParams.loadsAllData()) {\n          removed.push(view.query);\n        }\n      }\n    }\n  } else {\n    // remove the callback from the specific view.\n    const view = syncPoint.views.get(queryId);\n\n    if (view) {\n      cancelEvents = cancelEvents.concat(viewRemoveEventRegistration(view, eventRegistration, cancelError));\n\n      if (viewIsEmpty(view)) {\n        syncPoint.views.delete(queryId); // We'll deal with complete views later.\n\n        if (!view.query._queryParams.loadsAllData()) {\n          removed.push(view.query);\n        }\n      }\n    }\n  }\n\n  if (hadCompleteView && !syncPointHasCompleteView(syncPoint)) {\n    // We removed our last complete view.\n    removed.push(new (syncPointGetReferenceConstructor())(query._repo, query._path));\n  }\n\n  return {\n    removed,\n    events: cancelEvents\n  };\n}\n\nfunction syncPointGetQueryViews(syncPoint) {\n  const result = [];\n\n  for (const view of syncPoint.views.values()) {\n    if (!view.query._queryParams.loadsAllData()) {\n      result.push(view);\n    }\n  }\n\n  return result;\n}\n/**\r\n * @param path - The path to the desired complete snapshot\r\n * @returns A complete cache, if it exists\r\n */\n\n\nfunction syncPointGetCompleteServerCache(syncPoint, path) {\n  let serverCache = null;\n\n  for (const view of syncPoint.views.values()) {\n    serverCache = serverCache || viewGetCompleteServerCache(view, path);\n  }\n\n  return serverCache;\n}\n\nfunction syncPointViewForQuery(syncPoint, query) {\n  const params = query._queryParams;\n\n  if (params.loadsAllData()) {\n    return syncPointGetCompleteView(syncPoint);\n  } else {\n    const queryId = query._queryIdentifier;\n    return syncPoint.views.get(queryId);\n  }\n}\n\nfunction syncPointViewExistsForQuery(syncPoint, query) {\n  return syncPointViewForQuery(syncPoint, query) != null;\n}\n\nfunction syncPointHasCompleteView(syncPoint) {\n  return syncPointGetCompleteView(syncPoint) != null;\n}\n\nfunction syncPointGetCompleteView(syncPoint) {\n  for (const view of syncPoint.views.values()) {\n    if (view.query._queryParams.loadsAllData()) {\n      return view;\n    }\n  }\n\n  return null;\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nlet referenceConstructor;\n\nfunction syncTreeSetReferenceConstructor(val) {\n  assert(!referenceConstructor, '__referenceConstructor has already been defined');\n  referenceConstructor = val;\n}\n\nfunction syncTreeGetReferenceConstructor() {\n  assert(referenceConstructor, 'Reference.ts has not been loaded');\n  return referenceConstructor;\n}\n/**\r\n * Static tracker for next query tag.\r\n */\n\n\nlet syncTreeNextQueryTag_ = 1;\n/**\r\n * SyncTree is the central class for managing event callback registration, data caching, views\r\n * (query processing), and event generation.  There are typically two SyncTree instances for\r\n * each Repo, one for the normal Firebase data, and one for the .info data.\r\n *\r\n * It has a number of responsibilities, including:\r\n *  - Tracking all user event callbacks (registered via addEventRegistration() and removeEventRegistration()).\r\n *  - Applying and caching data changes for user set(), transaction(), and update() calls\r\n *    (applyUserOverwrite(), applyUserMerge()).\r\n *  - Applying and caching data changes for server data changes (applyServerOverwrite(),\r\n *    applyServerMerge()).\r\n *  - Generating user-facing events for server and user changes (all of the apply* methods\r\n *    return the set of events that need to be raised as a result).\r\n *  - Maintaining the appropriate set of server listens to ensure we are always subscribed\r\n *    to the correct set of paths and queries to satisfy the current set of user event\r\n *    callbacks (listens are started/stopped using the provided listenProvider).\r\n *\r\n * NOTE: Although SyncTree tracks event callbacks and calculates events to raise, the actual\r\n * events are returned to the caller rather than raised synchronously.\r\n *\r\n */\n\nclass SyncTree {\n  /**\r\n   * @param listenProvider_ - Used by SyncTree to start / stop listening\r\n   *   to server data.\r\n   */\n  constructor(listenProvider_) {\n    this.listenProvider_ = listenProvider_;\n    /**\r\n     * Tree of SyncPoints.  There's a SyncPoint at any location that has 1 or more views.\r\n     */\n\n    this.syncPointTree_ = new ImmutableTree(null);\n    /**\r\n     * A tree of all pending user writes (user-initiated set()'s, transaction()'s, update()'s, etc.).\r\n     */\n\n    this.pendingWriteTree_ = newWriteTree();\n    this.tagToQueryMap = new Map();\n    this.queryToTagMap = new Map();\n  }\n\n}\n/**\r\n * Apply the data changes for a user-generated set() or transaction() call.\r\n *\r\n * @returns Events to raise.\r\n */\n\n\nfunction syncTreeApplyUserOverwrite(syncTree, path, newData, writeId, visible) {\n  // Record pending write.\n  writeTreeAddOverwrite(syncTree.pendingWriteTree_, path, newData, writeId, visible);\n\n  if (!visible) {\n    return [];\n  } else {\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new Overwrite(newOperationSourceUser(), path, newData));\n  }\n}\n/**\r\n * Apply the data from a user-generated update() call\r\n *\r\n * @returns Events to raise.\r\n */\n\n\nfunction syncTreeApplyUserMerge(syncTree, path, changedChildren, writeId) {\n  // Record pending merge.\n  writeTreeAddMerge(syncTree.pendingWriteTree_, path, changedChildren, writeId);\n  const changeTree = ImmutableTree.fromObject(changedChildren);\n  return syncTreeApplyOperationToSyncPoints_(syncTree, new Merge(newOperationSourceUser(), path, changeTree));\n}\n/**\r\n * Acknowledge a pending user write that was previously registered with applyUserOverwrite() or applyUserMerge().\r\n *\r\n * @param revert - True if the given write failed and needs to be reverted\r\n * @returns Events to raise.\r\n */\n\n\nfunction syncTreeAckUserWrite(syncTree, writeId) {\n  let revert = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  const write = writeTreeGetWrite(syncTree.pendingWriteTree_, writeId);\n  const needToReevaluate = writeTreeRemoveWrite(syncTree.pendingWriteTree_, writeId);\n\n  if (!needToReevaluate) {\n    return [];\n  } else {\n    let affectedTree = new ImmutableTree(null);\n\n    if (write.snap != null) {\n      // overwrite\n      affectedTree = affectedTree.set(newEmptyPath(), true);\n    } else {\n      each(write.children, pathString => {\n        affectedTree = affectedTree.set(new Path(pathString), true);\n      });\n    }\n\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new AckUserWrite(write.path, affectedTree, revert));\n  }\n}\n/**\r\n * Apply new server data for the specified path..\r\n *\r\n * @returns Events to raise.\r\n */\n\n\nfunction syncTreeApplyServerOverwrite(syncTree, path, newData) {\n  return syncTreeApplyOperationToSyncPoints_(syncTree, new Overwrite(newOperationSourceServer(), path, newData));\n}\n/**\r\n * Apply new server data to be merged in at the specified path.\r\n *\r\n * @returns Events to raise.\r\n */\n\n\nfunction syncTreeApplyServerMerge(syncTree, path, changedChildren) {\n  const changeTree = ImmutableTree.fromObject(changedChildren);\n  return syncTreeApplyOperationToSyncPoints_(syncTree, new Merge(newOperationSourceServer(), path, changeTree));\n}\n/**\r\n * Apply a listen complete for a query\r\n *\r\n * @returns Events to raise.\r\n */\n\n\nfunction syncTreeApplyListenComplete(syncTree, path) {\n  return syncTreeApplyOperationToSyncPoints_(syncTree, new ListenComplete(newOperationSourceServer(), path));\n}\n/**\r\n * Apply a listen complete for a tagged query\r\n *\r\n * @returns Events to raise.\r\n */\n\n\nfunction syncTreeApplyTaggedListenComplete(syncTree, path, tag) {\n  const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n\n  if (queryKey) {\n    const r = syncTreeParseQueryKey_(queryKey);\n    const queryPath = r.path,\n          queryId = r.queryId;\n    const relativePath = newRelativePath(queryPath, path);\n    const op = new ListenComplete(newOperationSourceServerTaggedQuery(queryId), relativePath);\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n  } else {\n    // We've already removed the query. No big deal, ignore the update\n    return [];\n  }\n}\n/**\r\n * Remove event callback(s).\r\n *\r\n * If query is the default query, we'll check all queries for the specified eventRegistration.\r\n * If eventRegistration is null, we'll remove all callbacks for the specified query/queries.\r\n *\r\n * @param eventRegistration - If null, all callbacks are removed.\r\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\r\n * @returns Cancel events, if cancelError was provided.\r\n */\n\n\nfunction syncTreeRemoveEventRegistration(syncTree, query, eventRegistration, cancelError) {\n  // Find the syncPoint first. Then deal with whether or not it has matching listeners\n  const path = query._path;\n  const maybeSyncPoint = syncTree.syncPointTree_.get(path);\n  let cancelEvents = []; // A removal on a default query affects all queries at that location. A removal on an indexed query, even one without\n  // other query constraints, does *not* affect all queries at that location. So this check must be for 'default', and\n  // not loadsAllData().\n\n  if (maybeSyncPoint && (query._queryIdentifier === 'default' || syncPointViewExistsForQuery(maybeSyncPoint, query))) {\n    const removedAndEvents = syncPointRemoveEventRegistration(maybeSyncPoint, query, eventRegistration, cancelError);\n\n    if (syncPointIsEmpty(maybeSyncPoint)) {\n      syncTree.syncPointTree_ = syncTree.syncPointTree_.remove(path);\n    }\n\n    const removed = removedAndEvents.removed;\n    cancelEvents = removedAndEvents.events; // We may have just removed one of many listeners and can short-circuit this whole process\n    // We may also not have removed a default listener, in which case all of the descendant listeners should already be\n    // properly set up.\n    //\n    // Since indexed queries can shadow if they don't have other query constraints, check for loadsAllData(), instead of\n    // queryId === 'default'\n\n    const removingDefault = -1 !== removed.findIndex(query => {\n      return query._queryParams.loadsAllData();\n    });\n    const covered = syncTree.syncPointTree_.findOnPath(path, (relativePath, parentSyncPoint) => syncPointHasCompleteView(parentSyncPoint));\n\n    if (removingDefault && !covered) {\n      const subtree = syncTree.syncPointTree_.subtree(path); // There are potentially child listeners. Determine what if any listens we need to send before executing the\n      // removal\n\n      if (!subtree.isEmpty()) {\n        // We need to fold over our subtree and collect the listeners to send\n        const newViews = syncTreeCollectDistinctViewsForSubTree_(subtree); // Ok, we've collected all the listens we need. Set them up.\n\n        for (let i = 0; i < newViews.length; ++i) {\n          const view = newViews[i],\n                newQuery = view.query;\n          const listener = syncTreeCreateListenerForView_(syncTree, view);\n          syncTree.listenProvider_.startListening(syncTreeQueryForListening_(newQuery), syncTreeTagForQuery_(syncTree, newQuery), listener.hashFn, listener.onComplete);\n        }\n      }\n    } // If we removed anything and we're not covered by a higher up listen, we need to stop listening on this query\n    // The above block has us covered in terms of making sure we're set up on listens lower in the tree.\n    // Also, note that if we have a cancelError, it's already been removed at the provider level.\n\n\n    if (!covered && removed.length > 0 && !cancelError) {\n      // If we removed a default, then we weren't listening on any of the other queries here. Just cancel the one\n      // default. Otherwise, we need to iterate through and cancel each individual query\n      if (removingDefault) {\n        // We don't tag default listeners\n        const defaultTag = null;\n        syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(query), defaultTag);\n      } else {\n        removed.forEach(queryToRemove => {\n          const tagToRemove = syncTree.queryToTagMap.get(syncTreeMakeQueryKey_(queryToRemove));\n          syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(queryToRemove), tagToRemove);\n        });\n      }\n    } // Now, clear all of the tags we're tracking for the removed listens\n\n\n    syncTreeRemoveTags_(syncTree, removed);\n  }\n\n  return cancelEvents;\n}\n/**\r\n * Apply new server data for the specified tagged query.\r\n *\r\n * @returns Events to raise.\r\n */\n\n\nfunction syncTreeApplyTaggedQueryOverwrite(syncTree, path, snap, tag) {\n  const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n\n  if (queryKey != null) {\n    const r = syncTreeParseQueryKey_(queryKey);\n    const queryPath = r.path,\n          queryId = r.queryId;\n    const relativePath = newRelativePath(queryPath, path);\n    const op = new Overwrite(newOperationSourceServerTaggedQuery(queryId), relativePath, snap);\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n  } else {\n    // Query must have been removed already\n    return [];\n  }\n}\n/**\r\n * Apply server data to be merged in for the specified tagged query.\r\n *\r\n * @returns Events to raise.\r\n */\n\n\nfunction syncTreeApplyTaggedQueryMerge(syncTree, path, changedChildren, tag) {\n  const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n\n  if (queryKey) {\n    const r = syncTreeParseQueryKey_(queryKey);\n    const queryPath = r.path,\n          queryId = r.queryId;\n    const relativePath = newRelativePath(queryPath, path);\n    const changeTree = ImmutableTree.fromObject(changedChildren);\n    const op = new Merge(newOperationSourceServerTaggedQuery(queryId), relativePath, changeTree);\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n  } else {\n    // We've already removed the query. No big deal, ignore the update\n    return [];\n  }\n}\n/**\r\n * Add an event callback for the specified query.\r\n *\r\n * @returns Events to raise.\r\n */\n\n\nfunction syncTreeAddEventRegistration(syncTree, query, eventRegistration) {\n  const path = query._path;\n  let serverCache = null;\n  let foundAncestorDefaultView = false; // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\n  // Consider optimizing this once there's a better understanding of what actual behavior will be.\n\n  syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\n    const relativePath = newRelativePath(pathToSyncPoint, path);\n    serverCache = serverCache || syncPointGetCompleteServerCache(sp, relativePath);\n    foundAncestorDefaultView = foundAncestorDefaultView || syncPointHasCompleteView(sp);\n  });\n  let syncPoint = syncTree.syncPointTree_.get(path);\n\n  if (!syncPoint) {\n    syncPoint = new SyncPoint();\n    syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\n  } else {\n    foundAncestorDefaultView = foundAncestorDefaultView || syncPointHasCompleteView(syncPoint);\n    serverCache = serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n  }\n\n  let serverCacheComplete;\n\n  if (serverCache != null) {\n    serverCacheComplete = true;\n  } else {\n    serverCacheComplete = false;\n    serverCache = ChildrenNode.EMPTY_NODE;\n    const subtree = syncTree.syncPointTree_.subtree(path);\n    subtree.foreachChild((childName, childSyncPoint) => {\n      const completeCache = syncPointGetCompleteServerCache(childSyncPoint, newEmptyPath());\n\n      if (completeCache) {\n        serverCache = serverCache.updateImmediateChild(childName, completeCache);\n      }\n    });\n  }\n\n  const viewAlreadyExists = syncPointViewExistsForQuery(syncPoint, query);\n\n  if (!viewAlreadyExists && !query._queryParams.loadsAllData()) {\n    // We need to track a tag for this query\n    const queryKey = syncTreeMakeQueryKey_(query);\n    assert(!syncTree.queryToTagMap.has(queryKey), 'View does not exist, but we have a tag');\n    const tag = syncTreeGetNextQueryTag_();\n    syncTree.queryToTagMap.set(queryKey, tag);\n    syncTree.tagToQueryMap.set(tag, queryKey);\n  }\n\n  const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, path);\n  let events = syncPointAddEventRegistration(syncPoint, query, eventRegistration, writesCache, serverCache, serverCacheComplete);\n\n  if (!viewAlreadyExists && !foundAncestorDefaultView) {\n    const view = syncPointViewForQuery(syncPoint, query);\n    events = events.concat(syncTreeSetupListener_(syncTree, query, view));\n  }\n\n  return events;\n}\n/**\r\n * Returns a complete cache, if we have one, of the data at a particular path. If the location does not have a\r\n * listener above it, we will get a false \"null\". This shouldn't be a problem because transactions will always\r\n * have a listener above, and atomic operations would correctly show a jitter of <increment value> ->\r\n *     <incremented total> as the write is applied locally and then acknowledged at the server.\r\n *\r\n * Note: this method will *include* hidden writes from transaction with applyLocally set to false.\r\n *\r\n * @param path - The path to the data we want\r\n * @param writeIdsToExclude - A specific set to be excluded\r\n */\n\n\nfunction syncTreeCalcCompleteEventCache(syncTree, path, writeIdsToExclude) {\n  const includeHiddenSets = true;\n  const writeTree = syncTree.pendingWriteTree_;\n  const serverCache = syncTree.syncPointTree_.findOnPath(path, (pathSoFar, syncPoint) => {\n    const relativePath = newRelativePath(pathSoFar, path);\n    const serverCache = syncPointGetCompleteServerCache(syncPoint, relativePath);\n\n    if (serverCache) {\n      return serverCache;\n    }\n  });\n  return writeTreeCalcCompleteEventCache(writeTree, path, serverCache, writeIdsToExclude, includeHiddenSets);\n}\n\nfunction syncTreeGetServerValue(syncTree, query) {\n  const path = query._path;\n  let serverCache = null; // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\n  // Consider optimizing this once there's a better understanding of what actual behavior will be.\n\n  syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\n    const relativePath = newRelativePath(pathToSyncPoint, path);\n    serverCache = serverCache || syncPointGetCompleteServerCache(sp, relativePath);\n  });\n  let syncPoint = syncTree.syncPointTree_.get(path);\n\n  if (!syncPoint) {\n    syncPoint = new SyncPoint();\n    syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\n  } else {\n    serverCache = serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n  }\n\n  const serverCacheComplete = serverCache != null;\n  const serverCacheNode = serverCacheComplete ? new CacheNode(serverCache, true, false) : null;\n  const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, query._path);\n  const view = syncPointGetView(syncPoint, query, writesCache, serverCacheComplete ? serverCacheNode.getNode() : ChildrenNode.EMPTY_NODE, serverCacheComplete);\n  return viewGetCompleteNode(view);\n}\n/**\r\n * A helper method that visits all descendant and ancestor SyncPoints, applying the operation.\r\n *\r\n * NOTES:\r\n * - Descendant SyncPoints will be visited first (since we raise events depth-first).\r\n *\r\n * - We call applyOperation() on each SyncPoint passing three things:\r\n *   1. A version of the Operation that has been made relative to the SyncPoint location.\r\n *   2. A WriteTreeRef of any writes we have cached at the SyncPoint location.\r\n *   3. A snapshot Node with cached server data, if we have it.\r\n *\r\n * - We concatenate all of the events returned by each SyncPoint and return the result.\r\n */\n\n\nfunction syncTreeApplyOperationToSyncPoints_(syncTree, operation) {\n  return syncTreeApplyOperationHelper_(operation, syncTree.syncPointTree_,\n  /*serverCache=*/\n  null, writeTreeChildWrites(syncTree.pendingWriteTree_, newEmptyPath()));\n}\n/**\r\n * Recursive helper for applyOperationToSyncPoints_\r\n */\n\n\nfunction syncTreeApplyOperationHelper_(operation, syncPointTree, serverCache, writesCache) {\n  if (pathIsEmpty(operation.path)) {\n    return syncTreeApplyOperationDescendantsHelper_(operation, syncPointTree, serverCache, writesCache);\n  } else {\n    const syncPoint = syncPointTree.get(newEmptyPath()); // If we don't have cached server data, see if we can get it from this SyncPoint.\n\n    if (serverCache == null && syncPoint != null) {\n      serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n    }\n\n    let events = [];\n    const childName = pathGetFront(operation.path);\n    const childOperation = operation.operationForChild(childName);\n    const childTree = syncPointTree.children.get(childName);\n\n    if (childTree && childOperation) {\n      const childServerCache = serverCache ? serverCache.getImmediateChild(childName) : null;\n      const childWritesCache = writeTreeRefChild(writesCache, childName);\n      events = events.concat(syncTreeApplyOperationHelper_(childOperation, childTree, childServerCache, childWritesCache));\n    }\n\n    if (syncPoint) {\n      events = events.concat(syncPointApplyOperation(syncPoint, operation, writesCache, serverCache));\n    }\n\n    return events;\n  }\n}\n/**\r\n * Recursive helper for applyOperationToSyncPoints_\r\n */\n\n\nfunction syncTreeApplyOperationDescendantsHelper_(operation, syncPointTree, serverCache, writesCache) {\n  const syncPoint = syncPointTree.get(newEmptyPath()); // If we don't have cached server data, see if we can get it from this SyncPoint.\n\n  if (serverCache == null && syncPoint != null) {\n    serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n  }\n\n  let events = [];\n  syncPointTree.children.inorderTraversal((childName, childTree) => {\n    const childServerCache = serverCache ? serverCache.getImmediateChild(childName) : null;\n    const childWritesCache = writeTreeRefChild(writesCache, childName);\n    const childOperation = operation.operationForChild(childName);\n\n    if (childOperation) {\n      events = events.concat(syncTreeApplyOperationDescendantsHelper_(childOperation, childTree, childServerCache, childWritesCache));\n    }\n  });\n\n  if (syncPoint) {\n    events = events.concat(syncPointApplyOperation(syncPoint, operation, writesCache, serverCache));\n  }\n\n  return events;\n}\n\nfunction syncTreeCreateListenerForView_(syncTree, view) {\n  const query = view.query;\n  const tag = syncTreeTagForQuery_(syncTree, query);\n  return {\n    hashFn: () => {\n      const cache = viewGetServerCache(view) || ChildrenNode.EMPTY_NODE;\n      return cache.hash();\n    },\n    onComplete: status => {\n      if (status === 'ok') {\n        if (tag) {\n          return syncTreeApplyTaggedListenComplete(syncTree, query._path, tag);\n        } else {\n          return syncTreeApplyListenComplete(syncTree, query._path);\n        }\n      } else {\n        // If a listen failed, kill all of the listeners here, not just the one that triggered the error.\n        // Note that this may need to be scoped to just this listener if we change permissions on filtered children\n        const error = errorForServerCode(status, query);\n        return syncTreeRemoveEventRegistration(syncTree, query,\n        /*eventRegistration*/\n        null, error);\n      }\n    }\n  };\n}\n/**\r\n * Return the tag associated with the given query.\r\n */\n\n\nfunction syncTreeTagForQuery_(syncTree, query) {\n  const queryKey = syncTreeMakeQueryKey_(query);\n  return syncTree.queryToTagMap.get(queryKey);\n}\n/**\r\n * Given a query, computes a \"queryKey\" suitable for use in our queryToTagMap_.\r\n */\n\n\nfunction syncTreeMakeQueryKey_(query) {\n  return query._path.toString() + '$' + query._queryIdentifier;\n}\n/**\r\n * Return the query associated with the given tag, if we have one\r\n */\n\n\nfunction syncTreeQueryKeyForTag_(syncTree, tag) {\n  return syncTree.tagToQueryMap.get(tag);\n}\n/**\r\n * Given a queryKey (created by makeQueryKey), parse it back into a path and queryId.\r\n */\n\n\nfunction syncTreeParseQueryKey_(queryKey) {\n  const splitIndex = queryKey.indexOf('$');\n  assert(splitIndex !== -1 && splitIndex < queryKey.length - 1, 'Bad queryKey.');\n  return {\n    queryId: queryKey.substr(splitIndex + 1),\n    path: new Path(queryKey.substr(0, splitIndex))\n  };\n}\n/**\r\n * A helper method to apply tagged operations\r\n */\n\n\nfunction syncTreeApplyTaggedOperation_(syncTree, queryPath, operation) {\n  const syncPoint = syncTree.syncPointTree_.get(queryPath);\n  assert(syncPoint, \"Missing sync point for query tag that we're tracking\");\n  const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, queryPath);\n  return syncPointApplyOperation(syncPoint, operation, writesCache, null);\n}\n/**\r\n * This collapses multiple unfiltered views into a single view, since we only need a single\r\n * listener for them.\r\n */\n\n\nfunction syncTreeCollectDistinctViewsForSubTree_(subtree) {\n  return subtree.fold((relativePath, maybeChildSyncPoint, childMap) => {\n    if (maybeChildSyncPoint && syncPointHasCompleteView(maybeChildSyncPoint)) {\n      const completeView = syncPointGetCompleteView(maybeChildSyncPoint);\n      return [completeView];\n    } else {\n      // No complete view here, flatten any deeper listens into an array\n      let views = [];\n\n      if (maybeChildSyncPoint) {\n        views = syncPointGetQueryViews(maybeChildSyncPoint);\n      }\n\n      each(childMap, (_key, childViews) => {\n        views = views.concat(childViews);\n      });\n      return views;\n    }\n  });\n}\n/**\r\n * Normalizes a query to a query we send the server for listening\r\n *\r\n * @returns The normalized query\r\n */\n\n\nfunction syncTreeQueryForListening_(query) {\n  if (query._queryParams.loadsAllData() && !query._queryParams.isDefault()) {\n    // We treat queries that load all data as default queries\n    // Cast is necessary because ref() technically returns Firebase which is actually fb.api.Firebase which inherits\n    // from Query\n    return new (syncTreeGetReferenceConstructor())(query._repo, query._path);\n  } else {\n    return query;\n  }\n}\n\nfunction syncTreeRemoveTags_(syncTree, queries) {\n  for (let j = 0; j < queries.length; ++j) {\n    const removedQuery = queries[j];\n\n    if (!removedQuery._queryParams.loadsAllData()) {\n      // We should have a tag for this\n      const removedQueryKey = syncTreeMakeQueryKey_(removedQuery);\n      const removedQueryTag = syncTree.queryToTagMap.get(removedQueryKey);\n      syncTree.queryToTagMap.delete(removedQueryKey);\n      syncTree.tagToQueryMap.delete(removedQueryTag);\n    }\n  }\n}\n/**\r\n * Static accessor for query tags.\r\n */\n\n\nfunction syncTreeGetNextQueryTag_() {\n  return syncTreeNextQueryTag_++;\n}\n/**\r\n * For a given new listen, manage the de-duplication of outstanding subscriptions.\r\n *\r\n * @returns This method can return events to support synchronous data sources\r\n */\n\n\nfunction syncTreeSetupListener_(syncTree, query, view) {\n  const path = query._path;\n  const tag = syncTreeTagForQuery_(syncTree, query);\n  const listener = syncTreeCreateListenerForView_(syncTree, view);\n  const events = syncTree.listenProvider_.startListening(syncTreeQueryForListening_(query), tag, listener.hashFn, listener.onComplete);\n  const subtree = syncTree.syncPointTree_.subtree(path); // The root of this subtree has our query. We're here because we definitely need to send a listen for that, but we\n  // may need to shadow other listens as well.\n\n  if (tag) {\n    assert(!syncPointHasCompleteView(subtree.value), \"If we're adding a query, it shouldn't be shadowed\");\n  } else {\n    // Shadow everything at or below this location, this is a default listener.\n    const queriesToStop = subtree.fold((relativePath, maybeChildSyncPoint, childMap) => {\n      if (!pathIsEmpty(relativePath) && maybeChildSyncPoint && syncPointHasCompleteView(maybeChildSyncPoint)) {\n        return [syncPointGetCompleteView(maybeChildSyncPoint).query];\n      } else {\n        // No default listener here, flatten any deeper queries into an array\n        let queries = [];\n\n        if (maybeChildSyncPoint) {\n          queries = queries.concat(syncPointGetQueryViews(maybeChildSyncPoint).map(view => view.query));\n        }\n\n        each(childMap, (_key, childQueries) => {\n          queries = queries.concat(childQueries);\n        });\n        return queries;\n      }\n    });\n\n    for (let i = 0; i < queriesToStop.length; ++i) {\n      const queryToStop = queriesToStop[i];\n      syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(queryToStop), syncTreeTagForQuery_(syncTree, queryToStop));\n    }\n  }\n\n  return events;\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nclass ExistingValueProvider {\n  constructor(node_) {\n    this.node_ = node_;\n  }\n\n  getImmediateChild(childName) {\n    const child = this.node_.getImmediateChild(childName);\n    return new ExistingValueProvider(child);\n  }\n\n  node() {\n    return this.node_;\n  }\n\n}\n\nclass DeferredValueProvider {\n  constructor(syncTree, path) {\n    this.syncTree_ = syncTree;\n    this.path_ = path;\n  }\n\n  getImmediateChild(childName) {\n    const childPath = pathChild(this.path_, childName);\n    return new DeferredValueProvider(this.syncTree_, childPath);\n  }\n\n  node() {\n    return syncTreeCalcCompleteEventCache(this.syncTree_, this.path_);\n  }\n\n}\n/**\r\n * Generate placeholders for deferred values.\r\n */\n\n\nconst generateWithValues = function (values) {\n  values = values || {};\n  values['timestamp'] = values['timestamp'] || new Date().getTime();\n  return values;\n};\n/**\r\n * Value to use when firing local events. When writing server values, fire\r\n * local events with an approximate value, otherwise return value as-is.\r\n */\n\n\nconst resolveDeferredLeafValue = function (value, existingVal, serverValues) {\n  if (!value || typeof value !== 'object') {\n    return value;\n  }\n\n  assert('.sv' in value, 'Unexpected leaf node or priority contents');\n\n  if (typeof value['.sv'] === 'string') {\n    return resolveScalarDeferredValue(value['.sv'], existingVal, serverValues);\n  } else if (typeof value['.sv'] === 'object') {\n    return resolveComplexDeferredValue(value['.sv'], existingVal);\n  } else {\n    assert(false, 'Unexpected server value: ' + JSON.stringify(value, null, 2));\n  }\n};\n\nconst resolveScalarDeferredValue = function (op, existing, serverValues) {\n  switch (op) {\n    case 'timestamp':\n      return serverValues['timestamp'];\n\n    default:\n      assert(false, 'Unexpected server value: ' + op);\n  }\n};\n\nconst resolveComplexDeferredValue = function (op, existing, unused) {\n  if (!op.hasOwnProperty('increment')) {\n    assert(false, 'Unexpected server value: ' + JSON.stringify(op, null, 2));\n  }\n\n  const delta = op['increment'];\n\n  if (typeof delta !== 'number') {\n    assert(false, 'Unexpected increment value: ' + delta);\n  }\n\n  const existingNode = existing.node();\n  assert(existingNode !== null && typeof existingNode !== 'undefined', 'Expected ChildrenNode.EMPTY_NODE for nulls'); // Incrementing a non-number sets the value to the incremented amount\n\n  if (!existingNode.isLeafNode()) {\n    return delta;\n  }\n\n  const leaf = existingNode;\n  const existingVal = leaf.getValue();\n\n  if (typeof existingVal !== 'number') {\n    return delta;\n  } // No need to do over/underflow arithmetic here because JS only handles floats under the covers\n\n\n  return existingVal + delta;\n};\n/**\r\n * Recursively replace all deferred values and priorities in the tree with the\r\n * specified generated replacement values.\r\n * @param path - path to which write is relative\r\n * @param node - new data written at path\r\n * @param syncTree - current data\r\n */\n\n\nconst resolveDeferredValueTree = function (path, node, syncTree, serverValues) {\n  return resolveDeferredValue(node, new DeferredValueProvider(syncTree, path), serverValues);\n};\n/**\r\n * Recursively replace all deferred values and priorities in the node with the\r\n * specified generated replacement values.  If there are no server values in the node,\r\n * it'll be returned as-is.\r\n */\n\n\nconst resolveDeferredValueSnapshot = function (node, existing, serverValues) {\n  return resolveDeferredValue(node, new ExistingValueProvider(existing), serverValues);\n};\n\nfunction resolveDeferredValue(node, existingVal, serverValues) {\n  const rawPri = node.getPriority().val();\n  const priority = resolveDeferredLeafValue(rawPri, existingVal.getImmediateChild('.priority'), serverValues);\n  let newNode;\n\n  if (node.isLeafNode()) {\n    const leafNode = node;\n    const value = resolveDeferredLeafValue(leafNode.getValue(), existingVal, serverValues);\n\n    if (value !== leafNode.getValue() || priority !== leafNode.getPriority().val()) {\n      return new LeafNode(value, nodeFromJSON(priority));\n    } else {\n      return node;\n    }\n  } else {\n    const childrenNode = node;\n    newNode = childrenNode;\n\n    if (priority !== childrenNode.getPriority().val()) {\n      newNode = newNode.updatePriority(new LeafNode(priority));\n    }\n\n    childrenNode.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\n      const newChildNode = resolveDeferredValue(childNode, existingVal.getImmediateChild(childName), serverValues);\n\n      if (newChildNode !== childNode) {\n        newNode = newNode.updateImmediateChild(childName, newChildNode);\n      }\n    });\n    return newNode;\n  }\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * A light-weight tree, traversable by path.  Nodes can have both values and children.\r\n * Nodes are not enumerated (by forEachChild) unless they have a value or non-empty\r\n * children.\r\n */\n\n\nclass Tree {\n  /**\r\n   * @param name - Optional name of the node.\r\n   * @param parent - Optional parent node.\r\n   * @param node - Optional node to wrap.\r\n   */\n  constructor() {\n    let name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    let parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    let node = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n      children: {},\n      childCount: 0\n    };\n    this.name = name;\n    this.parent = parent;\n    this.node = node;\n  }\n\n}\n/**\r\n * Returns a sub-Tree for the given path.\r\n *\r\n * @param pathObj - Path to look up.\r\n * @returns Tree for path.\r\n */\n\n\nfunction treeSubTree(tree, pathObj) {\n  // TODO: Require pathObj to be Path?\n  let path = pathObj instanceof Path ? pathObj : new Path(pathObj);\n  let child = tree,\n      next = pathGetFront(path);\n\n  while (next !== null) {\n    const childNode = safeGet(child.node.children, next) || {\n      children: {},\n      childCount: 0\n    };\n    child = new Tree(next, child, childNode);\n    path = pathPopFront(path);\n    next = pathGetFront(path);\n  }\n\n  return child;\n}\n/**\r\n * Returns the data associated with this tree node.\r\n *\r\n * @returns The data or null if no data exists.\r\n */\n\n\nfunction treeGetValue(tree) {\n  return tree.node.value;\n}\n/**\r\n * Sets data to this tree node.\r\n *\r\n * @param value - Value to set.\r\n */\n\n\nfunction treeSetValue(tree, value) {\n  tree.node.value = value;\n  treeUpdateParents(tree);\n}\n/**\r\n * @returns Whether the tree has any children.\r\n */\n\n\nfunction treeHasChildren(tree) {\n  return tree.node.childCount > 0;\n}\n/**\r\n * @returns Whethe rthe tree is empty (no value or children).\r\n */\n\n\nfunction treeIsEmpty(tree) {\n  return treeGetValue(tree) === undefined && !treeHasChildren(tree);\n}\n/**\r\n * Calls action for each child of this tree node.\r\n *\r\n * @param action - Action to be called for each child.\r\n */\n\n\nfunction treeForEachChild(tree, action) {\n  each(tree.node.children, (child, childTree) => {\n    action(new Tree(child, tree, childTree));\n  });\n}\n/**\r\n * Does a depth-first traversal of this node's descendants, calling action for each one.\r\n *\r\n * @param action - Action to be called for each child.\r\n * @param includeSelf - Whether to call action on this node as well. Defaults to\r\n *   false.\r\n * @param childrenFirst - Whether to call action on children before calling it on\r\n *   parent.\r\n */\n\n\nfunction treeForEachDescendant(tree, action, includeSelf, childrenFirst) {\n  if (includeSelf && !childrenFirst) {\n    action(tree);\n  }\n\n  treeForEachChild(tree, child => {\n    treeForEachDescendant(child, action, true, childrenFirst);\n  });\n\n  if (includeSelf && childrenFirst) {\n    action(tree);\n  }\n}\n/**\r\n * Calls action on each ancestor node.\r\n *\r\n * @param action - Action to be called on each parent; return\r\n *   true to abort.\r\n * @param includeSelf - Whether to call action on this node as well.\r\n * @returns true if the action callback returned true.\r\n */\n\n\nfunction treeForEachAncestor(tree, action, includeSelf) {\n  let node = includeSelf ? tree : tree.parent;\n\n  while (node !== null) {\n    if (action(node)) {\n      return true;\n    }\n\n    node = node.parent;\n  }\n\n  return false;\n}\n/**\r\n * @returns The path of this tree node, as a Path.\r\n */\n\n\nfunction treeGetPath(tree) {\n  return new Path(tree.parent === null ? tree.name : treeGetPath(tree.parent) + '/' + tree.name);\n}\n/**\r\n * Adds or removes this child from its parent based on whether it's empty or not.\r\n */\n\n\nfunction treeUpdateParents(tree) {\n  if (tree.parent !== null) {\n    treeUpdateChild(tree.parent, tree.name, tree);\n  }\n}\n/**\r\n * Adds or removes the passed child to this tree node, depending on whether it's empty.\r\n *\r\n * @param childName - The name of the child to update.\r\n * @param child - The child to update.\r\n */\n\n\nfunction treeUpdateChild(tree, childName, child) {\n  const childEmpty = treeIsEmpty(child);\n  const childExists = contains(tree.node.children, childName);\n\n  if (childEmpty && childExists) {\n    delete tree.node.children[childName];\n    tree.node.childCount--;\n    treeUpdateParents(tree);\n  } else if (!childEmpty && !childExists) {\n    tree.node.children[childName] = child.node;\n    tree.node.childCount++;\n    treeUpdateParents(tree);\n  }\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * True for invalid Firebase keys\r\n */\n\n\nconst INVALID_KEY_REGEX_ = /[\\[\\].#$\\/\\u0000-\\u001F\\u007F]/;\n/**\r\n * True for invalid Firebase paths.\r\n * Allows '/' in paths.\r\n */\n\nconst INVALID_PATH_REGEX_ = /[\\[\\].#$\\u0000-\\u001F\\u007F]/;\n/**\r\n * Maximum number of characters to allow in leaf value\r\n */\n\nconst MAX_LEAF_SIZE_ = 10 * 1024 * 1024;\n\nconst isValidKey = function (key) {\n  return typeof key === 'string' && key.length !== 0 && !INVALID_KEY_REGEX_.test(key);\n};\n\nconst isValidPathString = function (pathString) {\n  return typeof pathString === 'string' && pathString.length !== 0 && !INVALID_PATH_REGEX_.test(pathString);\n};\n\nconst isValidRootPathString = function (pathString) {\n  if (pathString) {\n    // Allow '/.info/' at the beginning.\n    pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n  }\n\n  return isValidPathString(pathString);\n};\n\nconst isValidPriority = function (priority) {\n  return priority === null || typeof priority === 'string' || typeof priority === 'number' && !isInvalidJSONNumber(priority) || priority && typeof priority === 'object' && // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  contains(priority, '.sv');\n};\n/**\r\n * Pre-validate a datum passed as an argument to Firebase function.\r\n */\n\n\nconst validateFirebaseDataArg = function (fnName, value, path, optional) {\n  if (optional && value === undefined) {\n    return;\n  }\n\n  validateFirebaseData(errorPrefix(fnName, 'value'), value, path);\n};\n/**\r\n * Validate a data object client-side before sending to server.\r\n */\n\n\nconst validateFirebaseData = function (errorPrefix, data, path_) {\n  const path = path_ instanceof Path ? new ValidationPath(path_, errorPrefix) : path_;\n\n  if (data === undefined) {\n    throw new Error(errorPrefix + 'contains undefined ' + validationPathToErrorString(path));\n  }\n\n  if (typeof data === 'function') {\n    throw new Error(errorPrefix + 'contains a function ' + validationPathToErrorString(path) + ' with contents = ' + data.toString());\n  }\n\n  if (isInvalidJSONNumber(data)) {\n    throw new Error(errorPrefix + 'contains ' + data.toString() + ' ' + validationPathToErrorString(path));\n  } // Check max leaf size, but try to avoid the utf8 conversion if we can.\n\n\n  if (typeof data === 'string' && data.length > MAX_LEAF_SIZE_ / 3 && stringLength(data) > MAX_LEAF_SIZE_) {\n    throw new Error(errorPrefix + 'contains a string greater than ' + MAX_LEAF_SIZE_ + ' utf8 bytes ' + validationPathToErrorString(path) + \" ('\" + data.substring(0, 50) + \"...')\");\n  } // TODO = Perf = Consider combining the recursive validation of keys into NodeFromJSON\n  // to save extra walking of large objects.\n\n\n  if (data && typeof data === 'object') {\n    let hasDotValue = false;\n    let hasActualChild = false;\n    each(data, (key, value) => {\n      if (key === '.value') {\n        hasDotValue = true;\n      } else if (key !== '.priority' && key !== '.sv') {\n        hasActualChild = true;\n\n        if (!isValidKey(key)) {\n          throw new Error(errorPrefix + ' contains an invalid key (' + key + ') ' + validationPathToErrorString(path) + '.  Keys must be non-empty strings ' + 'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"');\n        }\n      }\n\n      validationPathPush(path, key);\n      validateFirebaseData(errorPrefix, value, path);\n      validationPathPop(path);\n    });\n\n    if (hasDotValue && hasActualChild) {\n      throw new Error(errorPrefix + ' contains \".value\" child ' + validationPathToErrorString(path) + ' in addition to actual children.');\n    }\n  }\n};\n/**\r\n * Pre-validate paths passed in the firebase function.\r\n */\n\n\nconst validateFirebaseMergePaths = function (errorPrefix, mergePaths) {\n  let i, curPath;\n\n  for (i = 0; i < mergePaths.length; i++) {\n    curPath = mergePaths[i];\n    const keys = pathSlice(curPath);\n\n    for (let j = 0; j < keys.length; j++) {\n      if (keys[j] === '.priority' && j === keys.length - 1) ;else if (!isValidKey(keys[j])) {\n        throw new Error(errorPrefix + 'contains an invalid key (' + keys[j] + ') in path ' + curPath.toString() + '. Keys must be non-empty strings ' + 'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"');\n      }\n    }\n  } // Check that update keys are not descendants of each other.\n  // We rely on the property that sorting guarantees that ancestors come\n  // right before descendants.\n\n\n  mergePaths.sort(pathCompare);\n  let prevPath = null;\n\n  for (i = 0; i < mergePaths.length; i++) {\n    curPath = mergePaths[i];\n\n    if (prevPath !== null && pathContains(prevPath, curPath)) {\n      throw new Error(errorPrefix + 'contains a path ' + prevPath.toString() + ' that is ancestor of another path ' + curPath.toString());\n    }\n\n    prevPath = curPath;\n  }\n};\n/**\r\n * pre-validate an object passed as an argument to firebase function (\r\n * must be an object - e.g. for firebase.update()).\r\n */\n\n\nconst validateFirebaseMergeDataArg = function (fnName, data, path, optional) {\n  if (optional && data === undefined) {\n    return;\n  }\n\n  const errorPrefix$1 = errorPrefix(fnName, 'values');\n\n  if (!(data && typeof data === 'object') || Array.isArray(data)) {\n    throw new Error(errorPrefix$1 + ' must be an object containing the children to replace.');\n  }\n\n  const mergePaths = [];\n  each(data, (key, value) => {\n    const curPath = new Path(key);\n    validateFirebaseData(errorPrefix$1, value, pathChild(path, curPath));\n\n    if (pathGetBack(curPath) === '.priority') {\n      if (!isValidPriority(value)) {\n        throw new Error(errorPrefix$1 + \"contains an invalid value for '\" + curPath.toString() + \"', which must be a valid \" + 'Firebase priority (a string, finite number, server value, or null).');\n      }\n    }\n\n    mergePaths.push(curPath);\n  });\n  validateFirebaseMergePaths(errorPrefix$1, mergePaths);\n};\n\nconst validatePriority = function (fnName, priority, optional) {\n  if (optional && priority === undefined) {\n    return;\n  }\n\n  if (isInvalidJSONNumber(priority)) {\n    throw new Error(errorPrefix(fnName, 'priority') + 'is ' + priority.toString() + ', but must be a valid Firebase priority (a string, finite number, ' + 'server value, or null).');\n  } // Special case to allow importing data with a .sv.\n\n\n  if (!isValidPriority(priority)) {\n    throw new Error(errorPrefix(fnName, 'priority') + 'must be a valid Firebase priority ' + '(a string, finite number, server value, or null).');\n  }\n};\n\nconst validateKey = function (fnName, argumentName, key, optional) {\n  if (optional && key === undefined) {\n    return;\n  }\n\n  if (!isValidKey(key)) {\n    throw new Error(errorPrefix(fnName, argumentName) + 'was an invalid key = \"' + key + '\".  Firebase keys must be non-empty strings and ' + 'can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\").');\n  }\n};\n/**\r\n * @internal\r\n */\n\n\nconst validatePathString = function (fnName, argumentName, pathString, optional) {\n  if (optional && pathString === undefined) {\n    return;\n  }\n\n  if (!isValidPathString(pathString)) {\n    throw new Error(errorPrefix(fnName, argumentName) + 'was an invalid path = \"' + pathString + '\". Paths must be non-empty strings and ' + 'can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\"');\n  }\n};\n\nconst validateRootPathString = function (fnName, argumentName, pathString, optional) {\n  if (pathString) {\n    // Allow '/.info/' at the beginning.\n    pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n  }\n\n  validatePathString(fnName, argumentName, pathString, optional);\n};\n/**\r\n * @internal\r\n */\n\n\nconst validateWritablePath = function (fnName, path) {\n  if (pathGetFront(path) === '.info') {\n    throw new Error(fnName + \" failed = Can't modify data under /.info/\");\n  }\n};\n\nconst validateUrl = function (fnName, parsedUrl) {\n  // TODO = Validate server better.\n  const pathString = parsedUrl.path.toString();\n\n  if (!(typeof parsedUrl.repoInfo.host === 'string') || parsedUrl.repoInfo.host.length === 0 || !isValidKey(parsedUrl.repoInfo.namespace) && parsedUrl.repoInfo.host.split(':')[0] !== 'localhost' || pathString.length !== 0 && !isValidRootPathString(pathString)) {\n    throw new Error(errorPrefix(fnName, 'url') + 'must be a valid firebase URL and ' + 'the path can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\".');\n  }\n};\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * The event queue serves a few purposes:\r\n * 1. It ensures we maintain event order in the face of event callbacks doing operations that result in more\r\n *    events being queued.\r\n * 2. raiseQueuedEvents() handles being called reentrantly nicely.  That is, if in the course of raising events,\r\n *    raiseQueuedEvents() is called again, the \"inner\" call will pick up raising events where the \"outer\" call\r\n *    left off, ensuring that the events are still raised synchronously and in order.\r\n * 3. You can use raiseEventsAtPath and raiseEventsForChangedPath to ensure only relevant previously-queued\r\n *    events are raised synchronously.\r\n *\r\n * NOTE: This can all go away if/when we move to async events.\r\n *\r\n */\n\n\nclass EventQueue {\n  constructor() {\n    this.eventLists_ = [];\n    /**\r\n     * Tracks recursion depth of raiseQueuedEvents_, for debugging purposes.\r\n     */\n\n    this.recursionDepth_ = 0;\n  }\n\n}\n/**\r\n * @param eventDataList - The new events to queue.\r\n */\n\n\nfunction eventQueueQueueEvents(eventQueue, eventDataList) {\n  // We group events by path, storing them in a single EventList, to make it easier to skip over them quickly.\n  let currList = null;\n\n  for (let i = 0; i < eventDataList.length; i++) {\n    const data = eventDataList[i];\n    const path = data.getPath();\n\n    if (currList !== null && !pathEquals(path, currList.path)) {\n      eventQueue.eventLists_.push(currList);\n      currList = null;\n    }\n\n    if (currList === null) {\n      currList = {\n        events: [],\n        path\n      };\n    }\n\n    currList.events.push(data);\n  }\n\n  if (currList) {\n    eventQueue.eventLists_.push(currList);\n  }\n}\n/**\r\n * Queues the specified events and synchronously raises all events (including previously queued ones)\r\n * for the specified path.\r\n *\r\n * It is assumed that the new events are all for the specified path.\r\n *\r\n * @param path - The path to raise events for.\r\n * @param eventDataList - The new events to raise.\r\n */\n\n\nfunction eventQueueRaiseEventsAtPath(eventQueue, path, eventDataList) {\n  eventQueueQueueEvents(eventQueue, eventDataList);\n  eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, eventPath => pathEquals(eventPath, path));\n}\n/**\r\n * Queues the specified events and synchronously raises all events (including previously queued ones) for\r\n * locations related to the specified change path (i.e. all ancestors and descendants).\r\n *\r\n * It is assumed that the new events are all related (ancestor or descendant) to the specified path.\r\n *\r\n * @param changedPath - The path to raise events for.\r\n * @param eventDataList - The events to raise\r\n */\n\n\nfunction eventQueueRaiseEventsForChangedPath(eventQueue, changedPath, eventDataList) {\n  eventQueueQueueEvents(eventQueue, eventDataList);\n  eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, eventPath => pathContains(eventPath, changedPath) || pathContains(changedPath, eventPath));\n}\n\nfunction eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, predicate) {\n  eventQueue.recursionDepth_++;\n  let sentAll = true;\n\n  for (let i = 0; i < eventQueue.eventLists_.length; i++) {\n    const eventList = eventQueue.eventLists_[i];\n\n    if (eventList) {\n      const eventPath = eventList.path;\n\n      if (predicate(eventPath)) {\n        eventListRaise(eventQueue.eventLists_[i]);\n        eventQueue.eventLists_[i] = null;\n      } else {\n        sentAll = false;\n      }\n    }\n  }\n\n  if (sentAll) {\n    eventQueue.eventLists_ = [];\n  }\n\n  eventQueue.recursionDepth_--;\n}\n/**\r\n * Iterates through the list and raises each event\r\n */\n\n\nfunction eventListRaise(eventList) {\n  for (let i = 0; i < eventList.events.length; i++) {\n    const eventData = eventList.events[i];\n\n    if (eventData !== null) {\n      eventList.events[i] = null;\n      const eventFn = eventData.getEventRunner();\n\n      if (logger) {\n        log('event: ' + eventData.toString());\n      }\n\n      exceptionGuard(eventFn);\n    }\n  }\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nconst INTERRUPT_REASON = 'repo_interrupt';\n/**\r\n * If a transaction does not succeed after 25 retries, we abort it. Among other\r\n * things this ensure that if there's ever a bug causing a mismatch between\r\n * client / server hashes for some data, we won't retry indefinitely.\r\n */\n\nconst MAX_TRANSACTION_RETRIES = 25;\n/**\r\n * A connection to a single data repository.\r\n */\n\nclass Repo {\n  constructor(repoInfo_, forceRestClient_, authTokenProvider_, appCheckProvider_) {\n    this.repoInfo_ = repoInfo_;\n    this.forceRestClient_ = forceRestClient_;\n    this.authTokenProvider_ = authTokenProvider_;\n    this.appCheckProvider_ = appCheckProvider_;\n    this.dataUpdateCount = 0;\n    this.statsListener_ = null;\n    this.eventQueue_ = new EventQueue();\n    this.nextWriteId_ = 1;\n    this.interceptServerDataCallback_ = null;\n    /** A list of data pieces and paths to be set when this client disconnects. */\n\n    this.onDisconnect_ = newSparseSnapshotTree();\n    /** Stores queues of outstanding transactions for Firebase locations. */\n\n    this.transactionQueueTree_ = new Tree(); // TODO: This should be @private but it's used by test_access.js and internal.js\n\n    this.persistentConnection_ = null; // This key is intentionally not updated if RepoInfo is later changed or replaced\n\n    this.key = this.repoInfo_.toURLString();\n  }\n  /**\r\n   * @returns The URL corresponding to the root of this Firebase.\r\n   */\n\n\n  toString() {\n    return (this.repoInfo_.secure ? 'https://' : 'http://') + this.repoInfo_.host;\n  }\n\n}\n\nfunction repoStart(repo, appId, authOverride) {\n  repo.stats_ = statsManagerGetCollection(repo.repoInfo_);\n\n  if (repo.forceRestClient_ || beingCrawled()) {\n    repo.server_ = new ReadonlyRestClient(repo.repoInfo_, (pathString, data, isMerge, tag) => {\n      repoOnDataUpdate(repo, pathString, data, isMerge, tag);\n    }, repo.authTokenProvider_, repo.appCheckProvider_); // Minor hack: Fire onConnect immediately, since there's no actual connection.\n\n    setTimeout(() => repoOnConnectStatus(repo,\n    /* connectStatus= */\n    true), 0);\n  } else {\n    // Validate authOverride\n    if (typeof authOverride !== 'undefined' && authOverride !== null) {\n      if (typeof authOverride !== 'object') {\n        throw new Error('Only objects are supported for option databaseAuthVariableOverride');\n      }\n\n      try {\n        stringify(authOverride);\n      } catch (e) {\n        throw new Error('Invalid authOverride provided: ' + e);\n      }\n    }\n\n    repo.persistentConnection_ = new PersistentConnection(repo.repoInfo_, appId, (pathString, data, isMerge, tag) => {\n      repoOnDataUpdate(repo, pathString, data, isMerge, tag);\n    }, connectStatus => {\n      repoOnConnectStatus(repo, connectStatus);\n    }, updates => {\n      repoOnServerInfoUpdate(repo, updates);\n    }, repo.authTokenProvider_, repo.appCheckProvider_, authOverride);\n    repo.server_ = repo.persistentConnection_;\n  }\n\n  repo.authTokenProvider_.addTokenChangeListener(token => {\n    repo.server_.refreshAuthToken(token);\n  });\n  repo.appCheckProvider_.addTokenChangeListener(result => {\n    repo.server_.refreshAppCheckToken(result.token);\n  }); // In the case of multiple Repos for the same repoInfo (i.e. there are multiple Firebase.Contexts being used),\n  // we only want to create one StatsReporter.  As such, we'll report stats over the first Repo created.\n\n  repo.statsReporter_ = statsManagerGetOrCreateReporter(repo.repoInfo_, () => new StatsReporter(repo.stats_, repo.server_)); // Used for .info.\n\n  repo.infoData_ = new SnapshotHolder();\n  repo.infoSyncTree_ = new SyncTree({\n    startListening: (query, tag, currentHashFn, onComplete) => {\n      let infoEvents = [];\n      const node = repo.infoData_.getNode(query._path); // This is possibly a hack, but we have different semantics for .info endpoints. We don't raise null events\n      // on initial data...\n\n      if (!node.isEmpty()) {\n        infoEvents = syncTreeApplyServerOverwrite(repo.infoSyncTree_, query._path, node);\n        setTimeout(() => {\n          onComplete('ok');\n        }, 0);\n      }\n\n      return infoEvents;\n    },\n    stopListening: () => {}\n  });\n  repoUpdateInfo(repo, 'connected', false);\n  repo.serverSyncTree_ = new SyncTree({\n    startListening: (query, tag, currentHashFn, onComplete) => {\n      repo.server_.listen(query, currentHashFn, tag, (status, data) => {\n        const events = onComplete(status, data);\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, query._path, events);\n      }); // No synchronous events for network-backed sync trees\n\n      return [];\n    },\n    stopListening: (query, tag) => {\n      repo.server_.unlisten(query, tag);\n    }\n  });\n}\n/**\r\n * @returns The time in milliseconds, taking the server offset into account if we have one.\r\n */\n\n\nfunction repoServerTime(repo) {\n  const offsetNode = repo.infoData_.getNode(new Path('.info/serverTimeOffset'));\n  const offset = offsetNode.val() || 0;\n  return new Date().getTime() + offset;\n}\n/**\r\n * Generate ServerValues using some variables from the repo object.\r\n */\n\n\nfunction repoGenerateServerValues(repo) {\n  return generateWithValues({\n    timestamp: repoServerTime(repo)\n  });\n}\n/**\r\n * Called by realtime when we get new messages from the server.\r\n */\n\n\nfunction repoOnDataUpdate(repo, pathString, data, isMerge, tag) {\n  // For testing.\n  repo.dataUpdateCount++;\n  const path = new Path(pathString);\n  data = repo.interceptServerDataCallback_ ? repo.interceptServerDataCallback_(pathString, data) : data;\n  let events = [];\n\n  if (tag) {\n    if (isMerge) {\n      const taggedChildren = map(data, raw => nodeFromJSON(raw));\n      events = syncTreeApplyTaggedQueryMerge(repo.serverSyncTree_, path, taggedChildren, tag);\n    } else {\n      const taggedSnap = nodeFromJSON(data);\n      events = syncTreeApplyTaggedQueryOverwrite(repo.serverSyncTree_, path, taggedSnap, tag);\n    }\n  } else if (isMerge) {\n    const changedChildren = map(data, raw => nodeFromJSON(raw));\n    events = syncTreeApplyServerMerge(repo.serverSyncTree_, path, changedChildren);\n  } else {\n    const snap = nodeFromJSON(data);\n    events = syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap);\n  }\n\n  let affectedPath = path;\n\n  if (events.length > 0) {\n    // Since we have a listener outstanding for each transaction, receiving any events\n    // is a proxy for some change having occurred.\n    affectedPath = repoRerunTransactions(repo, path);\n  }\n\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, events);\n}\n\nfunction repoOnConnectStatus(repo, connectStatus) {\n  repoUpdateInfo(repo, 'connected', connectStatus);\n\n  if (connectStatus === false) {\n    repoRunOnDisconnectEvents(repo);\n  }\n}\n\nfunction repoOnServerInfoUpdate(repo, updates) {\n  each(updates, (key, value) => {\n    repoUpdateInfo(repo, key, value);\n  });\n}\n\nfunction repoUpdateInfo(repo, pathString, value) {\n  const path = new Path('/.info/' + pathString);\n  const newNode = nodeFromJSON(value);\n  repo.infoData_.updateSnapshot(path, newNode);\n  const events = syncTreeApplyServerOverwrite(repo.infoSyncTree_, path, newNode);\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n}\n\nfunction repoGetNextWriteId(repo) {\n  return repo.nextWriteId_++;\n}\n/**\r\n * The purpose of `getValue` is to return the latest known value\r\n * satisfying `query`.\r\n *\r\n * This method will first check for in-memory cached values\r\n * belonging to active listeners. If they are found, such values\r\n * are considered to be the most up-to-date.\r\n *\r\n * If the client is not connected, this method will try to\r\n * establish a connection and request the value for `query`. If\r\n * the client is not able to retrieve the query result, it reports\r\n * an error.\r\n *\r\n * @param query - The query to surface a value for.\r\n */\n\n\nfunction repoGetValue(repo, query) {\n  // Only active queries are cached. There is no persisted cache.\n  const cached = syncTreeGetServerValue(repo.serverSyncTree_, query);\n\n  if (cached != null) {\n    return Promise.resolve(cached);\n  }\n\n  return repo.server_.get(query).then(payload => {\n    const node = nodeFromJSON(payload).withIndex(query._queryParams.getIndex());\n    const events = syncTreeApplyServerOverwrite(repo.serverSyncTree_, query._path, node);\n    eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\n    return Promise.resolve(node);\n  }, err => {\n    repoLog(repo, 'get for query ' + stringify(query) + ' failed: ' + err);\n    return Promise.reject(new Error(err));\n  });\n}\n\nfunction repoSetWithPriority(repo, path, newVal, newPriority, onComplete) {\n  repoLog(repo, 'set', {\n    path: path.toString(),\n    value: newVal,\n    priority: newPriority\n  }); // TODO: Optimize this behavior to either (a) store flag to skip resolving where possible and / or\n  // (b) store unresolved paths on JSON parse\n\n  const serverValues = repoGenerateServerValues(repo);\n  const newNodeUnresolved = nodeFromJSON(newVal, newPriority);\n  const existing = syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path);\n  const newNode = resolveDeferredValueSnapshot(newNodeUnresolved, existing, serverValues);\n  const writeId = repoGetNextWriteId(repo);\n  const events = syncTreeApplyUserOverwrite(repo.serverSyncTree_, path, newNode, writeId, true);\n  eventQueueQueueEvents(repo.eventQueue_, events);\n  repo.server_.put(path.toString(), newNodeUnresolved.val(\n  /*export=*/\n  true), (status, errorReason) => {\n    const success = status === 'ok';\n\n    if (!success) {\n      warn('set at ' + path + ' failed: ' + status);\n    }\n\n    const clearEvents = syncTreeAckUserWrite(repo.serverSyncTree_, writeId, !success);\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, clearEvents);\n    repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n  });\n  const affectedPath = repoAbortTransactions(repo, path);\n  repoRerunTransactions(repo, affectedPath); // We queued the events above, so just flush the queue here\n\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, []);\n}\n\nfunction repoUpdate(repo, path, childrenToMerge, onComplete) {\n  repoLog(repo, 'update', {\n    path: path.toString(),\n    value: childrenToMerge\n  }); // Start with our existing data and merge each child into it.\n\n  let empty = true;\n  const serverValues = repoGenerateServerValues(repo);\n  const changedChildren = {};\n  each(childrenToMerge, (changedKey, changedValue) => {\n    empty = false;\n    changedChildren[changedKey] = resolveDeferredValueTree(pathChild(path, changedKey), nodeFromJSON(changedValue), repo.serverSyncTree_, serverValues);\n  });\n\n  if (!empty) {\n    const writeId = repoGetNextWriteId(repo);\n    const events = syncTreeApplyUserMerge(repo.serverSyncTree_, path, changedChildren, writeId);\n    eventQueueQueueEvents(repo.eventQueue_, events);\n    repo.server_.merge(path.toString(), childrenToMerge, (status, errorReason) => {\n      const success = status === 'ok';\n\n      if (!success) {\n        warn('update at ' + path + ' failed: ' + status);\n      }\n\n      const clearEvents = syncTreeAckUserWrite(repo.serverSyncTree_, writeId, !success);\n      const affectedPath = clearEvents.length > 0 ? repoRerunTransactions(repo, path) : path;\n      eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, clearEvents);\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    });\n    each(childrenToMerge, changedPath => {\n      const affectedPath = repoAbortTransactions(repo, pathChild(path, changedPath));\n      repoRerunTransactions(repo, affectedPath);\n    }); // We queued the events above, so just flush the queue here\n\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, []);\n  } else {\n    log(\"update() called with empty data.  Don't do anything.\");\n    repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\n  }\n}\n/**\r\n * Applies all of the changes stored up in the onDisconnect_ tree.\r\n */\n\n\nfunction repoRunOnDisconnectEvents(repo) {\n  repoLog(repo, 'onDisconnectEvents');\n  const serverValues = repoGenerateServerValues(repo);\n  const resolvedOnDisconnectTree = newSparseSnapshotTree();\n  sparseSnapshotTreeForEachTree(repo.onDisconnect_, newEmptyPath(), (path, node) => {\n    const resolved = resolveDeferredValueTree(path, node, repo.serverSyncTree_, serverValues);\n    sparseSnapshotTreeRemember(resolvedOnDisconnectTree, path, resolved);\n  });\n  let events = [];\n  sparseSnapshotTreeForEachTree(resolvedOnDisconnectTree, newEmptyPath(), (path, snap) => {\n    events = events.concat(syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap));\n    const affectedPath = repoAbortTransactions(repo, path);\n    repoRerunTransactions(repo, affectedPath);\n  });\n  repo.onDisconnect_ = newSparseSnapshotTree();\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, newEmptyPath(), events);\n}\n\nfunction repoOnDisconnectCancel(repo, path, onComplete) {\n  repo.server_.onDisconnectCancel(path.toString(), (status, errorReason) => {\n    if (status === 'ok') {\n      sparseSnapshotTreeForget(repo.onDisconnect_, path);\n    }\n\n    repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n  });\n}\n\nfunction repoOnDisconnectSet(repo, path, value, onComplete) {\n  const newNode = nodeFromJSON(value);\n  repo.server_.onDisconnectPut(path.toString(), newNode.val(\n  /*export=*/\n  true), (status, errorReason) => {\n    if (status === 'ok') {\n      sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\n    }\n\n    repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n  });\n}\n\nfunction repoOnDisconnectSetWithPriority(repo, path, value, priority, onComplete) {\n  const newNode = nodeFromJSON(value, priority);\n  repo.server_.onDisconnectPut(path.toString(), newNode.val(\n  /*export=*/\n  true), (status, errorReason) => {\n    if (status === 'ok') {\n      sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\n    }\n\n    repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n  });\n}\n\nfunction repoOnDisconnectUpdate(repo, path, childrenToMerge, onComplete) {\n  if (isEmpty(childrenToMerge)) {\n    log(\"onDisconnect().update() called with empty data.  Don't do anything.\");\n    repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\n    return;\n  }\n\n  repo.server_.onDisconnectMerge(path.toString(), childrenToMerge, (status, errorReason) => {\n    if (status === 'ok') {\n      each(childrenToMerge, (childName, childNode) => {\n        const newChildNode = nodeFromJSON(childNode);\n        sparseSnapshotTreeRemember(repo.onDisconnect_, pathChild(path, childName), newChildNode);\n      });\n    }\n\n    repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n  });\n}\n\nfunction repoAddEventCallbackForQuery(repo, query, eventRegistration) {\n  let events;\n\n  if (pathGetFront(query._path) === '.info') {\n    events = syncTreeAddEventRegistration(repo.infoSyncTree_, query, eventRegistration);\n  } else {\n    events = syncTreeAddEventRegistration(repo.serverSyncTree_, query, eventRegistration);\n  }\n\n  eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\n}\n\nfunction repoRemoveEventCallbackForQuery(repo, query, eventRegistration) {\n  // These are guaranteed not to raise events, since we're not passing in a cancelError. However, we can future-proof\n  // a little bit by handling the return values anyways.\n  let events;\n\n  if (pathGetFront(query._path) === '.info') {\n    events = syncTreeRemoveEventRegistration(repo.infoSyncTree_, query, eventRegistration);\n  } else {\n    events = syncTreeRemoveEventRegistration(repo.serverSyncTree_, query, eventRegistration);\n  }\n\n  eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\n}\n\nfunction repoInterrupt(repo) {\n  if (repo.persistentConnection_) {\n    repo.persistentConnection_.interrupt(INTERRUPT_REASON);\n  }\n}\n\nfunction repoResume(repo) {\n  if (repo.persistentConnection_) {\n    repo.persistentConnection_.resume(INTERRUPT_REASON);\n  }\n}\n\nfunction repoLog(repo) {\n  let prefix = '';\n\n  if (repo.persistentConnection_) {\n    prefix = repo.persistentConnection_.id + ':';\n  }\n\n  for (var _len6 = arguments.length, varArgs = new Array(_len6 > 1 ? _len6 - 1 : 0), _key7 = 1; _key7 < _len6; _key7++) {\n    varArgs[_key7 - 1] = arguments[_key7];\n  }\n\n  log(prefix, ...varArgs);\n}\n\nfunction repoCallOnCompleteCallback(repo, callback, status, errorReason) {\n  if (callback) {\n    exceptionGuard(() => {\n      if (status === 'ok') {\n        callback(null);\n      } else {\n        const code = (status || 'error').toUpperCase();\n        let message = code;\n\n        if (errorReason) {\n          message += ': ' + errorReason;\n        }\n\n        const error = new Error(message); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n        error.code = code;\n        callback(error);\n      }\n    });\n  }\n}\n/**\r\n * Creates a new transaction, adds it to the transactions we're tracking, and\r\n * sends it to the server if possible.\r\n *\r\n * @param path - Path at which to do transaction.\r\n * @param transactionUpdate - Update callback.\r\n * @param onComplete - Completion callback.\r\n * @param unwatcher - Function that will be called when the transaction no longer\r\n * need data updates for `path`.\r\n * @param applyLocally - Whether or not to make intermediate results visible\r\n */\n\n\nfunction repoStartTransaction(repo, path, transactionUpdate, onComplete, unwatcher, applyLocally) {\n  repoLog(repo, 'transaction on ' + path); // Initialize transaction.\n\n  const transaction = {\n    path,\n    update: transactionUpdate,\n    onComplete,\n    // One of TransactionStatus enums.\n    status: null,\n    // Used when combining transactions at different locations to figure out\n    // which one goes first.\n    order: LUIDGenerator(),\n    // Whether to raise local events for this transaction.\n    applyLocally,\n    // Count of how many times we've retried the transaction.\n    retryCount: 0,\n    // Function to call to clean up our .on() listener.\n    unwatcher,\n    // Stores why a transaction was aborted.\n    abortReason: null,\n    currentWriteId: null,\n    currentInputSnapshot: null,\n    currentOutputSnapshotRaw: null,\n    currentOutputSnapshotResolved: null\n  }; // Run transaction initially.\n\n  const currentState = repoGetLatestState(repo, path, undefined);\n  transaction.currentInputSnapshot = currentState;\n  const newVal = transaction.update(currentState.val());\n\n  if (newVal === undefined) {\n    // Abort transaction.\n    transaction.unwatcher();\n    transaction.currentOutputSnapshotRaw = null;\n    transaction.currentOutputSnapshotResolved = null;\n\n    if (transaction.onComplete) {\n      transaction.onComplete(null, false, transaction.currentInputSnapshot);\n    }\n  } else {\n    validateFirebaseData('transaction failed: Data returned ', newVal, transaction.path); // Mark as run and add to our queue.\n\n    transaction.status = 0\n    /* RUN */\n    ;\n    const queueNode = treeSubTree(repo.transactionQueueTree_, path);\n    const nodeQueue = treeGetValue(queueNode) || [];\n    nodeQueue.push(transaction);\n    treeSetValue(queueNode, nodeQueue); // Update visibleData and raise events\n    // Note: We intentionally raise events after updating all of our\n    // transaction state, since the user could start new transactions from the\n    // event callbacks.\n\n    let priorityForNode;\n\n    if (typeof newVal === 'object' && newVal !== null && contains(newVal, '.priority')) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      priorityForNode = safeGet(newVal, '.priority');\n      assert(isValidPriority(priorityForNode), 'Invalid priority returned by transaction. ' + 'Priority must be a valid string, finite number, server value, or null.');\n    } else {\n      const currentNode = syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path) || ChildrenNode.EMPTY_NODE;\n      priorityForNode = currentNode.getPriority().val();\n    }\n\n    const serverValues = repoGenerateServerValues(repo);\n    const newNodeUnresolved = nodeFromJSON(newVal, priorityForNode);\n    const newNode = resolveDeferredValueSnapshot(newNodeUnresolved, currentState, serverValues);\n    transaction.currentOutputSnapshotRaw = newNodeUnresolved;\n    transaction.currentOutputSnapshotResolved = newNode;\n    transaction.currentWriteId = repoGetNextWriteId(repo);\n    const events = syncTreeApplyUserOverwrite(repo.serverSyncTree_, path, newNode, transaction.currentWriteId, transaction.applyLocally);\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n    repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n  }\n}\n/**\r\n * @param excludeSets - A specific set to exclude\r\n */\n\n\nfunction repoGetLatestState(repo, path, excludeSets) {\n  return syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path, excludeSets) || ChildrenNode.EMPTY_NODE;\n}\n/**\r\n * Sends any already-run transactions that aren't waiting for outstanding\r\n * transactions to complete.\r\n *\r\n * Externally it's called with no arguments, but it calls itself recursively\r\n * with a particular transactionQueueTree node to recurse through the tree.\r\n *\r\n * @param node - transactionQueueTree node to start at.\r\n */\n\n\nfunction repoSendReadyTransactions(repo) {\n  let node = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : repo.transactionQueueTree_;\n\n  // Before recursing, make sure any completed transactions are removed.\n  if (!node) {\n    repoPruneCompletedTransactionsBelowNode(repo, node);\n  }\n\n  if (treeGetValue(node)) {\n    const queue = repoBuildTransactionQueue(repo, node);\n    assert(queue.length > 0, 'Sending zero length transaction queue');\n    const allRun = queue.every(transaction => transaction.status === 0\n    /* RUN */\n    ); // If they're all run (and not sent), we can send them.  Else, we must wait.\n\n    if (allRun) {\n      repoSendTransactionQueue(repo, treeGetPath(node), queue);\n    }\n  } else if (treeHasChildren(node)) {\n    treeForEachChild(node, childNode => {\n      repoSendReadyTransactions(repo, childNode);\n    });\n  }\n}\n/**\r\n * Given a list of run transactions, send them to the server and then handle\r\n * the result (success or failure).\r\n *\r\n * @param path - The location of the queue.\r\n * @param queue - Queue of transactions under the specified location.\r\n */\n\n\nfunction repoSendTransactionQueue(repo, path, queue) {\n  // Mark transactions as sent and increment retry count!\n  const setsToIgnore = queue.map(txn => {\n    return txn.currentWriteId;\n  });\n  const latestState = repoGetLatestState(repo, path, setsToIgnore);\n  let snapToSend = latestState;\n  const latestHash = latestState.hash();\n\n  for (let i = 0; i < queue.length; i++) {\n    const txn = queue[i];\n    assert(txn.status === 0\n    /* RUN */\n    , 'tryToSendTransactionQueue_: items in queue should all be run.');\n    txn.status = 1\n    /* SENT */\n    ;\n    txn.retryCount++;\n    const relativePath = newRelativePath(path, txn.path); // If we've gotten to this point, the output snapshot must be defined.\n\n    snapToSend = snapToSend.updateChild(relativePath\n    /** @type {!Node} */\n    , txn.currentOutputSnapshotRaw);\n  }\n\n  const dataToSend = snapToSend.val(true);\n  const pathToSend = path; // Send the put.\n\n  repo.server_.put(pathToSend.toString(), dataToSend, status => {\n    repoLog(repo, 'transaction put response', {\n      path: pathToSend.toString(),\n      status\n    });\n    let events = [];\n\n    if (status === 'ok') {\n      // Queue up the callbacks and fire them after cleaning up all of our\n      // transaction state, since the callback could trigger more\n      // transactions or sets.\n      const callbacks = [];\n\n      for (let i = 0; i < queue.length; i++) {\n        queue[i].status = 2\n        /* COMPLETED */\n        ;\n        events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, queue[i].currentWriteId));\n\n        if (queue[i].onComplete) {\n          // We never unset the output snapshot, and given that this\n          // transaction is complete, it should be set\n          callbacks.push(() => queue[i].onComplete(null, true, queue[i].currentOutputSnapshotResolved));\n        }\n\n        queue[i].unwatcher();\n      } // Now remove the completed transactions.\n\n\n      repoPruneCompletedTransactionsBelowNode(repo, treeSubTree(repo.transactionQueueTree_, path)); // There may be pending transactions that we can now send.\n\n      repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n      eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events); // Finally, trigger onComplete callbacks.\n\n      for (let i = 0; i < callbacks.length; i++) {\n        exceptionGuard(callbacks[i]);\n      }\n    } else {\n      // transactions are no longer sent.  Update their status appropriately.\n      if (status === 'datastale') {\n        for (let i = 0; i < queue.length; i++) {\n          if (queue[i].status === 3\n          /* SENT_NEEDS_ABORT */\n          ) {\n            queue[i].status = 4\n            /* NEEDS_ABORT */\n            ;\n          } else {\n            queue[i].status = 0\n            /* RUN */\n            ;\n          }\n        }\n      } else {\n        warn('transaction at ' + pathToSend.toString() + ' failed: ' + status);\n\n        for (let i = 0; i < queue.length; i++) {\n          queue[i].status = 4\n          /* NEEDS_ABORT */\n          ;\n          queue[i].abortReason = status;\n        }\n      }\n\n      repoRerunTransactions(repo, path);\n    }\n  }, latestHash);\n}\n/**\r\n * Finds all transactions dependent on the data at changedPath and reruns them.\r\n *\r\n * Should be called any time cached data changes.\r\n *\r\n * Return the highest path that was affected by rerunning transactions. This\r\n * is the path at which events need to be raised for.\r\n *\r\n * @param changedPath - The path in mergedData that changed.\r\n * @returns The rootmost path that was affected by rerunning transactions.\r\n */\n\n\nfunction repoRerunTransactions(repo, changedPath) {\n  const rootMostTransactionNode = repoGetAncestorTransactionNode(repo, changedPath);\n  const path = treeGetPath(rootMostTransactionNode);\n  const queue = repoBuildTransactionQueue(repo, rootMostTransactionNode);\n  repoRerunTransactionQueue(repo, queue, path);\n  return path;\n}\n/**\r\n * Does all the work of rerunning transactions (as well as cleans up aborted\r\n * transactions and whatnot).\r\n *\r\n * @param queue - The queue of transactions to run.\r\n * @param path - The path the queue is for.\r\n */\n\n\nfunction repoRerunTransactionQueue(repo, queue, path) {\n  if (queue.length === 0) {\n    return; // Nothing to do!\n  } // Queue up the callbacks and fire them after cleaning up all of our\n  // transaction state, since the callback could trigger more transactions or\n  // sets.\n\n\n  const callbacks = [];\n  let events = []; // Ignore all of the sets we're going to re-run.\n\n  const txnsToRerun = queue.filter(q => {\n    return q.status === 0\n    /* RUN */\n    ;\n  });\n  const setsToIgnore = txnsToRerun.map(q => {\n    return q.currentWriteId;\n  });\n\n  for (let i = 0; i < queue.length; i++) {\n    const transaction = queue[i];\n    const relativePath = newRelativePath(path, transaction.path);\n    let abortTransaction = false,\n        abortReason;\n    assert(relativePath !== null, 'rerunTransactionsUnderNode_: relativePath should not be null.');\n\n    if (transaction.status === 4\n    /* NEEDS_ABORT */\n    ) {\n      abortTransaction = true;\n      abortReason = transaction.abortReason;\n      events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));\n    } else if (transaction.status === 0\n    /* RUN */\n    ) {\n      if (transaction.retryCount >= MAX_TRANSACTION_RETRIES) {\n        abortTransaction = true;\n        abortReason = 'maxretry';\n        events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));\n      } else {\n        // This code reruns a transaction\n        const currentNode = repoGetLatestState(repo, transaction.path, setsToIgnore);\n        transaction.currentInputSnapshot = currentNode;\n        const newData = queue[i].update(currentNode.val());\n\n        if (newData !== undefined) {\n          validateFirebaseData('transaction failed: Data returned ', newData, transaction.path);\n          let newDataNode = nodeFromJSON(newData);\n          const hasExplicitPriority = typeof newData === 'object' && newData != null && contains(newData, '.priority');\n\n          if (!hasExplicitPriority) {\n            // Keep the old priority if there wasn't a priority explicitly specified.\n            newDataNode = newDataNode.updatePriority(currentNode.getPriority());\n          }\n\n          const oldWriteId = transaction.currentWriteId;\n          const serverValues = repoGenerateServerValues(repo);\n          const newNodeResolved = resolveDeferredValueSnapshot(newDataNode, currentNode, serverValues);\n          transaction.currentOutputSnapshotRaw = newDataNode;\n          transaction.currentOutputSnapshotResolved = newNodeResolved;\n          transaction.currentWriteId = repoGetNextWriteId(repo); // Mutates setsToIgnore in place\n\n          setsToIgnore.splice(setsToIgnore.indexOf(oldWriteId), 1);\n          events = events.concat(syncTreeApplyUserOverwrite(repo.serverSyncTree_, transaction.path, newNodeResolved, transaction.currentWriteId, transaction.applyLocally));\n          events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, oldWriteId, true));\n        } else {\n          abortTransaction = true;\n          abortReason = 'nodata';\n          events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));\n        }\n      }\n    }\n\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n    events = [];\n\n    if (abortTransaction) {\n      // Abort.\n      queue[i].status = 2\n      /* COMPLETED */\n      ; // Removing a listener can trigger pruning which can muck with\n      // mergedData/visibleData (as it prunes data). So defer the unwatcher\n      // until we're done.\n\n      (function (unwatcher) {\n        setTimeout(unwatcher, Math.floor(0));\n      })(queue[i].unwatcher);\n\n      if (queue[i].onComplete) {\n        if (abortReason === 'nodata') {\n          callbacks.push(() => queue[i].onComplete(null, false, queue[i].currentInputSnapshot));\n        } else {\n          callbacks.push(() => queue[i].onComplete(new Error(abortReason), false, null));\n        }\n      }\n    }\n  } // Clean up completed transactions.\n\n\n  repoPruneCompletedTransactionsBelowNode(repo, repo.transactionQueueTree_); // Now fire callbacks, now that we're in a good, known state.\n\n  for (let i = 0; i < callbacks.length; i++) {\n    exceptionGuard(callbacks[i]);\n  } // Try to send the transaction result to the server.\n\n\n  repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n}\n/**\r\n * Returns the rootmost ancestor node of the specified path that has a pending\r\n * transaction on it, or just returns the node for the given path if there are\r\n * no pending transactions on any ancestor.\r\n *\r\n * @param path - The location to start at.\r\n * @returns The rootmost node with a transaction.\r\n */\n\n\nfunction repoGetAncestorTransactionNode(repo, path) {\n  let front; // Start at the root and walk deeper into the tree towards path until we\n  // find a node with pending transactions.\n\n  let transactionNode = repo.transactionQueueTree_;\n  front = pathGetFront(path);\n\n  while (front !== null && treeGetValue(transactionNode) === undefined) {\n    transactionNode = treeSubTree(transactionNode, front);\n    path = pathPopFront(path);\n    front = pathGetFront(path);\n  }\n\n  return transactionNode;\n}\n/**\r\n * Builds the queue of all transactions at or below the specified\r\n * transactionNode.\r\n *\r\n * @param transactionNode\r\n * @returns The generated queue.\r\n */\n\n\nfunction repoBuildTransactionQueue(repo, transactionNode) {\n  // Walk any child transaction queues and aggregate them into a single queue.\n  const transactionQueue = [];\n  repoAggregateTransactionQueuesForNode(repo, transactionNode, transactionQueue); // Sort them by the order the transactions were created.\n\n  transactionQueue.sort((a, b) => a.order - b.order);\n  return transactionQueue;\n}\n\nfunction repoAggregateTransactionQueuesForNode(repo, node, queue) {\n  const nodeQueue = treeGetValue(node);\n\n  if (nodeQueue) {\n    for (let i = 0; i < nodeQueue.length; i++) {\n      queue.push(nodeQueue[i]);\n    }\n  }\n\n  treeForEachChild(node, child => {\n    repoAggregateTransactionQueuesForNode(repo, child, queue);\n  });\n}\n/**\r\n * Remove COMPLETED transactions at or below this node in the transactionQueueTree_.\r\n */\n\n\nfunction repoPruneCompletedTransactionsBelowNode(repo, node) {\n  const queue = treeGetValue(node);\n\n  if (queue) {\n    let to = 0;\n\n    for (let from = 0; from < queue.length; from++) {\n      if (queue[from].status !== 2\n      /* COMPLETED */\n      ) {\n        queue[to] = queue[from];\n        to++;\n      }\n    }\n\n    queue.length = to;\n    treeSetValue(node, queue.length > 0 ? queue : undefined);\n  }\n\n  treeForEachChild(node, childNode => {\n    repoPruneCompletedTransactionsBelowNode(repo, childNode);\n  });\n}\n/**\r\n * Aborts all transactions on ancestors or descendants of the specified path.\r\n * Called when doing a set() or update() since we consider them incompatible\r\n * with transactions.\r\n *\r\n * @param path - Path for which we want to abort related transactions.\r\n */\n\n\nfunction repoAbortTransactions(repo, path) {\n  const affectedPath = treeGetPath(repoGetAncestorTransactionNode(repo, path));\n  const transactionNode = treeSubTree(repo.transactionQueueTree_, path);\n  treeForEachAncestor(transactionNode, node => {\n    repoAbortTransactionsOnNode(repo, node);\n  });\n  repoAbortTransactionsOnNode(repo, transactionNode);\n  treeForEachDescendant(transactionNode, node => {\n    repoAbortTransactionsOnNode(repo, node);\n  });\n  return affectedPath;\n}\n/**\r\n * Abort transactions stored in this transaction queue node.\r\n *\r\n * @param node - Node to abort transactions for.\r\n */\n\n\nfunction repoAbortTransactionsOnNode(repo, node) {\n  const queue = treeGetValue(node);\n\n  if (queue) {\n    // Queue up the callbacks and fire them after cleaning up all of our\n    // transaction state, since the callback could trigger more transactions\n    // or sets.\n    const callbacks = []; // Go through queue.  Any already-sent transactions must be marked for\n    // abort, while the unsent ones can be immediately aborted and removed.\n\n    let events = [];\n    let lastSent = -1;\n\n    for (let i = 0; i < queue.length; i++) {\n      if (queue[i].status === 3\n      /* SENT_NEEDS_ABORT */\n      ) ;else if (queue[i].status === 1\n      /* SENT */\n      ) {\n        assert(lastSent === i - 1, 'All SENT items should be at beginning of queue.');\n        lastSent = i; // Mark transaction for abort when it comes back.\n\n        queue[i].status = 3\n        /* SENT_NEEDS_ABORT */\n        ;\n        queue[i].abortReason = 'set';\n      } else {\n        assert(queue[i].status === 0\n        /* RUN */\n        , 'Unexpected transaction status in abort'); // We can abort it immediately.\n\n        queue[i].unwatcher();\n        events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, queue[i].currentWriteId, true));\n\n        if (queue[i].onComplete) {\n          callbacks.push(queue[i].onComplete.bind(null, new Error('set'), false, null));\n        }\n      }\n    }\n\n    if (lastSent === -1) {\n      // We're not waiting for any sent transactions.  We can clear the queue.\n      treeSetValue(node, undefined);\n    } else {\n      // Remove the transactions we aborted.\n      queue.length = lastSent + 1;\n    } // Now fire the callbacks.\n\n\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, treeGetPath(node), events);\n\n    for (let i = 0; i < callbacks.length; i++) {\n      exceptionGuard(callbacks[i]);\n    }\n  }\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction decodePath(pathString) {\n  let pathStringDecoded = '';\n  const pieces = pathString.split('/');\n\n  for (let i = 0; i < pieces.length; i++) {\n    if (pieces[i].length > 0) {\n      let piece = pieces[i];\n\n      try {\n        piece = decodeURIComponent(piece.replace(/\\+/g, ' '));\n      } catch (e) {}\n\n      pathStringDecoded += '/' + piece;\n    }\n  }\n\n  return pathStringDecoded;\n}\n/**\r\n * @returns key value hash\r\n */\n\n\nfunction decodeQuery(queryString) {\n  const results = {};\n\n  if (queryString.charAt(0) === '?') {\n    queryString = queryString.substring(1);\n  }\n\n  for (const segment of queryString.split('&')) {\n    if (segment.length === 0) {\n      continue;\n    }\n\n    const kv = segment.split('=');\n\n    if (kv.length === 2) {\n      results[decodeURIComponent(kv[0])] = decodeURIComponent(kv[1]);\n    } else {\n      warn(`Invalid query segment '${segment}' in query '${queryString}'`);\n    }\n  }\n\n  return results;\n}\n\nconst parseRepoInfo = function (dataURL, nodeAdmin) {\n  const parsedUrl = parseDatabaseURL(dataURL),\n        namespace = parsedUrl.namespace;\n\n  if (parsedUrl.domain === 'firebase.com') {\n    fatal(parsedUrl.host + ' is no longer supported. ' + 'Please use <YOUR FIREBASE>.firebaseio.com instead');\n  } // Catch common error of uninitialized namespace value.\n\n\n  if ((!namespace || namespace === 'undefined') && parsedUrl.domain !== 'localhost') {\n    fatal('Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com');\n  }\n\n  if (!parsedUrl.secure) {\n    warnIfPageIsSecure();\n  }\n\n  const webSocketOnly = parsedUrl.scheme === 'ws' || parsedUrl.scheme === 'wss';\n  return {\n    repoInfo: new RepoInfo(parsedUrl.host, parsedUrl.secure, namespace, nodeAdmin, webSocketOnly,\n    /*persistenceKey=*/\n    '',\n    /*includeNamespaceInQueryParams=*/\n    namespace !== parsedUrl.subdomain),\n    path: new Path(parsedUrl.pathString)\n  };\n};\n\nconst parseDatabaseURL = function (dataURL) {\n  // Default to empty strings in the event of a malformed string.\n  let host = '',\n      domain = '',\n      subdomain = '',\n      pathString = '',\n      namespace = ''; // Always default to SSL, unless otherwise specified.\n\n  let secure = true,\n      scheme = 'https',\n      port = 443; // Don't do any validation here. The caller is responsible for validating the result of parsing.\n\n  if (typeof dataURL === 'string') {\n    // Parse scheme.\n    let colonInd = dataURL.indexOf('//');\n\n    if (colonInd >= 0) {\n      scheme = dataURL.substring(0, colonInd - 1);\n      dataURL = dataURL.substring(colonInd + 2);\n    } // Parse host, path, and query string.\n\n\n    let slashInd = dataURL.indexOf('/');\n\n    if (slashInd === -1) {\n      slashInd = dataURL.length;\n    }\n\n    let questionMarkInd = dataURL.indexOf('?');\n\n    if (questionMarkInd === -1) {\n      questionMarkInd = dataURL.length;\n    }\n\n    host = dataURL.substring(0, Math.min(slashInd, questionMarkInd));\n\n    if (slashInd < questionMarkInd) {\n      // For pathString, questionMarkInd will always come after slashInd\n      pathString = decodePath(dataURL.substring(slashInd, questionMarkInd));\n    }\n\n    const queryParams = decodeQuery(dataURL.substring(Math.min(dataURL.length, questionMarkInd))); // If we have a port, use scheme for determining if it's secure.\n\n    colonInd = host.indexOf(':');\n\n    if (colonInd >= 0) {\n      secure = scheme === 'https' || scheme === 'wss';\n      port = parseInt(host.substring(colonInd + 1), 10);\n    } else {\n      colonInd = host.length;\n    }\n\n    const hostWithoutPort = host.slice(0, colonInd);\n\n    if (hostWithoutPort.toLowerCase() === 'localhost') {\n      domain = 'localhost';\n    } else if (hostWithoutPort.split('.').length <= 2) {\n      domain = hostWithoutPort;\n    } else {\n      // Interpret the subdomain of a 3 or more component URL as the namespace name.\n      const dotInd = host.indexOf('.');\n      subdomain = host.substring(0, dotInd).toLowerCase();\n      domain = host.substring(dotInd + 1); // Normalize namespaces to lowercase to share storage / connection.\n\n      namespace = subdomain;\n    } // Always treat the value of the `ns` as the namespace name if it is present.\n\n\n    if ('ns' in queryParams) {\n      namespace = queryParams['ns'];\n    }\n  }\n\n  return {\n    host,\n    port,\n    domain,\n    subdomain,\n    secure,\n    scheme,\n    pathString,\n    namespace\n  };\n};\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Encapsulates the data needed to raise an event\r\n */\n\n\nclass DataEvent {\n  /**\r\n   * @param eventType - One of: value, child_added, child_changed, child_moved, child_removed\r\n   * @param eventRegistration - The function to call to with the event data. User provided\r\n   * @param snapshot - The data backing the event\r\n   * @param prevName - Optional, the name of the previous child for child_* events.\r\n   */\n  constructor(eventType, eventRegistration, snapshot, prevName) {\n    this.eventType = eventType;\n    this.eventRegistration = eventRegistration;\n    this.snapshot = snapshot;\n    this.prevName = prevName;\n  }\n\n  getPath() {\n    const ref = this.snapshot.ref;\n\n    if (this.eventType === 'value') {\n      return ref._path;\n    } else {\n      return ref.parent._path;\n    }\n  }\n\n  getEventType() {\n    return this.eventType;\n  }\n\n  getEventRunner() {\n    return this.eventRegistration.getEventRunner(this);\n  }\n\n  toString() {\n    return this.getPath().toString() + ':' + this.eventType + ':' + stringify(this.snapshot.exportVal());\n  }\n\n}\n\nclass CancelEvent {\n  constructor(eventRegistration, error, path) {\n    this.eventRegistration = eventRegistration;\n    this.error = error;\n    this.path = path;\n  }\n\n  getPath() {\n    return this.path;\n  }\n\n  getEventType() {\n    return 'cancel';\n  }\n\n  getEventRunner() {\n    return this.eventRegistration.getEventRunner(this);\n  }\n\n  toString() {\n    return this.path.toString() + ':cancel';\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * A wrapper class that converts events from the database@exp SDK to the legacy\r\n * Database SDK. Events are not converted directly as event registration relies\r\n * on reference comparison of the original user callback (see `matches()`) and\r\n * relies on equality of the legacy SDK's `context` object.\r\n */\n\n\nclass CallbackContext {\n  constructor(snapshotCallback, cancelCallback) {\n    this.snapshotCallback = snapshotCallback;\n    this.cancelCallback = cancelCallback;\n  }\n\n  onValue(expDataSnapshot, previousChildName) {\n    this.snapshotCallback.call(null, expDataSnapshot, previousChildName);\n  }\n\n  onCancel(error) {\n    assert(this.hasCancelCallback, 'Raising a cancel event on a listener with no cancel callback');\n    return this.cancelCallback.call(null, error);\n  }\n\n  get hasCancelCallback() {\n    return !!this.cancelCallback;\n  }\n\n  matches(other) {\n    return this.snapshotCallback === other.snapshotCallback || this.snapshotCallback.userCallback !== undefined && this.snapshotCallback.userCallback === other.snapshotCallback.userCallback && this.snapshotCallback.context === other.snapshotCallback.context;\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * The `onDisconnect` class allows you to write or clear data when your client\r\n * disconnects from the Database server. These updates occur whether your\r\n * client disconnects cleanly or not, so you can rely on them to clean up data\r\n * even if a connection is dropped or a client crashes.\r\n *\r\n * The `onDisconnect` class is most commonly used to manage presence in\r\n * applications where it is useful to detect how many clients are connected and\r\n * when other clients disconnect. See\r\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\r\n * for more information.\r\n *\r\n * To avoid problems when a connection is dropped before the requests can be\r\n * transferred to the Database server, these functions should be called before\r\n * writing any data.\r\n *\r\n * Note that `onDisconnect` operations are only triggered once. If you want an\r\n * operation to occur each time a disconnect occurs, you'll need to re-establish\r\n * the `onDisconnect` operations each time you reconnect.\r\n */\n\n\nclass OnDisconnect {\n  /** @hideconstructor */\n  constructor(_repo, _path) {\n    this._repo = _repo;\n    this._path = _path;\n  }\n  /**\r\n   * Cancels all previously queued `onDisconnect()` set or update events for this\r\n   * location and all children.\r\n   *\r\n   * If a write has been queued for this location via a `set()` or `update()` at a\r\n   * parent location, the write at this location will be canceled, though writes\r\n   * to sibling locations will still occur.\r\n   *\r\n   * @returns Resolves when synchronization to the server is complete.\r\n   */\n\n\n  cancel() {\n    const deferred = new Deferred();\n    repoOnDisconnectCancel(this._repo, this._path, deferred.wrapCallback(() => {}));\n    return deferred.promise;\n  }\n  /**\r\n   * Ensures the data at this location is deleted when the client is disconnected\r\n   * (due to closing the browser, navigating to a new page, or network issues).\r\n   *\r\n   * @returns Resolves when synchronization to the server is complete.\r\n   */\n\n\n  remove() {\n    validateWritablePath('OnDisconnect.remove', this._path);\n    const deferred = new Deferred();\n    repoOnDisconnectSet(this._repo, this._path, null, deferred.wrapCallback(() => {}));\n    return deferred.promise;\n  }\n  /**\r\n   * Ensures the data at this location is set to the specified value when the\r\n   * client is disconnected (due to closing the browser, navigating to a new page,\r\n   * or network issues).\r\n   *\r\n   * `set()` is especially useful for implementing \"presence\" systems, where a\r\n   * value should be changed or cleared when a user disconnects so that they\r\n   * appear \"offline\" to other users. See\r\n   * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\r\n   * for more information.\r\n   *\r\n   * Note that `onDisconnect` operations are only triggered once. If you want an\r\n   * operation to occur each time a disconnect occurs, you'll need to re-establish\r\n   * the `onDisconnect` operations each time.\r\n   *\r\n   * @param value - The value to be written to this location on disconnect (can\r\n   * be an object, array, string, number, boolean, or null).\r\n   * @returns Resolves when synchronization to the Database is complete.\r\n   */\n\n\n  set(value) {\n    validateWritablePath('OnDisconnect.set', this._path);\n    validateFirebaseDataArg('OnDisconnect.set', value, this._path, false);\n    const deferred = new Deferred();\n    repoOnDisconnectSet(this._repo, this._path, value, deferred.wrapCallback(() => {}));\n    return deferred.promise;\n  }\n  /**\r\n   * Ensures the data at this location is set to the specified value and priority\r\n   * when the client is disconnected (due to closing the browser, navigating to a\r\n   * new page, or network issues).\r\n   *\r\n   * @param value - The value to be written to this location on disconnect (can\r\n   * be an object, array, string, number, boolean, or null).\r\n   * @param priority - The priority to be written (string, number, or null).\r\n   * @returns Resolves when synchronization to the Database is complete.\r\n   */\n\n\n  setWithPriority(value, priority) {\n    validateWritablePath('OnDisconnect.setWithPriority', this._path);\n    validateFirebaseDataArg('OnDisconnect.setWithPriority', value, this._path, false);\n    validatePriority('OnDisconnect.setWithPriority', priority, false);\n    const deferred = new Deferred();\n    repoOnDisconnectSetWithPriority(this._repo, this._path, value, priority, deferred.wrapCallback(() => {}));\n    return deferred.promise;\n  }\n  /**\r\n   * Writes multiple values at this location when the client is disconnected (due\r\n   * to closing the browser, navigating to a new page, or network issues).\r\n   *\r\n   * The `values` argument contains multiple property-value pairs that will be\r\n   * written to the Database together. Each child property can either be a simple\r\n   * property (for example, \"name\") or a relative path (for example, \"name/first\")\r\n   * from the current location to the data to update.\r\n   *\r\n   * As opposed to the `set()` method, `update()` can be use to selectively update\r\n   * only the referenced properties at the current location (instead of replacing\r\n   * all the child properties at the current location).\r\n   *\r\n   * @param values - Object containing multiple values.\r\n   * @returns Resolves when synchronization to the Database is complete.\r\n   */\n\n\n  update(values) {\n    validateWritablePath('OnDisconnect.update', this._path);\n    validateFirebaseMergeDataArg('OnDisconnect.update', values, this._path, false);\n    const deferred = new Deferred();\n    repoOnDisconnectUpdate(this._repo, this._path, values, deferred.wrapCallback(() => {}));\n    return deferred.promise;\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * @internal\r\n */\n\n\nclass QueryImpl {\n  /**\r\n   * @hideconstructor\r\n   */\n  constructor(_repo, _path, _queryParams, _orderByCalled) {\n    this._repo = _repo;\n    this._path = _path;\n    this._queryParams = _queryParams;\n    this._orderByCalled = _orderByCalled;\n  }\n\n  get key() {\n    if (pathIsEmpty(this._path)) {\n      return null;\n    } else {\n      return pathGetBack(this._path);\n    }\n  }\n\n  get ref() {\n    return new ReferenceImpl(this._repo, this._path);\n  }\n\n  get _queryIdentifier() {\n    const obj = queryParamsGetQueryObject(this._queryParams);\n    const id = ObjectToUniqueKey(obj);\n    return id === '{}' ? 'default' : id;\n  }\n  /**\r\n   * An object representation of the query parameters used by this Query.\r\n   */\n\n\n  get _queryObject() {\n    return queryParamsGetQueryObject(this._queryParams);\n  }\n\n  isEqual(other) {\n    other = getModularInstance(other);\n\n    if (!(other instanceof QueryImpl)) {\n      return false;\n    }\n\n    const sameRepo = this._repo === other._repo;\n    const samePath = pathEquals(this._path, other._path);\n    const sameQueryIdentifier = this._queryIdentifier === other._queryIdentifier;\n    return sameRepo && samePath && sameQueryIdentifier;\n  }\n\n  toJSON() {\n    return this.toString();\n  }\n\n  toString() {\n    return this._repo.toString() + pathToUrlEncodedString(this._path);\n  }\n\n}\n/**\r\n * Validates that no other order by call has been made\r\n */\n\n\nfunction validateNoPreviousOrderByCall(query, fnName) {\n  if (query._orderByCalled === true) {\n    throw new Error(fnName + \": You can't combine multiple orderBy calls.\");\n  }\n}\n/**\r\n * Validates start/end values for queries.\r\n */\n\n\nfunction validateQueryEndpoints(params) {\n  let startNode = null;\n  let endNode = null;\n\n  if (params.hasStart()) {\n    startNode = params.getIndexStartValue();\n  }\n\n  if (params.hasEnd()) {\n    endNode = params.getIndexEndValue();\n  }\n\n  if (params.getIndex() === KEY_INDEX) {\n    const tooManyArgsError = 'Query: When ordering by key, you may only pass one argument to ' + 'startAt(), endAt(), or equalTo().';\n    const wrongArgTypeError = 'Query: When ordering by key, the argument passed to startAt(), startAfter(), ' + 'endAt(), endBefore(), or equalTo() must be a string.';\n\n    if (params.hasStart()) {\n      const startName = params.getIndexStartName();\n\n      if (startName !== MIN_NAME) {\n        throw new Error(tooManyArgsError);\n      } else if (typeof startNode !== 'string') {\n        throw new Error(wrongArgTypeError);\n      }\n    }\n\n    if (params.hasEnd()) {\n      const endName = params.getIndexEndName();\n\n      if (endName !== MAX_NAME) {\n        throw new Error(tooManyArgsError);\n      } else if (typeof endNode !== 'string') {\n        throw new Error(wrongArgTypeError);\n      }\n    }\n  } else if (params.getIndex() === PRIORITY_INDEX) {\n    if (startNode != null && !isValidPriority(startNode) || endNode != null && !isValidPriority(endNode)) {\n      throw new Error('Query: When ordering by priority, the first argument passed to startAt(), ' + 'startAfter() endAt(), endBefore(), or equalTo() must be a valid priority value ' + '(null, a number, or a string).');\n    }\n  } else {\n    assert(params.getIndex() instanceof PathIndex || params.getIndex() === VALUE_INDEX, 'unknown index type.');\n\n    if (startNode != null && typeof startNode === 'object' || endNode != null && typeof endNode === 'object') {\n      throw new Error('Query: First argument passed to startAt(), startAfter(), endAt(), endBefore(), or ' + 'equalTo() cannot be an object.');\n    }\n  }\n}\n/**\r\n * Validates that limit* has been called with the correct combination of parameters\r\n */\n\n\nfunction validateLimit(params) {\n  if (params.hasStart() && params.hasEnd() && params.hasLimit() && !params.hasAnchoredLimit()) {\n    throw new Error(\"Query: Can't combine startAt(), startAfter(), endAt(), endBefore(), and limit(). Use \" + 'limitToFirst() or limitToLast() instead.');\n  }\n}\n/**\r\n * @internal\r\n */\n\n\nclass ReferenceImpl extends QueryImpl {\n  /** @hideconstructor */\n  constructor(repo, path) {\n    super(repo, path, new QueryParams(), false);\n  }\n\n  get parent() {\n    const parentPath = pathParent(this._path);\n    return parentPath === null ? null : new ReferenceImpl(this._repo, parentPath);\n  }\n\n  get root() {\n    let ref = this;\n\n    while (ref.parent !== null) {\n      ref = ref.parent;\n    }\n\n    return ref;\n  }\n\n}\n/**\r\n * A `DataSnapshot` contains data from a Database location.\r\n *\r\n * Any time you read data from the Database, you receive the data as a\r\n * `DataSnapshot`. A `DataSnapshot` is passed to the event callbacks you attach\r\n * with `on()` or `once()`. You can extract the contents of the snapshot as a\r\n * JavaScript object by calling the `val()` method. Alternatively, you can\r\n * traverse into the snapshot by calling `child()` to return child snapshots\r\n * (which you could then call `val()` on).\r\n *\r\n * A `DataSnapshot` is an efficiently generated, immutable copy of the data at\r\n * a Database location. It cannot be modified and will never change (to modify\r\n * data, you always call the `set()` method on a `Reference` directly).\r\n */\n\n\nclass DataSnapshot {\n  /**\r\n   * @param _node - A SnapshotNode to wrap.\r\n   * @param ref - The location this snapshot came from.\r\n   * @param _index - The iteration order for this snapshot\r\n   * @hideconstructor\r\n   */\n  constructor(_node,\n  /**\r\n   * The location of this DataSnapshot.\r\n   */\n  ref, _index) {\n    this._node = _node;\n    this.ref = ref;\n    this._index = _index;\n  }\n  /**\r\n   * Gets the priority value of the data in this `DataSnapshot`.\r\n   *\r\n   * Applications need not use priority but can order collections by\r\n   * ordinary properties (see\r\n   * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data |Sorting and filtering data}\r\n   * ).\r\n   */\n\n\n  get priority() {\n    // typecast here because we never return deferred values or internal priorities (MAX_PRIORITY)\n    return this._node.getPriority().val();\n  }\n  /**\r\n   * The key (last part of the path) of the location of this `DataSnapshot`.\r\n   *\r\n   * The last token in a Database location is considered its key. For example,\r\n   * \"ada\" is the key for the /users/ada/ node. Accessing the key on any\r\n   * `DataSnapshot` will return the key for the location that generated it.\r\n   * However, accessing the key on the root URL of a Database will return\r\n   * `null`.\r\n   */\n\n\n  get key() {\n    return this.ref.key;\n  }\n  /** Returns the number of child properties of this `DataSnapshot`. */\n\n\n  get size() {\n    return this._node.numChildren();\n  }\n  /**\r\n   * Gets another `DataSnapshot` for the location at the specified relative path.\r\n   *\r\n   * Passing a relative path to the `child()` method of a DataSnapshot returns\r\n   * another `DataSnapshot` for the location at the specified relative path. The\r\n   * relative path can either be a simple child name (for example, \"ada\") or a\r\n   * deeper, slash-separated path (for example, \"ada/name/first\"). If the child\r\n   * location has no data, an empty `DataSnapshot` (that is, a `DataSnapshot`\r\n   * whose value is `null`) is returned.\r\n   *\r\n   * @param path - A relative path to the location of child data.\r\n   */\n\n\n  child(path) {\n    const childPath = new Path(path);\n    const childRef = child(this.ref, path);\n    return new DataSnapshot(this._node.getChild(childPath), childRef, PRIORITY_INDEX);\n  }\n  /**\r\n   * Returns true if this `DataSnapshot` contains any data. It is slightly more\r\n   * efficient than using `snapshot.val() !== null`.\r\n   */\n\n\n  exists() {\n    return !this._node.isEmpty();\n  }\n  /**\r\n   * Exports the entire contents of the DataSnapshot as a JavaScript object.\r\n   *\r\n   * The `exportVal()` method is similar to `val()`, except priority information\r\n   * is included (if available), making it suitable for backing up your data.\r\n   *\r\n   * @returns The DataSnapshot's contents as a JavaScript value (Object,\r\n   *   Array, string, number, boolean, or `null`).\r\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n  exportVal() {\n    return this._node.val(true);\n  }\n  /**\r\n   * Enumerates the top-level children in the `DataSnapshot`.\r\n   *\r\n   * Because of the way JavaScript objects work, the ordering of data in the\r\n   * JavaScript object returned by `val()` is not guaranteed to match the\r\n   * ordering on the server nor the ordering of `onChildAdded()` events. That is\r\n   * where `forEach()` comes in handy. It guarantees the children of a\r\n   * `DataSnapshot` will be iterated in their query order.\r\n   *\r\n   * If no explicit `orderBy*()` method is used, results are returned\r\n   * ordered by key (unless priorities are used, in which case, results are\r\n   * returned by priority).\r\n   *\r\n   * @param action - A function that will be called for each child DataSnapshot.\r\n   * The callback can return true to cancel further enumeration.\r\n   * @returns true if enumeration was canceled due to your callback returning\r\n   * true.\r\n   */\n\n\n  forEach(action) {\n    if (this._node.isLeafNode()) {\n      return false;\n    }\n\n    const childrenNode = this._node; // Sanitize the return value to a boolean. ChildrenNode.forEachChild has a weird return type...\n\n    return !!childrenNode.forEachChild(this._index, (key, node) => {\n      return action(new DataSnapshot(node, child(this.ref, key), PRIORITY_INDEX));\n    });\n  }\n  /**\r\n   * Returns true if the specified child path has (non-null) data.\r\n   *\r\n   * @param path - A relative path to the location of a potential child.\r\n   * @returns `true` if data exists at the specified child path; else\r\n   *  `false`.\r\n   */\n\n\n  hasChild(path) {\n    const childPath = new Path(path);\n    return !this._node.getChild(childPath).isEmpty();\n  }\n  /**\r\n   * Returns whether or not the `DataSnapshot` has any non-`null` child\r\n   * properties.\r\n   *\r\n   * You can use `hasChildren()` to determine if a `DataSnapshot` has any\r\n   * children. If it does, you can enumerate them using `forEach()`. If it\r\n   * doesn't, then either this snapshot contains a primitive value (which can be\r\n   * retrieved with `val()`) or it is empty (in which case, `val()` will return\r\n   * `null`).\r\n   *\r\n   * @returns true if this snapshot has any children; else false.\r\n   */\n\n\n  hasChildren() {\n    if (this._node.isLeafNode()) {\n      return false;\n    } else {\n      return !this._node.isEmpty();\n    }\n  }\n  /**\r\n   * Returns a JSON-serializable representation of this object.\r\n   */\n\n\n  toJSON() {\n    return this.exportVal();\n  }\n  /**\r\n   * Extracts a JavaScript value from a `DataSnapshot`.\r\n   *\r\n   * Depending on the data in a `DataSnapshot`, the `val()` method may return a\r\n   * scalar type (string, number, or boolean), an array, or an object. It may\r\n   * also return null, indicating that the `DataSnapshot` is empty (contains no\r\n   * data).\r\n   *\r\n   * @returns The DataSnapshot's contents as a JavaScript value (Object,\r\n   *   Array, string, number, boolean, or `null`).\r\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n  val() {\n    return this._node.val();\n  }\n\n}\n/**\r\n *\r\n * Returns a `Reference` representing the location in the Database\r\n * corresponding to the provided path. If no path is provided, the `Reference`\r\n * will point to the root of the Database.\r\n *\r\n * @param db - The database instance to obtain a reference for.\r\n * @param path - Optional path representing the location the returned\r\n *   `Reference` will point. If not provided, the returned `Reference` will\r\n *   point to the root of the Database.\r\n * @returns If a path is provided, a `Reference`\r\n *   pointing to the provided path. Otherwise, a `Reference` pointing to the\r\n *   root of the Database.\r\n */\n\n\nfunction ref(db, path) {\n  db = getModularInstance(db);\n\n  db._checkNotDeleted('ref');\n\n  return path !== undefined ? child(db._root, path) : db._root;\n}\n/**\r\n * Returns a `Reference` representing the location in the Database\r\n * corresponding to the provided Firebase URL.\r\n *\r\n * An exception is thrown if the URL is not a valid Firebase Database URL or it\r\n * has a different domain than the current `Database` instance.\r\n *\r\n * Note that all query parameters (`orderBy`, `limitToLast`, etc.) are ignored\r\n * and are not applied to the returned `Reference`.\r\n *\r\n * @param db - The database instance to obtain a reference for.\r\n * @param url - The Firebase URL at which the returned `Reference` will\r\n *   point.\r\n * @returns A `Reference` pointing to the provided\r\n *   Firebase URL.\r\n */\n\n\nfunction refFromURL(db, url) {\n  db = getModularInstance(db);\n\n  db._checkNotDeleted('refFromURL');\n\n  const parsedURL = parseRepoInfo(url, db._repo.repoInfo_.nodeAdmin);\n  validateUrl('refFromURL', parsedURL);\n  const repoInfo = parsedURL.repoInfo;\n\n  if (!db._repo.repoInfo_.isCustomHost() && repoInfo.host !== db._repo.repoInfo_.host) {\n    fatal('refFromURL' + ': Host name does not match the current database: ' + '(found ' + repoInfo.host + ' but expected ' + db._repo.repoInfo_.host + ')');\n  }\n\n  return ref(db, parsedURL.path.toString());\n}\n/**\r\n * Gets a `Reference` for the location at the specified relative path.\r\n *\r\n * The relative path can either be a simple child name (for example, \"ada\") or\r\n * a deeper slash-separated path (for example, \"ada/name/first\").\r\n *\r\n * @param parent - The parent location.\r\n * @param path - A relative path from this location to the desired child\r\n *   location.\r\n * @returns The specified child location.\r\n */\n\n\nfunction child(parent, path) {\n  parent = getModularInstance(parent);\n\n  if (pathGetFront(parent._path) === null) {\n    validateRootPathString('child', 'path', path, false);\n  } else {\n    validatePathString('child', 'path', path, false);\n  }\n\n  return new ReferenceImpl(parent._repo, pathChild(parent._path, path));\n}\n/**\r\n * Returns an `OnDisconnect` object - see\r\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\r\n * for more information on how to use it.\r\n *\r\n * @param ref - The reference to add OnDisconnect triggers for.\r\n */\n\n\nfunction onDisconnect(ref) {\n  ref = getModularInstance(ref);\n  return new OnDisconnect(ref._repo, ref._path);\n}\n/**\r\n * Generates a new child location using a unique key and returns its\r\n * `Reference`.\r\n *\r\n * This is the most common pattern for adding data to a collection of items.\r\n *\r\n * If you provide a value to `push()`, the value is written to the\r\n * generated location. If you don't pass a value, nothing is written to the\r\n * database and the child remains empty (but you can use the `Reference`\r\n * elsewhere).\r\n *\r\n * The unique keys generated by `push()` are ordered by the current time, so the\r\n * resulting list of items is chronologically sorted. The keys are also\r\n * designed to be unguessable (they contain 72 random bits of entropy).\r\n *\r\n * See {@link https://firebase.google.com/docs/database/web/lists-of-data#append_to_a_list_of_data | Append to a list of data}\r\n * </br>See {@link ttps://firebase.googleblog.com/2015/02/the-2120-ways-to-ensure-unique_68.html | The 2^120 Ways to Ensure Unique Identifiers}\r\n *\r\n * @param parent - The parent location.\r\n * @param value - Optional value to be written at the generated location.\r\n * @returns Combined `Promise` and `Reference`; resolves when write is complete,\r\n * but can be used immediately as the `Reference` to the child location.\r\n */\n\n\nfunction push(parent, value) {\n  parent = getModularInstance(parent);\n  validateWritablePath('push', parent._path);\n  validateFirebaseDataArg('push', value, parent._path, true);\n  const now = repoServerTime(parent._repo);\n  const name = nextPushId(now); // push() returns a ThennableReference whose promise is fulfilled with a\n  // regular Reference. We use child() to create handles to two different\n  // references. The first is turned into a ThennableReference below by adding\n  // then() and catch() methods and is used as the return value of push(). The\n  // second remains a regular Reference and is used as the fulfilled value of\n  // the first ThennableReference.\n\n  const thennablePushRef = child(parent, name);\n  const pushRef = child(parent, name);\n  let promise;\n\n  if (value != null) {\n    promise = set(pushRef, value).then(() => pushRef);\n  } else {\n    promise = Promise.resolve(pushRef);\n  }\n\n  thennablePushRef.then = promise.then.bind(promise);\n  thennablePushRef.catch = promise.then.bind(promise, undefined);\n  return thennablePushRef;\n}\n/**\r\n * Removes the data at this Database location.\r\n *\r\n * Any data at child locations will also be deleted.\r\n *\r\n * The effect of the remove will be visible immediately and the corresponding\r\n * event 'value' will be triggered. Synchronization of the remove to the\r\n * Firebase servers will also be started, and the returned Promise will resolve\r\n * when complete. If provided, the onComplete callback will be called\r\n * asynchronously after synchronization has finished.\r\n *\r\n * @param ref - The location to remove.\r\n * @returns Resolves when remove on server is complete.\r\n */\n\n\nfunction remove(ref) {\n  validateWritablePath('remove', ref._path);\n  return set(ref, null);\n}\n/**\r\n * Writes data to this Database location.\r\n *\r\n * This will overwrite any data at this location and all child locations.\r\n *\r\n * The effect of the write will be visible immediately, and the corresponding\r\n * events (\"value\", \"child_added\", etc.) will be triggered. Synchronization of\r\n * the data to the Firebase servers will also be started, and the returned\r\n * Promise will resolve when complete. If provided, the `onComplete` callback\r\n * will be called asynchronously after synchronization has finished.\r\n *\r\n * Passing `null` for the new value is equivalent to calling `remove()`; namely,\r\n * all data at this location and all child locations will be deleted.\r\n *\r\n * `set()` will remove any priority stored at this location, so if priority is\r\n * meant to be preserved, you need to use `setWithPriority()` instead.\r\n *\r\n * Note that modifying data with `set()` will cancel any pending transactions\r\n * at that location, so extreme care should be taken if mixing `set()` and\r\n * `transaction()` to modify the same data.\r\n *\r\n * A single `set()` will generate a single \"value\" event at the location where\r\n * the `set()` was performed.\r\n *\r\n * @param ref - The location to write to.\r\n * @param value - The value to be written (string, number, boolean, object,\r\n *   array, or null).\r\n * @returns Resolves when write to server is complete.\r\n */\n\n\nfunction set(ref, value) {\n  ref = getModularInstance(ref);\n  validateWritablePath('set', ref._path);\n  validateFirebaseDataArg('set', value, ref._path, false);\n  const deferred = new Deferred();\n  repoSetWithPriority(ref._repo, ref._path, value,\n  /*priority=*/\n  null, deferred.wrapCallback(() => {}));\n  return deferred.promise;\n}\n/**\r\n * Sets a priority for the data at this Database location.\r\n *\r\n * Applications need not use priority but can order collections by\r\n * ordinary properties (see\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\r\n * ).\r\n *\r\n * @param ref - The location to write to.\r\n * @param priority - The priority to be written (string, number, or null).\r\n * @returns Resolves when write to server is complete.\r\n */\n\n\nfunction setPriority(ref, priority) {\n  ref = getModularInstance(ref);\n  validateWritablePath('setPriority', ref._path);\n  validatePriority('setPriority', priority, false);\n  const deferred = new Deferred();\n  repoSetWithPriority(ref._repo, pathChild(ref._path, '.priority'), priority, null, deferred.wrapCallback(() => {}));\n  return deferred.promise;\n}\n/**\r\n * Writes data the Database location. Like `set()` but also specifies the\r\n * priority for that data.\r\n *\r\n * Applications need not use priority but can order collections by\r\n * ordinary properties (see\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\r\n * ).\r\n *\r\n * @param ref - The location to write to.\r\n * @param value - The value to be written (string, number, boolean, object,\r\n *   array, or null).\r\n * @param priority - The priority to be written (string, number, or null).\r\n * @returns Resolves when write to server is complete.\r\n */\n\n\nfunction setWithPriority(ref, value, priority) {\n  validateWritablePath('setWithPriority', ref._path);\n  validateFirebaseDataArg('setWithPriority', value, ref._path, false);\n  validatePriority('setWithPriority', priority, false);\n\n  if (ref.key === '.length' || ref.key === '.keys') {\n    throw 'setWithPriority failed: ' + ref.key + ' is a read-only object.';\n  }\n\n  const deferred = new Deferred();\n  repoSetWithPriority(ref._repo, ref._path, value, priority, deferred.wrapCallback(() => {}));\n  return deferred.promise;\n}\n/**\r\n * Writes multiple values to the Database at once.\r\n *\r\n * The `values` argument contains multiple property-value pairs that will be\r\n * written to the Database together. Each child property can either be a simple\r\n * property (for example, \"name\") or a relative path (for example,\r\n * \"name/first\") from the current location to the data to update.\r\n *\r\n * As opposed to the `set()` method, `update()` can be use to selectively update\r\n * only the referenced properties at the current location (instead of replacing\r\n * all the child properties at the current location).\r\n *\r\n * The effect of the write will be visible immediately, and the corresponding\r\n * events ('value', 'child_added', etc.) will be triggered. Synchronization of\r\n * the data to the Firebase servers will also be started, and the returned\r\n * Promise will resolve when complete. If provided, the `onComplete` callback\r\n * will be called asynchronously after synchronization has finished.\r\n *\r\n * A single `update()` will generate a single \"value\" event at the location\r\n * where the `update()` was performed, regardless of how many children were\r\n * modified.\r\n *\r\n * Note that modifying data with `update()` will cancel any pending\r\n * transactions at that location, so extreme care should be taken if mixing\r\n * `update()` and `transaction()` to modify the same data.\r\n *\r\n * Passing `null` to `update()` will remove the data at this location.\r\n *\r\n * See\r\n * {@link https://firebase.googleblog.com/2015/09/introducing-multi-location-updates-and_86.html | Introducing multi-location updates and more}.\r\n *\r\n * @param ref - The location to write to.\r\n * @param values - Object containing multiple values.\r\n * @returns Resolves when update on server is complete.\r\n */\n\n\nfunction update(ref, values) {\n  validateFirebaseMergeDataArg('update', values, ref._path, false);\n  const deferred = new Deferred();\n  repoUpdate(ref._repo, ref._path, values, deferred.wrapCallback(() => {}));\n  return deferred.promise;\n}\n/**\r\n * Gets the most up-to-date result for this query.\r\n *\r\n * @param query - The query to run.\r\n * @returns A `Promise` which resolves to the resulting DataSnapshot if a value is\r\n * available, or rejects if the client is unable to return a value (e.g., if the\r\n * server is unreachable and there is nothing cached).\r\n */\n\n\nfunction get(query) {\n  query = getModularInstance(query);\n  return repoGetValue(query._repo, query).then(node => {\n    return new DataSnapshot(node, new ReferenceImpl(query._repo, query._path), query._queryParams.getIndex());\n  });\n}\n/**\r\n * Represents registration for 'value' events.\r\n */\n\n\nclass ValueEventRegistration {\n  constructor(callbackContext) {\n    this.callbackContext = callbackContext;\n  }\n\n  respondsTo(eventType) {\n    return eventType === 'value';\n  }\n\n  createEvent(change, query) {\n    const index = query._queryParams.getIndex();\n\n    return new DataEvent('value', this, new DataSnapshot(change.snapshotNode, new ReferenceImpl(query._repo, query._path), index));\n  }\n\n  getEventRunner(eventData) {\n    if (eventData.getEventType() === 'cancel') {\n      return () => this.callbackContext.onCancel(eventData.error);\n    } else {\n      return () => this.callbackContext.onValue(eventData.snapshot, null);\n    }\n  }\n\n  createCancelEvent(error, path) {\n    if (this.callbackContext.hasCancelCallback) {\n      return new CancelEvent(this, error, path);\n    } else {\n      return null;\n    }\n  }\n\n  matches(other) {\n    if (!(other instanceof ValueEventRegistration)) {\n      return false;\n    } else if (!other.callbackContext || !this.callbackContext) {\n      // If no callback specified, we consider it to match any callback.\n      return true;\n    } else {\n      return other.callbackContext.matches(this.callbackContext);\n    }\n  }\n\n  hasAnyCallback() {\n    return this.callbackContext !== null;\n  }\n\n}\n/**\r\n * Represents the registration of a child_x event.\r\n */\n\n\nclass ChildEventRegistration {\n  constructor(eventType, callbackContext) {\n    this.eventType = eventType;\n    this.callbackContext = callbackContext;\n  }\n\n  respondsTo(eventType) {\n    let eventToCheck = eventType === 'children_added' ? 'child_added' : eventType;\n    eventToCheck = eventToCheck === 'children_removed' ? 'child_removed' : eventToCheck;\n    return this.eventType === eventToCheck;\n  }\n\n  createCancelEvent(error, path) {\n    if (this.callbackContext.hasCancelCallback) {\n      return new CancelEvent(this, error, path);\n    } else {\n      return null;\n    }\n  }\n\n  createEvent(change, query) {\n    assert(change.childName != null, 'Child events should have a childName.');\n    const childRef = child(new ReferenceImpl(query._repo, query._path), change.childName);\n\n    const index = query._queryParams.getIndex();\n\n    return new DataEvent(change.type, this, new DataSnapshot(change.snapshotNode, childRef, index), change.prevName);\n  }\n\n  getEventRunner(eventData) {\n    if (eventData.getEventType() === 'cancel') {\n      return () => this.callbackContext.onCancel(eventData.error);\n    } else {\n      return () => this.callbackContext.onValue(eventData.snapshot, eventData.prevName);\n    }\n  }\n\n  matches(other) {\n    if (other instanceof ChildEventRegistration) {\n      return this.eventType === other.eventType && (!this.callbackContext || !other.callbackContext || this.callbackContext.matches(other.callbackContext));\n    }\n\n    return false;\n  }\n\n  hasAnyCallback() {\n    return !!this.callbackContext;\n  }\n\n}\n\nfunction addEventListener(query, eventType, callback, cancelCallbackOrListenOptions, options) {\n  let cancelCallback;\n\n  if (typeof cancelCallbackOrListenOptions === 'object') {\n    cancelCallback = undefined;\n    options = cancelCallbackOrListenOptions;\n  }\n\n  if (typeof cancelCallbackOrListenOptions === 'function') {\n    cancelCallback = cancelCallbackOrListenOptions;\n  }\n\n  if (options && options.onlyOnce) {\n    const userCallback = callback;\n\n    const onceCallback = (dataSnapshot, previousChildName) => {\n      repoRemoveEventCallbackForQuery(query._repo, query, container);\n      userCallback(dataSnapshot, previousChildName);\n    };\n\n    onceCallback.userCallback = callback.userCallback;\n    onceCallback.context = callback.context;\n    callback = onceCallback;\n  }\n\n  const callbackContext = new CallbackContext(callback, cancelCallback || undefined);\n  const container = eventType === 'value' ? new ValueEventRegistration(callbackContext) : new ChildEventRegistration(eventType, callbackContext);\n  repoAddEventCallbackForQuery(query._repo, query, container);\n  return () => repoRemoveEventCallbackForQuery(query._repo, query, container);\n}\n\nfunction onValue(query, callback, cancelCallbackOrListenOptions, options) {\n  return addEventListener(query, 'value', callback, cancelCallbackOrListenOptions, options);\n}\n\nfunction onChildAdded(query, callback, cancelCallbackOrListenOptions, options) {\n  return addEventListener(query, 'child_added', callback, cancelCallbackOrListenOptions, options);\n}\n\nfunction onChildChanged(query, callback, cancelCallbackOrListenOptions, options) {\n  return addEventListener(query, 'child_changed', callback, cancelCallbackOrListenOptions, options);\n}\n\nfunction onChildMoved(query, callback, cancelCallbackOrListenOptions, options) {\n  return addEventListener(query, 'child_moved', callback, cancelCallbackOrListenOptions, options);\n}\n\nfunction onChildRemoved(query, callback, cancelCallbackOrListenOptions, options) {\n  return addEventListener(query, 'child_removed', callback, cancelCallbackOrListenOptions, options);\n}\n/**\r\n * Detaches a callback previously attached with `on()`.\r\n *\r\n * Detach a callback previously attached with `on()`. Note that if `on()` was\r\n * called multiple times with the same eventType and callback, the callback\r\n * will be called multiple times for each event, and `off()` must be called\r\n * multiple times to remove the callback. Calling `off()` on a parent listener\r\n * will not automatically remove listeners registered on child nodes, `off()`\r\n * must also be called on any child listeners to remove the callback.\r\n *\r\n * If a callback is not specified, all callbacks for the specified eventType\r\n * will be removed. Similarly, if no eventType is specified, all callbacks\r\n * for the `Reference` will be removed.\r\n *\r\n * Individual listeners can also be removed by invoking their unsubscribe\r\n * callbacks.\r\n *\r\n * @param query - The query that the listener was registered with.\r\n * @param eventType - One of the following strings: \"value\", \"child_added\",\r\n * \"child_changed\", \"child_removed\", or \"child_moved.\" If omitted, all callbacks\r\n * for the `Reference` will be removed.\r\n * @param callback - The callback function that was passed to `on()` or\r\n * `undefined` to remove all callbacks.\r\n */\n\n\nfunction off(query, eventType, callback) {\n  let container = null;\n  const expCallback = callback ? new CallbackContext(callback) : null;\n\n  if (eventType === 'value') {\n    container = new ValueEventRegistration(expCallback);\n  } else if (eventType) {\n    container = new ChildEventRegistration(eventType, expCallback);\n  }\n\n  repoRemoveEventCallbackForQuery(query._repo, query, container);\n}\n/**\r\n * A `QueryConstraint` is used to narrow the set of documents returned by a\r\n * Database query. `QueryConstraint`s are created by invoking {@link endAt},\r\n * {@link endBefore}, {@link startAt}, {@link startAfter}, {@link\r\n * limitToFirst}, {@link limitToLast}, {@link orderByChild},\r\n * {@link orderByChild}, {@link orderByKey} , {@link orderByPriority} ,\r\n * {@link orderByValue}  or {@link equalTo} and\r\n * can then be passed to {@link query} to create a new query instance that\r\n * also contains this `QueryConstraint`.\r\n */\n\n\nclass QueryConstraint {}\n\nclass QueryEndAtConstraint extends QueryConstraint {\n  constructor(_value, _key) {\n    super();\n    this._value = _value;\n    this._key = _key;\n  }\n\n  _apply(query) {\n    validateFirebaseDataArg('endAt', this._value, query._path, true);\n    const newParams = queryParamsEndAt(query._queryParams, this._value, this._key);\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n\n    if (query._queryParams.hasEnd()) {\n      throw new Error('endAt: Starting point was already set (by another call to endAt, ' + 'endBefore or equalTo).');\n    }\n\n    return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\n  }\n\n}\n/**\r\n * Creates a `QueryConstraint` with the specified ending point.\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The ending point is inclusive, so children with exactly the specified value\r\n * will be included in the query. The optional key argument can be used to\r\n * further limit the range of the query. If it is specified, then children that\r\n * have exactly the specified value must also have a key name less than or equal\r\n * to the specified key.\r\n *\r\n * You can read more about `endAt()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param value - The value to end at. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to end at, among the children with the previously\r\n * specified priority. This argument is only allowed if ordering by child,\r\n * value, or priority.\r\n */\n\n\nfunction endAt(value, key) {\n  validateKey('endAt', 'key', key, true);\n  return new QueryEndAtConstraint(value, key);\n}\n\nclass QueryEndBeforeConstraint extends QueryConstraint {\n  constructor(_value, _key) {\n    super();\n    this._value = _value;\n    this._key = _key;\n  }\n\n  _apply(query) {\n    validateFirebaseDataArg('endBefore', this._value, query._path, false);\n    const newParams = queryParamsEndBefore(query._queryParams, this._value, this._key);\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n\n    if (query._queryParams.hasEnd()) {\n      throw new Error('endBefore: Starting point was already set (by another call to endAt, ' + 'endBefore or equalTo).');\n    }\n\n    return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\n  }\n\n}\n/**\r\n * Creates a `QueryConstraint` with the specified ending point (exclusive).\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The ending point is exclusive. If only a value is provided, children\r\n * with a value less than the specified value will be included in the query.\r\n * If a key is specified, then children must have a value lesss than or equal\r\n * to the specified value and a a key name less than the specified key.\r\n *\r\n * @param value - The value to end before. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to end before, among the children with the\r\n * previously specified priority. This argument is only allowed if ordering by\r\n * child, value, or priority.\r\n */\n\n\nfunction endBefore(value, key) {\n  validateKey('endBefore', 'key', key, true);\n  return new QueryEndBeforeConstraint(value, key);\n}\n\nclass QueryStartAtConstraint extends QueryConstraint {\n  constructor(_value, _key) {\n    super();\n    this._value = _value;\n    this._key = _key;\n  }\n\n  _apply(query) {\n    validateFirebaseDataArg('startAt', this._value, query._path, true);\n    const newParams = queryParamsStartAt(query._queryParams, this._value, this._key);\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n\n    if (query._queryParams.hasStart()) {\n      throw new Error('startAt: Starting point was already set (by another call to startAt, ' + 'startBefore or equalTo).');\n    }\n\n    return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\n  }\n\n}\n/**\r\n * Creates a `QueryConstraint` with the specified starting point.\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The starting point is inclusive, so children with exactly the specified value\r\n * will be included in the query. The optional key argument can be used to\r\n * further limit the range of the query. If it is specified, then children that\r\n * have exactly the specified value must also have a key name greater than or\r\n * equal to the specified key.\r\n *\r\n * You can read more about `startAt()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param value - The value to start at. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to start at. This argument is only allowed if\r\n * ordering by child, value, or priority.\r\n */\n\n\nfunction startAt() {\n  let value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  let key = arguments.length > 1 ? arguments[1] : undefined;\n  validateKey('startAt', 'key', key, true);\n  return new QueryStartAtConstraint(value, key);\n}\n\nclass QueryStartAfterConstraint extends QueryConstraint {\n  constructor(_value, _key) {\n    super();\n    this._value = _value;\n    this._key = _key;\n  }\n\n  _apply(query) {\n    validateFirebaseDataArg('startAfter', this._value, query._path, false);\n    const newParams = queryParamsStartAfter(query._queryParams, this._value, this._key);\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n\n    if (query._queryParams.hasStart()) {\n      throw new Error('startAfter: Starting point was already set (by another call to startAt, ' + 'startAfter, or equalTo).');\n    }\n\n    return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\n  }\n\n}\n/**\r\n * Creates a `QueryConstraint` with the specified starting point (exclusive).\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The starting point is exclusive. If only a value is provided, children\r\n * with a value greater than the specified value will be included in the query.\r\n * If a key is specified, then children must have a value greater than or equal\r\n * to the specified value and a a key name greater than the specified key.\r\n *\r\n * @param value - The value to start after. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to start after. This argument is only allowed if\r\n * ordering by child, value, or priority.\r\n */\n\n\nfunction startAfter(value, key) {\n  validateKey('startAfter', 'key', key, true);\n  return new QueryStartAfterConstraint(value, key);\n}\n\nclass QueryLimitToFirstConstraint extends QueryConstraint {\n  constructor(_limit) {\n    super();\n    this._limit = _limit;\n  }\n\n  _apply(query) {\n    if (query._queryParams.hasLimit()) {\n      throw new Error('limitToFirst: Limit was already set (by another call to limitToFirst ' + 'or limitToLast).');\n    }\n\n    return new QueryImpl(query._repo, query._path, queryParamsLimitToFirst(query._queryParams, this._limit), query._orderByCalled);\n  }\n\n}\n/**\r\n * Creates a new `QueryConstraint` that if limited to the first specific number\r\n * of children.\r\n *\r\n * The `limitToFirst()` method is used to set a maximum number of children to be\r\n * synced for a given callback. If we set a limit of 100, we will initially only\r\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\r\n * stored in our Database, a `child_added` event will fire for each message.\r\n * However, if we have over 100 messages, we will only receive a `child_added`\r\n * event for the first 100 ordered messages. As items change, we will receive\r\n * `child_removed` events for each item that drops out of the active list so\r\n * that the total number stays at 100.\r\n *\r\n * You can read more about `limitToFirst()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param limit - The maximum number of nodes to include in this query.\r\n */\n\n\nfunction limitToFirst(limit) {\n  if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\n    throw new Error('limitToFirst: First argument must be a positive integer.');\n  }\n\n  return new QueryLimitToFirstConstraint(limit);\n}\n\nclass QueryLimitToLastConstraint extends QueryConstraint {\n  constructor(_limit) {\n    super();\n    this._limit = _limit;\n  }\n\n  _apply(query) {\n    if (query._queryParams.hasLimit()) {\n      throw new Error('limitToLast: Limit was already set (by another call to limitToFirst ' + 'or limitToLast).');\n    }\n\n    return new QueryImpl(query._repo, query._path, queryParamsLimitToLast(query._queryParams, this._limit), query._orderByCalled);\n  }\n\n}\n/**\r\n * Creates a new `QueryConstraint` that is limited to return only the last\r\n * specified number of children.\r\n *\r\n * The `limitToLast()` method is used to set a maximum number of children to be\r\n * synced for a given callback. If we set a limit of 100, we will initially only\r\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\r\n * stored in our Database, a `child_added` event will fire for each message.\r\n * However, if we have over 100 messages, we will only receive a `child_added`\r\n * event for the last 100 ordered messages. As items change, we will receive\r\n * `child_removed` events for each item that drops out of the active list so\r\n * that the total number stays at 100.\r\n *\r\n * You can read more about `limitToLast()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param limit - The maximum number of nodes to include in this query.\r\n */\n\n\nfunction limitToLast(limit) {\n  if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\n    throw new Error('limitToLast: First argument must be a positive integer.');\n  }\n\n  return new QueryLimitToLastConstraint(limit);\n}\n\nclass QueryOrderByChildConstraint extends QueryConstraint {\n  constructor(_path) {\n    super();\n    this._path = _path;\n  }\n\n  _apply(query) {\n    validateNoPreviousOrderByCall(query, 'orderByChild');\n    const parsedPath = new Path(this._path);\n\n    if (pathIsEmpty(parsedPath)) {\n      throw new Error('orderByChild: cannot pass in empty path. Use orderByValue() instead.');\n    }\n\n    const index = new PathIndex(parsedPath);\n    const newParams = queryParamsOrderBy(query._queryParams, index);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(query._repo, query._path, newParams,\n    /*orderByCalled=*/\n    true);\n  }\n\n}\n/**\r\n * Creates a new `QueryConstraint` that orders by the specified child key.\r\n *\r\n * Queries can only order by one key at a time. Calling `orderByChild()`\r\n * multiple times on the same query is an error.\r\n *\r\n * Firebase queries allow you to order your data by any child key on the fly.\r\n * However, if you know in advance what your indexes will be, you can define\r\n * them via the .indexOn rule in your Security Rules for better performance. See\r\n * the{@link https://firebase.google.com/docs/database/security/indexing-data}\r\n * rule for more information.\r\n *\r\n * You can read more about `orderByChild()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\r\n *\r\n * @param path - The path to order by.\r\n */\n\n\nfunction orderByChild(path) {\n  if (path === '$key') {\n    throw new Error('orderByChild: \"$key\" is invalid.  Use orderByKey() instead.');\n  } else if (path === '$priority') {\n    throw new Error('orderByChild: \"$priority\" is invalid.  Use orderByPriority() instead.');\n  } else if (path === '$value') {\n    throw new Error('orderByChild: \"$value\" is invalid.  Use orderByValue() instead.');\n  }\n\n  validatePathString('orderByChild', 'path', path, false);\n  return new QueryOrderByChildConstraint(path);\n}\n\nclass QueryOrderByKeyConstraint extends QueryConstraint {\n  _apply(query) {\n    validateNoPreviousOrderByCall(query, 'orderByKey');\n    const newParams = queryParamsOrderBy(query._queryParams, KEY_INDEX);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(query._repo, query._path, newParams,\n    /*orderByCalled=*/\n    true);\n  }\n\n}\n/**\r\n * Creates a new `QueryConstraint` that orders by the key.\r\n *\r\n * Sorts the results of a query by their (ascending) key values.\r\n *\r\n * You can read more about `orderByKey()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\r\n */\n\n\nfunction orderByKey() {\n  return new QueryOrderByKeyConstraint();\n}\n\nclass QueryOrderByPriorityConstraint extends QueryConstraint {\n  _apply(query) {\n    validateNoPreviousOrderByCall(query, 'orderByPriority');\n    const newParams = queryParamsOrderBy(query._queryParams, PRIORITY_INDEX);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(query._repo, query._path, newParams,\n    /*orderByCalled=*/\n    true);\n  }\n\n}\n/**\r\n * Creates a new `QueryConstraint` that orders by priority.\r\n *\r\n * Applications need not use priority but can order collections by\r\n * ordinary properties (see\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}\r\n * for alternatives to priority.\r\n */\n\n\nfunction orderByPriority() {\n  return new QueryOrderByPriorityConstraint();\n}\n\nclass QueryOrderByValueConstraint extends QueryConstraint {\n  _apply(query) {\n    validateNoPreviousOrderByCall(query, 'orderByValue');\n    const newParams = queryParamsOrderBy(query._queryParams, VALUE_INDEX);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(query._repo, query._path, newParams,\n    /*orderByCalled=*/\n    true);\n  }\n\n}\n/**\r\n * Creates a new `QueryConstraint` that orders by value.\r\n *\r\n * If the children of a query are all scalar values (string, number, or\r\n * boolean), you can order the results by their (ascending) values.\r\n *\r\n * You can read more about `orderByValue()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\r\n */\n\n\nfunction orderByValue() {\n  return new QueryOrderByValueConstraint();\n}\n\nclass QueryEqualToValueConstraint extends QueryConstraint {\n  constructor(_value, _key) {\n    super();\n    this._value = _value;\n    this._key = _key;\n  }\n\n  _apply(query) {\n    validateFirebaseDataArg('equalTo', this._value, query._path, false);\n\n    if (query._queryParams.hasStart()) {\n      throw new Error('equalTo: Starting point was already set (by another call to startAt/startAfter or ' + 'equalTo).');\n    }\n\n    if (query._queryParams.hasEnd()) {\n      throw new Error('equalTo: Ending point was already set (by another call to endAt/endBefore or ' + 'equalTo).');\n    }\n\n    return new QueryEndAtConstraint(this._value, this._key)._apply(new QueryStartAtConstraint(this._value, this._key)._apply(query));\n  }\n\n}\n/**\r\n * Creates a `QueryConstraint` that includes children that match the specified\r\n * value.\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The optional key argument can be used to further limit the range of the\r\n * query. If it is specified, then children that have exactly the specified\r\n * value must also have exactly the specified key as their key name. This can be\r\n * used to filter result sets with many matches for the same value.\r\n *\r\n * You can read more about `equalTo()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param value - The value to match for. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to start at, among the children with the\r\n * previously specified priority. This argument is only allowed if ordering by\r\n * child, value, or priority.\r\n */\n\n\nfunction equalTo(value, key) {\n  validateKey('equalTo', 'key', key, true);\n  return new QueryEqualToValueConstraint(value, key);\n}\n/**\r\n * Creates a new immutable instance of `Query` that is extended to also include\r\n * additional query constraints.\r\n *\r\n * @param query - The Query instance to use as a base for the new constraints.\r\n * @param queryConstraints - The list of `QueryConstraint`s to apply.\r\n * @throws if any of the provided query constraints cannot be combined with the\r\n * existing or new constraints.\r\n */\n\n\nfunction query(query) {\n  let queryImpl = getModularInstance(query);\n\n  for (var _len7 = arguments.length, queryConstraints = new Array(_len7 > 1 ? _len7 - 1 : 0), _key8 = 1; _key8 < _len7; _key8++) {\n    queryConstraints[_key8 - 1] = arguments[_key8];\n  }\n\n  for (const constraint of queryConstraints) {\n    queryImpl = constraint._apply(queryImpl);\n  }\n\n  return queryImpl;\n}\n/**\r\n * Define reference constructor in various modules\r\n *\r\n * We are doing this here to avoid several circular\r\n * dependency issues\r\n */\n\n\nsyncPointSetReferenceConstructor(ReferenceImpl);\nsyncTreeSetReferenceConstructor(ReferenceImpl);\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * This variable is also defined in the firebase Node.js Admin SDK. Before\r\n * modifying this definition, consult the definition in:\r\n *\r\n * https://github.com/firebase/firebase-admin-node\r\n *\r\n * and make sure the two are consistent.\r\n */\n\nconst FIREBASE_DATABASE_EMULATOR_HOST_VAR = 'FIREBASE_DATABASE_EMULATOR_HOST';\n/**\r\n * Creates and caches `Repo` instances.\r\n */\n\nconst repos = {};\n/**\r\n * If true, any new `Repo` will be created to use `ReadonlyRestClient` (for testing purposes).\r\n */\n\nlet useRestClient = false;\n/**\r\n * Update an existing `Repo` in place to point to a new host/port.\r\n */\n\nfunction repoManagerApplyEmulatorSettings(repo, host, port, tokenProvider) {\n  repo.repoInfo_ = new RepoInfo(`${host}:${port}`,\n  /* secure= */\n  false, repo.repoInfo_.namespace, repo.repoInfo_.webSocketOnly, repo.repoInfo_.nodeAdmin, repo.repoInfo_.persistenceKey, repo.repoInfo_.includeNamespaceInQueryParams);\n\n  if (tokenProvider) {\n    repo.authTokenProvider_ = tokenProvider;\n  }\n}\n/**\r\n * This function should only ever be called to CREATE a new database instance.\r\n * @internal\r\n */\n\n\nfunction repoManagerDatabaseFromApp(app, authProvider, appCheckProvider, url, nodeAdmin) {\n  let dbUrl = url || app.options.databaseURL;\n\n  if (dbUrl === undefined) {\n    if (!app.options.projectId) {\n      fatal(\"Can't determine Firebase Database URL. Be sure to include \" + ' a Project ID when calling firebase.initializeApp().');\n    }\n\n    log('Using default host for project ', app.options.projectId);\n    dbUrl = `${app.options.projectId}-default-rtdb.firebaseio.com`;\n  }\n\n  let parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\n  let repoInfo = parsedUrl.repoInfo;\n  let isEmulator;\n  let dbEmulatorHost = undefined;\n\n  if (typeof process !== 'undefined') {\n    dbEmulatorHost = process.env[FIREBASE_DATABASE_EMULATOR_HOST_VAR];\n  }\n\n  if (dbEmulatorHost) {\n    isEmulator = true;\n    dbUrl = `http://${dbEmulatorHost}?ns=${repoInfo.namespace}`;\n    parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\n    repoInfo = parsedUrl.repoInfo;\n  } else {\n    isEmulator = !parsedUrl.repoInfo.secure;\n  }\n\n  const authTokenProvider = nodeAdmin && isEmulator ? new EmulatorTokenProvider(EmulatorTokenProvider.OWNER) : new FirebaseAuthTokenProvider(app.name, app.options, authProvider);\n  validateUrl('Invalid Firebase Database URL', parsedUrl);\n\n  if (!pathIsEmpty(parsedUrl.path)) {\n    fatal('Database URL must point to the root of a Firebase Database ' + '(not including a child path).');\n  }\n\n  const repo = repoManagerCreateRepo(repoInfo, app, authTokenProvider, new AppCheckTokenProvider(app.name, appCheckProvider));\n  return new Database(repo, app);\n}\n/**\r\n * Remove the repo and make sure it is disconnected.\r\n *\r\n */\n\n\nfunction repoManagerDeleteRepo(repo, appName) {\n  const appRepos = repos[appName]; // This should never happen...\n\n  if (!appRepos || appRepos[repo.key] !== repo) {\n    fatal(`Database ${appName}(${repo.repoInfo_}) has already been deleted.`);\n  }\n\n  repoInterrupt(repo);\n  delete appRepos[repo.key];\n}\n/**\r\n * Ensures a repo doesn't already exist and then creates one using the\r\n * provided app.\r\n *\r\n * @param repoInfo - The metadata about the Repo\r\n * @returns The Repo object for the specified server / repoName.\r\n */\n\n\nfunction repoManagerCreateRepo(repoInfo, app, authTokenProvider, appCheckProvider) {\n  let appRepos = repos[app.name];\n\n  if (!appRepos) {\n    appRepos = {};\n    repos[app.name] = appRepos;\n  }\n\n  let repo = appRepos[repoInfo.toURLString()];\n\n  if (repo) {\n    fatal('Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.');\n  }\n\n  repo = new Repo(repoInfo, useRestClient, authTokenProvider, appCheckProvider);\n  appRepos[repoInfo.toURLString()] = repo;\n  return repo;\n}\n/**\r\n * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.\r\n */\n\n\nfunction repoManagerForceRestClient(forceRestClient) {\n  useRestClient = forceRestClient;\n}\n/**\r\n * Class representing a Firebase Realtime Database.\r\n */\n\n\nclass Database {\n  /** @hideconstructor */\n  constructor(_repoInternal,\n  /** The {@link @firebase/app#FirebaseApp} associated with this Realtime Database instance. */\n  app) {\n    this._repoInternal = _repoInternal;\n    this.app = app;\n    /** Represents a `Database` instance. */\n\n    this['type'] = 'database';\n    /** Track if the instance has been used (root or repo accessed) */\n\n    this._instanceStarted = false;\n  }\n\n  get _repo() {\n    if (!this._instanceStarted) {\n      repoStart(this._repoInternal, this.app.options.appId, this.app.options['databaseAuthVariableOverride']);\n      this._instanceStarted = true;\n    }\n\n    return this._repoInternal;\n  }\n\n  get _root() {\n    if (!this._rootInternal) {\n      this._rootInternal = new ReferenceImpl(this._repo, newEmptyPath());\n    }\n\n    return this._rootInternal;\n  }\n\n  _delete() {\n    if (this._rootInternal !== null) {\n      repoManagerDeleteRepo(this._repo, this.app.name);\n      this._repoInternal = null;\n      this._rootInternal = null;\n    }\n\n    return Promise.resolve();\n  }\n\n  _checkNotDeleted(apiName) {\n    if (this._rootInternal === null) {\n      fatal('Cannot call ' + apiName + ' on a deleted database.');\n    }\n  }\n\n}\n/**\r\n * Returns the instance of the Realtime Database SDK that is associated\r\n * with the provided {@link @firebase/app#FirebaseApp}. Initializes a new instance with\r\n * with default settings if no instance exists or if the existing instance uses\r\n * a custom database URL.\r\n *\r\n * @param app - The {@link @firebase/app#FirebaseApp} instance that the returned Realtime\r\n * Database instance is associated with.\r\n * @param url - The URL of the Realtime Database instance to connect to. If not\r\n * provided, the SDK connects to the default instance of the Firebase App.\r\n * @returns The `Database` instance of the provided app.\r\n */\n\n\nfunction getDatabase() {\n  let app = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getApp();\n  let url = arguments.length > 1 ? arguments[1] : undefined;\n  return _getProvider(app, 'database').getImmediate({\n    identifier: url\n  });\n}\n/**\r\n * Modify the provided instance to communicate with the Realtime Database\r\n * emulator.\r\n *\r\n * <p>Note: This method must be called before performing any other operation.\r\n *\r\n * @param db - The instance to modify.\r\n * @param host - The emulator host (ex: localhost)\r\n * @param port - The emulator port (ex: 8080)\r\n * @param options.mockUserToken - the mock auth token to use for unit testing Security Rules\r\n */\n\n\nfunction connectDatabaseEmulator(db, host, port) {\n  let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  db = getModularInstance(db);\n\n  db._checkNotDeleted('useEmulator');\n\n  if (db._instanceStarted) {\n    fatal('Cannot call useEmulator() after instance has already been initialized.');\n  }\n\n  const repo = db._repoInternal;\n  let tokenProvider = undefined;\n\n  if (repo.repoInfo_.nodeAdmin) {\n    if (options.mockUserToken) {\n      fatal('mockUserToken is not supported by the Admin SDK. For client access with mock users, please use the \"firebase\" package instead of \"firebase-admin\".');\n    }\n\n    tokenProvider = new EmulatorTokenProvider(EmulatorTokenProvider.OWNER);\n  } else if (options.mockUserToken) {\n    const token = typeof options.mockUserToken === 'string' ? options.mockUserToken : createMockUserToken(options.mockUserToken, db.app.options.projectId);\n    tokenProvider = new EmulatorTokenProvider(token);\n  } // Modify the repo to apply emulator settings\n\n\n  repoManagerApplyEmulatorSettings(repo, host, port, tokenProvider);\n}\n/**\r\n * Disconnects from the server (all Database operations will be completed\r\n * offline).\r\n *\r\n * The client automatically maintains a persistent connection to the Database\r\n * server, which will remain active indefinitely and reconnect when\r\n * disconnected. However, the `goOffline()` and `goOnline()` methods may be used\r\n * to control the client connection in cases where a persistent connection is\r\n * undesirable.\r\n *\r\n * While offline, the client will no longer receive data updates from the\r\n * Database. However, all Database operations performed locally will continue to\r\n * immediately fire events, allowing your application to continue behaving\r\n * normally. Additionally, each operation performed locally will automatically\r\n * be queued and retried upon reconnection to the Database server.\r\n *\r\n * To reconnect to the Database and begin receiving remote events, see\r\n * `goOnline()`.\r\n *\r\n * @param db - The instance to disconnect.\r\n */\n\n\nfunction goOffline(db) {\n  db = getModularInstance(db);\n\n  db._checkNotDeleted('goOffline');\n\n  repoInterrupt(db._repo);\n}\n/**\r\n * Reconnects to the server and synchronizes the offline Database state\r\n * with the server state.\r\n *\r\n * This method should be used after disabling the active connection with\r\n * `goOffline()`. Once reconnected, the client will transmit the proper data\r\n * and fire the appropriate events so that your client \"catches up\"\r\n * automatically.\r\n *\r\n * @param db - The instance to reconnect.\r\n */\n\n\nfunction goOnline(db) {\n  db = getModularInstance(db);\n\n  db._checkNotDeleted('goOnline');\n\n  repoResume(db._repo);\n}\n\nfunction enableLogging(logger, persistent) {\n  enableLogging$1(logger, persistent);\n}\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction registerDatabase(variant) {\n  setSDKVersion(SDK_VERSION$1);\n\n  _registerComponent(new Component('database', (container, _ref2) => {\n    let {\n      instanceIdentifier: url\n    } = _ref2;\n    const app = container.getProvider('app').getImmediate();\n    const authProvider = container.getProvider('auth-internal');\n    const appCheckProvider = container.getProvider('app-check-internal');\n    return repoManagerDatabaseFromApp(app, authProvider, appCheckProvider, url);\n  }, \"PUBLIC\"\n  /* PUBLIC */\n  ).setMultipleInstances(true));\n\n  registerVersion(name, version, variant); // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n\n  registerVersion(name, version, 'esm2017');\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nconst SERVER_TIMESTAMP = {\n  '.sv': 'timestamp'\n};\n/**\r\n * Returns a placeholder value for auto-populating the current timestamp (time\r\n * since the Unix epoch, in milliseconds) as determined by the Firebase\r\n * servers.\r\n */\n\nfunction serverTimestamp() {\n  return SERVER_TIMESTAMP;\n}\n/**\r\n * Returns a placeholder value that can be used to atomically increment the\r\n * current database value by the provided delta.\r\n *\r\n * @param delta - the amount to modify the current value atomically.\r\n * @returns A placeholder value for modifying data atomically server-side.\r\n */\n\n\nfunction increment(delta) {\n  return {\n    '.sv': {\n      'increment': delta\n    }\n  };\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * A type for the resolve value of {@link runTransaction}.\r\n */\n\n\nclass TransactionResult {\n  /** @hideconstructor */\n  constructor(\n  /** Whether the transaction was successfully committed. */\n  committed,\n  /** The resulting data snapshot. */\n  snapshot) {\n    this.committed = committed;\n    this.snapshot = snapshot;\n  }\n  /** Returns a JSON-serializable representation of this object. */\n\n\n  toJSON() {\n    return {\n      committed: this.committed,\n      snapshot: this.snapshot.toJSON()\n    };\n  }\n\n}\n/**\r\n * Atomically modifies the data at this location.\r\n *\r\n * Atomically modify the data at this location. Unlike a normal `set()`, which\r\n * just overwrites the data regardless of its previous value, `runTransaction()` is\r\n * used to modify the existing value to a new value, ensuring there are no\r\n * conflicts with other clients writing to the same location at the same time.\r\n *\r\n * To accomplish this, you pass `runTransaction()` an update function which is\r\n * used to transform the current value into a new value. If another client\r\n * writes to the location before your new value is successfully written, your\r\n * update function will be called again with the new current value, and the\r\n * write will be retried. This will happen repeatedly until your write succeeds\r\n * without conflict or you abort the transaction by not returning a value from\r\n * your update function.\r\n *\r\n * Note: Modifying data with `set()` will cancel any pending transactions at\r\n * that location, so extreme care should be taken if mixing `set()` and\r\n * `runTransaction()` to update the same data.\r\n *\r\n * Note: When using transactions with Security and Firebase Rules in place, be\r\n * aware that a client needs `.read` access in addition to `.write` access in\r\n * order to perform a transaction. This is because the client-side nature of\r\n * transactions requires the client to read the data in order to transactionally\r\n * update it.\r\n *\r\n * @param ref - The location to atomically modify.\r\n * @param transactionUpdate - A developer-supplied function which will be passed\r\n * the current data stored at this location (as a JavaScript object). The\r\n * function should return the new value it would like written (as a JavaScript\r\n * object). If `undefined` is returned (i.e. you return with no arguments) the\r\n * transaction will be aborted and the data at this location will not be\r\n * modified.\r\n * @param options - An options object to configure transactions.\r\n * @returns A `Promise` that can optionally be used instead of the `onComplete`\r\n * callback to handle success and failure.\r\n */\n\n\nfunction runTransaction(ref, // eslint-disable-next-line @typescript-eslint/no-explicit-any\ntransactionUpdate, options) {\n  var _a;\n\n  ref = getModularInstance(ref);\n  validateWritablePath('Reference.transaction', ref._path);\n\n  if (ref.key === '.length' || ref.key === '.keys') {\n    throw 'Reference.transaction failed: ' + ref.key + ' is a read-only object.';\n  }\n\n  const applyLocally = (_a = options === null || options === void 0 ? void 0 : options.applyLocally) !== null && _a !== void 0 ? _a : true;\n  const deferred = new Deferred();\n\n  const promiseComplete = (error, committed, node) => {\n    let dataSnapshot = null;\n\n    if (error) {\n      deferred.reject(error);\n    } else {\n      dataSnapshot = new DataSnapshot(node, new ReferenceImpl(ref._repo, ref._path), PRIORITY_INDEX);\n      deferred.resolve(new TransactionResult(committed, dataSnapshot));\n    }\n  }; // Add a watch to make sure we get server updates.\n\n\n  const unwatcher = onValue(ref, () => {});\n  repoStartTransaction(ref._repo, ref._path, transactionUpdate, promiseComplete, unwatcher, applyLocally);\n  return deferred.promise;\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nPersistentConnection; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\nPersistentConnection.prototype.simpleListen = function (pathString, onComplete) {\n  this.sendRequest('q', {\n    p: pathString\n  }, onComplete);\n}; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\nPersistentConnection.prototype.echo = function (data, onEcho) {\n  this.sendRequest('echo', {\n    d: data\n  }, onEcho);\n}; // RealTimeConnection properties that we use in tests.\n\n\nConnection;\n/**\r\n * @internal\r\n */\n\nconst hijackHash = function (newHash) {\n  const oldPut = PersistentConnection.prototype.put;\n\n  PersistentConnection.prototype.put = function (pathString, data, onComplete, hash) {\n    if (hash !== undefined) {\n      hash = newHash();\n    }\n\n    oldPut.call(this, pathString, data, onComplete, hash);\n  };\n\n  return function () {\n    PersistentConnection.prototype.put = oldPut;\n  };\n};\n\nRepoInfo;\n/**\r\n * Forces the RepoManager to create Repos that use ReadonlyRestClient instead of PersistentConnection.\r\n * @internal\r\n */\n\nconst forceRestClient = function (forceRestClient) {\n  repoManagerForceRestClient(forceRestClient);\n};\n/**\r\n * Firebase Realtime Database\r\n *\r\n * @packageDocumentation\r\n */\n\n\nregisterDatabase();\nexport { DataSnapshot, Database, OnDisconnect, QueryConstraint, TransactionResult, QueryImpl as _QueryImpl, QueryParams as _QueryParams, ReferenceImpl as _ReferenceImpl, forceRestClient as _TEST_ACCESS_forceRestClient, hijackHash as _TEST_ACCESS_hijackHash, repoManagerDatabaseFromApp as _repoManagerDatabaseFromApp, setSDKVersion as _setSDKVersion, validatePathString as _validatePathString, validateWritablePath as _validateWritablePath, child, connectDatabaseEmulator, enableLogging, endAt, endBefore, equalTo, get, getDatabase, goOffline, goOnline, increment, limitToFirst, limitToLast, off, onChildAdded, onChildChanged, onChildMoved, onChildRemoved, onDisconnect, onValue, orderByChild, orderByKey, orderByPriority, orderByValue, push, query, ref, refFromURL, remove, runTransaction, serverTimestamp, set, setPriority, setWithPriority, startAfter, startAt, update };","map":{"version":3,"sources":["../src/core/version.ts","../src/core/storage/DOMStorageWrapper.ts","../src/core/storage/MemoryStorage.ts","../src/core/storage/storage.ts","../src/core/util/util.ts","../src/core/AppCheckTokenProvider.ts","../src/core/AuthTokenProvider.ts","../src/realtime/Constants.ts","../src/core/RepoInfo.ts","../src/core/stats/StatsCollection.ts","../src/core/stats/StatsManager.ts","../src/realtime/polling/PacketReceiver.ts","../src/realtime/BrowserPollConnection.ts","../src/realtime/WebSocketConnection.ts","../src/realtime/TransportManager.ts","../src/realtime/Connection.ts","../src/core/ServerActions.ts","../src/core/util/EventEmitter.ts","../src/core/util/OnlineMonitor.ts","../src/core/util/Path.ts","../src/core/util/VisibilityMonitor.ts","../src/core/PersistentConnection.ts","../src/core/snap/Node.ts","../src/core/snap/indexes/Index.ts","../src/core/snap/indexes/KeyIndex.ts","../src/core/util/SortedMap.ts","../src/core/snap/comparators.ts","../src/core/snap/snap.ts","../src/core/snap/LeafNode.ts","../src/core/snap/indexes/PriorityIndex.ts","../src/core/snap/childSet.ts","../src/core/snap/IndexMap.ts","../src/core/snap/ChildrenNode.ts","../src/core/snap/nodeFromJSON.ts","../src/core/snap/indexes/PathIndex.ts","../src/core/snap/indexes/ValueIndex.ts","../src/core/util/NextPushId.ts","../src/core/view/Change.ts","../src/core/view/filter/IndexedFilter.ts","../src/core/view/filter/RangedFilter.ts","../src/core/view/filter/LimitedFilter.ts","../src/core/view/QueryParams.ts","../src/core/ReadonlyRestClient.ts","../src/core/SnapshotHolder.ts","../src/core/SparseSnapshotTree.ts","../src/core/stats/StatsListener.ts","../src/core/stats/StatsReporter.ts","../src/core/operation/Operation.ts","../src/core/operation/AckUserWrite.ts","../src/core/operation/ListenComplete.ts","../src/core/operation/Overwrite.ts","../src/core/operation/Merge.ts","../src/core/view/CacheNode.ts","../src/core/view/EventGenerator.ts","../src/core/view/ViewCache.ts","../src/core/util/ImmutableTree.ts","../src/core/CompoundWrite.ts","../src/core/WriteTree.ts","../src/core/view/ChildChangeAccumulator.ts","../src/core/view/CompleteChildSource.ts","../src/core/view/ViewProcessor.ts","../src/core/view/View.ts","../src/core/SyncPoint.ts","../src/core/SyncTree.ts","../src/core/util/ServerValues.ts","../src/core/util/Tree.ts","../src/core/util/validation.ts","../src/core/view/EventQueue.ts","../src/core/Repo.ts","../src/core/util/libs/parser.ts","../src/core/view/Event.ts","../src/core/view/EventRegistration.ts","../src/api/OnDisconnect.ts","../src/api/Reference_impl.ts","../src/api/Database.ts","../src/register.ts","../src/api/ServerValue.ts","../src/api/Transaction.ts","../src/api/test_access.ts","../src/index.ts"],"names":["enableLogging","MAX_NODE","setMaxNode","nodeFromJSON","setPriorityMaxNode","referenceConstructor","errorPrefixFxn","errorPrefix","enableLoggingImpl","SDK_VERSION"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** The semver (www.semver.org) version of the SDK. */\nexport let SDK_VERSION = '';\n\n/**\n * SDK_VERSION should be set before any database instance is created\n * @internal\n */\nexport function setSDKVersion(version: string): void {\n  SDK_VERSION = version;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { jsonEval, stringify } from '@firebase/util';\n\n/**\n * Wraps a DOM Storage object and:\n * - automatically encode objects as JSON strings before storing them to allow us to store arbitrary types.\n * - prefixes names with \"firebase:\" to avoid collisions with app data.\n *\n * We automatically (see storage.js) create two such wrappers, one for sessionStorage,\n * and one for localStorage.\n *\n */\nexport class DOMStorageWrapper {\n  // Use a prefix to avoid collisions with other stuff saved by the app.\n  private prefix_ = 'firebase:';\n\n  /**\n   * @param domStorage_ - The underlying storage object (e.g. localStorage or sessionStorage)\n   */\n  constructor(private domStorage_: Storage) {}\n\n  /**\n   * @param key - The key to save the value under\n   * @param value - The value being stored, or null to remove the key.\n   */\n  set(key: string, value: unknown | null) {\n    if (value == null) {\n      this.domStorage_.removeItem(this.prefixedName_(key));\n    } else {\n      this.domStorage_.setItem(this.prefixedName_(key), stringify(value));\n    }\n  }\n\n  /**\n   * @returns The value that was stored under this key, or null\n   */\n  get(key: string): unknown {\n    const storedVal = this.domStorage_.getItem(this.prefixedName_(key));\n    if (storedVal == null) {\n      return null;\n    } else {\n      return jsonEval(storedVal);\n    }\n  }\n\n  remove(key: string) {\n    this.domStorage_.removeItem(this.prefixedName_(key));\n  }\n\n  isInMemoryStorage: boolean;\n\n  prefixedName_(name: string): string {\n    return this.prefix_ + name;\n  }\n\n  toString(): string {\n    return this.domStorage_.toString();\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains } from '@firebase/util';\n\n/**\n * An in-memory storage implementation that matches the API of DOMStorageWrapper\n * (TODO: create interface for both to implement).\n */\nexport class MemoryStorage {\n  private cache_: { [k: string]: unknown } = {};\n\n  set(key: string, value: unknown | null) {\n    if (value == null) {\n      delete this.cache_[key];\n    } else {\n      this.cache_[key] = value;\n    }\n  }\n\n  get(key: string): unknown {\n    if (contains(this.cache_, key)) {\n      return this.cache_[key];\n    }\n    return null;\n  }\n\n  remove(key: string) {\n    delete this.cache_[key];\n  }\n\n  isInMemoryStorage = true;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DOMStorageWrapper } from './DOMStorageWrapper';\nimport { MemoryStorage } from './MemoryStorage';\n\ndeclare const window: Window;\n\n/**\n * Helper to create a DOMStorageWrapper or else fall back to MemoryStorage.\n * TODO: Once MemoryStorage and DOMStorageWrapper have a shared interface this method annotation should change\n * to reflect this type\n *\n * @param domStorageName - Name of the underlying storage object\n *   (e.g. 'localStorage' or 'sessionStorage').\n * @returns Turning off type information until a common interface is defined.\n */\nconst createStoragefor = function (\n  domStorageName: string\n): DOMStorageWrapper | MemoryStorage {\n  try {\n    // NOTE: just accessing \"localStorage\" or \"window['localStorage']\" may throw a security exception,\n    // so it must be inside the try/catch.\n    if (\n      typeof window !== 'undefined' &&\n      typeof window[domStorageName] !== 'undefined'\n    ) {\n      // Need to test cache. Just because it's here doesn't mean it works\n      const domStorage = window[domStorageName];\n      domStorage.setItem('firebase:sentinel', 'cache');\n      domStorage.removeItem('firebase:sentinel');\n      return new DOMStorageWrapper(domStorage);\n    }\n  } catch (e) {}\n\n  // Failed to create wrapper.  Just return in-memory storage.\n  // TODO: log?\n  return new MemoryStorage();\n};\n\n/** A storage object that lasts across sessions */\nexport const PersistentStorage = createStoragefor('localStorage');\n\n/** A storage object that only lasts one session */\nexport const SessionStorage = createStoragefor('sessionStorage');\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger, LogLevel } from '@firebase/logger';\nimport {\n  assert,\n  base64,\n  Sha1,\n  stringToByteArray,\n  stringify,\n  isNodeSdk\n} from '@firebase/util';\n\nimport { SessionStorage } from '../storage/storage';\nimport { QueryContext } from '../view/EventRegistration';\n\ndeclare const window: Window;\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ndeclare const Windows: any;\n\nconst logClient = new Logger('@firebase/database');\n\n/**\n * Returns a locally-unique ID (generated by just incrementing up from 0 each time its called).\n */\nexport const LUIDGenerator: () => number = (function () {\n  let id = 1;\n  return function () {\n    return id++;\n  };\n})();\n\n/**\n * Sha1 hash of the input string\n * @param str - The string to hash\n * @returns {!string} The resulting hash\n */\nexport const sha1 = function (str: string): string {\n  const utf8Bytes = stringToByteArray(str);\n  const sha1 = new Sha1();\n  sha1.update(utf8Bytes);\n  const sha1Bytes = sha1.digest();\n  return base64.encodeByteArray(sha1Bytes);\n};\n\nconst buildLogMessage_ = function (...varArgs: unknown[]): string {\n  let message = '';\n  for (let i = 0; i < varArgs.length; i++) {\n    const arg = varArgs[i];\n    if (\n      Array.isArray(arg) ||\n      (arg &&\n        typeof arg === 'object' &&\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        typeof (arg as any).length === 'number')\n    ) {\n      message += buildLogMessage_.apply(null, arg);\n    } else if (typeof arg === 'object') {\n      message += stringify(arg);\n    } else {\n      message += arg;\n    }\n    message += ' ';\n  }\n\n  return message;\n};\n\n/**\n * Use this for all debug messages in Firebase.\n */\nexport let logger: ((a: string) => void) | null = null;\n\n/**\n * Flag to check for log availability on first log message\n */\nlet firstLog_ = true;\n\n/**\n * The implementation of Firebase.enableLogging (defined here to break dependencies)\n * @param logger_ - A flag to turn on logging, or a custom logger\n * @param persistent - Whether or not to persist logging settings across refreshes\n */\nexport const enableLogging = function (\n  logger_?: boolean | ((a: string) => void) | null,\n  persistent?: boolean\n) {\n  assert(\n    !persistent || logger_ === true || logger_ === false,\n    \"Can't turn on custom loggers persistently.\"\n  );\n  if (logger_ === true) {\n    logClient.logLevel = LogLevel.VERBOSE;\n    logger = logClient.log.bind(logClient);\n    if (persistent) {\n      SessionStorage.set('logging_enabled', true);\n    }\n  } else if (typeof logger_ === 'function') {\n    logger = logger_;\n  } else {\n    logger = null;\n    SessionStorage.remove('logging_enabled');\n  }\n};\n\nexport const log = function (...varArgs: unknown[]) {\n  if (firstLog_ === true) {\n    firstLog_ = false;\n    if (logger === null && SessionStorage.get('logging_enabled') === true) {\n      enableLogging(true);\n    }\n  }\n\n  if (logger) {\n    const message = buildLogMessage_.apply(null, varArgs);\n    logger(message);\n  }\n};\n\nexport const logWrapper = function (\n  prefix: string\n): (...varArgs: unknown[]) => void {\n  return function (...varArgs: unknown[]) {\n    log(prefix, ...varArgs);\n  };\n};\n\nexport const error = function (...varArgs: string[]) {\n  const message = 'FIREBASE INTERNAL ERROR: ' + buildLogMessage_(...varArgs);\n  logClient.error(message);\n};\n\nexport const fatal = function (...varArgs: string[]) {\n  const message = `FIREBASE FATAL ERROR: ${buildLogMessage_(...varArgs)}`;\n  logClient.error(message);\n  throw new Error(message);\n};\n\nexport const warn = function (...varArgs: unknown[]) {\n  const message = 'FIREBASE WARNING: ' + buildLogMessage_(...varArgs);\n  logClient.warn(message);\n};\n\n/**\n * Logs a warning if the containing page uses https. Called when a call to new Firebase\n * does not use https.\n */\nexport const warnIfPageIsSecure = function () {\n  // Be very careful accessing browser globals. Who knows what may or may not exist.\n  if (\n    typeof window !== 'undefined' &&\n    window.location &&\n    window.location.protocol &&\n    window.location.protocol.indexOf('https:') !== -1\n  ) {\n    warn(\n      'Insecure Firebase access from a secure page. ' +\n        'Please use https in calls to new Firebase().'\n    );\n  }\n};\n\nexport const warnAboutUnsupportedMethod = function (methodName: string) {\n  warn(\n    methodName +\n      ' is unsupported and will likely change soon.  ' +\n      'Please do not use.'\n  );\n};\n\n/**\n * Returns true if data is NaN, or +/- Infinity.\n */\nexport const isInvalidJSONNumber = function (data: unknown): boolean {\n  return (\n    typeof data === 'number' &&\n    (data !== data || // NaN\n      data === Number.POSITIVE_INFINITY ||\n      data === Number.NEGATIVE_INFINITY)\n  );\n};\n\nexport const executeWhenDOMReady = function (fn: () => void) {\n  if (isNodeSdk() || document.readyState === 'complete') {\n    fn();\n  } else {\n    // Modeled after jQuery. Try DOMContentLoaded and onreadystatechange (which\n    // fire before onload), but fall back to onload.\n\n    let called = false;\n    const wrappedFn = function () {\n      if (!document.body) {\n        setTimeout(wrappedFn, Math.floor(10));\n        return;\n      }\n\n      if (!called) {\n        called = true;\n        fn();\n      }\n    };\n\n    if (document.addEventListener) {\n      document.addEventListener('DOMContentLoaded', wrappedFn, false);\n      // fallback to onload.\n      window.addEventListener('load', wrappedFn, false);\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } else if ((document as any).attachEvent) {\n      // IE.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (document as any).attachEvent('onreadystatechange', () => {\n        if (document.readyState === 'complete') {\n          wrappedFn();\n        }\n      });\n      // fallback to onload.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (window as any).attachEvent('onload', wrappedFn);\n\n      // jQuery has an extra hack for IE that we could employ (based on\n      // http://javascript.nwbox.com/IEContentLoaded/) But it looks really old.\n      // I'm hoping we don't need it.\n    }\n  }\n};\n\n/**\n * Minimum key name. Invalid for actual data, used as a marker to sort before any valid names\n */\nexport const MIN_NAME = '[MIN_NAME]';\n\n/**\n * Maximum key name. Invalid for actual data, used as a marker to sort above any valid names\n */\nexport const MAX_NAME = '[MAX_NAME]';\n\n/**\n * Compares valid Firebase key names, plus min and max name\n */\nexport const nameCompare = function (a: string, b: string): number {\n  if (a === b) {\n    return 0;\n  } else if (a === MIN_NAME || b === MAX_NAME) {\n    return -1;\n  } else if (b === MIN_NAME || a === MAX_NAME) {\n    return 1;\n  } else {\n    const aAsInt = tryParseInt(a),\n      bAsInt = tryParseInt(b);\n\n    if (aAsInt !== null) {\n      if (bAsInt !== null) {\n        return aAsInt - bAsInt === 0 ? a.length - b.length : aAsInt - bAsInt;\n      } else {\n        return -1;\n      }\n    } else if (bAsInt !== null) {\n      return 1;\n    } else {\n      return a < b ? -1 : 1;\n    }\n  }\n};\n\n/**\n * @returns {!number} comparison result.\n */\nexport const stringCompare = function (a: string, b: string): number {\n  if (a === b) {\n    return 0;\n  } else if (a < b) {\n    return -1;\n  } else {\n    return 1;\n  }\n};\n\nexport const requireKey = function (\n  key: string,\n  obj: { [k: string]: unknown }\n): unknown {\n  if (obj && key in obj) {\n    return obj[key];\n  } else {\n    throw new Error(\n      'Missing required key (' + key + ') in object: ' + stringify(obj)\n    );\n  }\n};\n\nexport const ObjectToUniqueKey = function (obj: unknown): string {\n  if (typeof obj !== 'object' || obj === null) {\n    return stringify(obj);\n  }\n\n  const keys = [];\n  // eslint-disable-next-line guard-for-in\n  for (const k in obj) {\n    keys.push(k);\n  }\n\n  // Export as json, but with the keys sorted.\n  keys.sort();\n  let key = '{';\n  for (let i = 0; i < keys.length; i++) {\n    if (i !== 0) {\n      key += ',';\n    }\n    key += stringify(keys[i]);\n    key += ':';\n    key += ObjectToUniqueKey(obj[keys[i]]);\n  }\n\n  key += '}';\n  return key;\n};\n\n/**\n * Splits a string into a number of smaller segments of maximum size\n * @param str - The string\n * @param segsize - The maximum number of chars in the string.\n * @returns The string, split into appropriately-sized chunks\n */\nexport const splitStringBySize = function (\n  str: string,\n  segsize: number\n): string[] {\n  const len = str.length;\n\n  if (len <= segsize) {\n    return [str];\n  }\n\n  const dataSegs = [];\n  for (let c = 0; c < len; c += segsize) {\n    if (c + segsize > len) {\n      dataSegs.push(str.substring(c, len));\n    } else {\n      dataSegs.push(str.substring(c, c + segsize));\n    }\n  }\n  return dataSegs;\n};\n\n/**\n * Apply a function to each (key, value) pair in an object or\n * apply a function to each (index, value) pair in an array\n * @param obj - The object or array to iterate over\n * @param fn - The function to apply\n */\nexport function each(obj: object, fn: (k: string, v: unknown) => void) {\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      fn(key, obj[key]);\n    }\n  }\n}\n\n/**\n * Like goog.bind, but doesn't bother to create a closure if opt_context is null/undefined.\n * @param callback - Callback function.\n * @param context - Optional context to bind to.\n *\n */\nexport const bindCallback = function (\n  callback: (a: unknown) => void,\n  context?: object | null\n): (a: unknown) => void {\n  return context ? callback.bind(context) : callback;\n};\n\n/**\n * Borrowed from http://hg.secondlife.com/llsd/src/tip/js/typedarray.js (MIT License)\n * I made one modification at the end and removed the NaN / Infinity\n * handling (since it seemed broken [caused an overflow] and we don't need it).  See MJL comments.\n * @param v - A double\n *\n */\nexport const doubleToIEEE754String = function (v: number): string {\n  assert(!isInvalidJSONNumber(v), 'Invalid JSON number'); // MJL\n\n  const ebits = 11,\n    fbits = 52;\n  const bias = (1 << (ebits - 1)) - 1;\n  let s, e, f, ln, i;\n\n  // Compute sign, exponent, fraction\n  // Skip NaN / Infinity handling --MJL.\n  if (v === 0) {\n    e = 0;\n    f = 0;\n    s = 1 / v === -Infinity ? 1 : 0;\n  } else {\n    s = v < 0;\n    v = Math.abs(v);\n\n    if (v >= Math.pow(2, 1 - bias)) {\n      // Normalized\n      ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);\n      e = ln + bias;\n      f = Math.round(v * Math.pow(2, fbits - ln) - Math.pow(2, fbits));\n    } else {\n      // Denormalized\n      e = 0;\n      f = Math.round(v / Math.pow(2, 1 - bias - fbits));\n    }\n  }\n\n  // Pack sign, exponent, fraction\n  const bits = [];\n  for (i = fbits; i; i -= 1) {\n    bits.push(f % 2 ? 1 : 0);\n    f = Math.floor(f / 2);\n  }\n  for (i = ebits; i; i -= 1) {\n    bits.push(e % 2 ? 1 : 0);\n    e = Math.floor(e / 2);\n  }\n  bits.push(s ? 1 : 0);\n  bits.reverse();\n  const str = bits.join('');\n\n  // Return the data as a hex string. --MJL\n  let hexByteString = '';\n  for (i = 0; i < 64; i += 8) {\n    let hexByte = parseInt(str.substr(i, 8), 2).toString(16);\n    if (hexByte.length === 1) {\n      hexByte = '0' + hexByte;\n    }\n    hexByteString = hexByteString + hexByte;\n  }\n  return hexByteString.toLowerCase();\n};\n\n/**\n * Used to detect if we're in a Chrome content script (which executes in an\n * isolated environment where long-polling doesn't work).\n */\nexport const isChromeExtensionContentScript = function (): boolean {\n  return !!(\n    typeof window === 'object' &&\n    window['chrome'] &&\n    window['chrome']['extension'] &&\n    !/^chrome/.test(window.location.href)\n  );\n};\n\n/**\n * Used to detect if we're in a Windows 8 Store app.\n */\nexport const isWindowsStoreApp = function (): boolean {\n  // Check for the presence of a couple WinRT globals\n  return typeof Windows === 'object' && typeof Windows.UI === 'object';\n};\n\n/**\n * Converts a server error code to a Javascript Error\n */\nexport function errorForServerCode(code: string, query: QueryContext): Error {\n  let reason = 'Unknown Error';\n  if (code === 'too_big') {\n    reason =\n      'The data requested exceeds the maximum size ' +\n      'that can be accessed with a single request.';\n  } else if (code === 'permission_denied') {\n    reason = \"Client doesn't have permission to access the desired data.\";\n  } else if (code === 'unavailable') {\n    reason = 'The service is unavailable';\n  }\n\n  const error = new Error(\n    code + ' at ' + query._path.toString() + ': ' + reason\n  );\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  (error as any).code = code.toUpperCase();\n  return error;\n}\n\n/**\n * Used to test for integer-looking strings\n */\nexport const INTEGER_REGEXP_ = new RegExp('^-?(0*)\\\\d{1,10}$');\n\n/**\n * For use in keys, the minimum possible 32-bit integer.\n */\nexport const INTEGER_32_MIN = -2147483648;\n\n/**\n * For use in kyes, the maximum possible 32-bit integer.\n */\nexport const INTEGER_32_MAX = 2147483647;\n\n/**\n * If the string contains a 32-bit integer, return it.  Else return null.\n */\nexport const tryParseInt = function (str: string): number | null {\n  if (INTEGER_REGEXP_.test(str)) {\n    const intVal = Number(str);\n    if (intVal >= INTEGER_32_MIN && intVal <= INTEGER_32_MAX) {\n      return intVal;\n    }\n  }\n  return null;\n};\n\n/**\n * Helper to run some code but catch any exceptions and re-throw them later.\n * Useful for preventing user callbacks from breaking internal code.\n *\n * Re-throwing the exception from a setTimeout is a little evil, but it's very\n * convenient (we don't have to try to figure out when is a safe point to\n * re-throw it), and the behavior seems reasonable:\n *\n * * If you aren't pausing on exceptions, you get an error in the console with\n *   the correct stack trace.\n * * If you're pausing on all exceptions, the debugger will pause on your\n *   exception and then again when we rethrow it.\n * * If you're only pausing on uncaught exceptions, the debugger will only pause\n *   on us re-throwing it.\n *\n * @param fn - The code to guard.\n */\nexport const exceptionGuard = function (fn: () => void) {\n  try {\n    fn();\n  } catch (e) {\n    // Re-throw exception when it's safe.\n    setTimeout(() => {\n      // It used to be that \"throw e\" would result in a good console error with\n      // relevant context, but as of Chrome 39, you just get the firebase.js\n      // file/line number where we re-throw it, which is useless. So we log\n      // e.stack explicitly.\n      const stack = e.stack || '';\n      warn('Exception was thrown by user callback.', stack);\n      throw e;\n    }, Math.floor(0));\n  }\n};\n\n/**\n * Helper function to safely call opt_callback with the specified arguments.  It:\n * 1. Turns into a no-op if opt_callback is null or undefined.\n * 2. Wraps the call inside exceptionGuard to prevent exceptions from breaking our state.\n *\n * @param callback - Optional onComplete callback.\n * @param varArgs - Arbitrary args to be passed to opt_onComplete\n */\nexport const callUserCallback = function (\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  callback?: Function | null,\n  ...varArgs: unknown[]\n) {\n  if (typeof callback === 'function') {\n    exceptionGuard(() => {\n      callback(...varArgs);\n    });\n  }\n};\n\n/**\n * @returns {boolean} true if we think we're currently being crawled.\n */\nexport const beingCrawled = function (): boolean {\n  const userAgent =\n    (typeof window === 'object' &&\n      window['navigator'] &&\n      window['navigator']['userAgent']) ||\n    '';\n\n  // For now we whitelist the most popular crawlers.  We should refine this to be the set of crawlers we\n  // believe to support JavaScript/AJAX rendering.\n  // NOTE: Google Webmaster Tools doesn't really belong, but their \"This is how a visitor to your website\n  // would have seen the page\" is flaky if we don't treat it as a crawler.\n  return (\n    userAgent.search(\n      /googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i\n    ) >= 0\n  );\n};\n\n/**\n * Export a property of an object using a getter function.\n */\nexport const exportPropGetter = function (\n  object: object,\n  name: string,\n  fnGet: () => unknown\n) {\n  Object.defineProperty(object, name, { get: fnGet });\n};\n\n/**\n * Same as setTimeout() except on Node.JS it will /not/ prevent the process from exiting.\n *\n * It is removed with clearTimeout() as normal.\n *\n * @param fn - Function to run.\n * @param time - Milliseconds to wait before running.\n * @returns The setTimeout() return value.\n */\nexport const setTimeoutNonBlocking = function (\n  fn: () => void,\n  time: number\n): number | object {\n  const timeout: number | object = setTimeout(fn, time);\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  if (typeof timeout === 'object' && (timeout as any)['unref']) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (timeout as any)['unref']();\n  }\n  return timeout;\n};\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AppCheckInternalComponentName,\n  AppCheckTokenListener,\n  AppCheckTokenResult,\n  FirebaseAppCheckInternal\n} from '@firebase/app-check-interop-types';\nimport { Provider } from '@firebase/component';\n\nimport { warn } from './util/util';\n\n/**\n * Abstraction around AppCheck's token fetching capabilities.\n */\nexport class AppCheckTokenProvider {\n  private appCheck?: FirebaseAppCheckInternal;\n  constructor(\n    private appName_: string,\n    private appCheckProvider?: Provider<AppCheckInternalComponentName>\n  ) {\n    this.appCheck = appCheckProvider?.getImmediate({ optional: true });\n    if (!this.appCheck) {\n      appCheckProvider?.get().then(appCheck => (this.appCheck = appCheck));\n    }\n  }\n\n  getToken(forceRefresh?: boolean): Promise<AppCheckTokenResult> {\n    if (!this.appCheck) {\n      return new Promise<AppCheckTokenResult>((resolve, reject) => {\n        // Support delayed initialization of FirebaseAppCheck. This allows our\n        // customers to initialize the RTDB SDK before initializing Firebase\n        // AppCheck and ensures that all requests are authenticated if a token\n        // becomes available before the timoeout below expires.\n        setTimeout(() => {\n          if (this.appCheck) {\n            this.getToken(forceRefresh).then(resolve, reject);\n          } else {\n            resolve(null);\n          }\n        }, 0);\n      });\n    }\n    return this.appCheck.getToken(forceRefresh);\n  }\n\n  addTokenChangeListener(listener: AppCheckTokenListener) {\n    this.appCheckProvider\n      ?.get()\n      .then(appCheck => appCheck.addTokenListener(listener));\n  }\n\n  notifyForInvalidToken(): void {\n    warn(\n      `Provided AppCheck credentials for the app named \"${this.appName_}\" ` +\n        'are invalid. This usually indicates your app was not initialized correctly.'\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseAuthTokenData } from '@firebase/app-types/private';\nimport {\n  FirebaseAuthInternal,\n  FirebaseAuthInternalName\n} from '@firebase/auth-interop-types';\nimport { Provider } from '@firebase/component';\n\nimport { log, warn } from './util/util';\n\nexport interface AuthTokenProvider {\n  getToken(forceRefresh: boolean): Promise<FirebaseAuthTokenData>;\n  addTokenChangeListener(listener: (token: string | null) => void): void;\n  removeTokenChangeListener(listener: (token: string | null) => void): void;\n  notifyForInvalidToken(): void;\n}\n\n/**\n * Abstraction around FirebaseApp's token fetching capabilities.\n */\nexport class FirebaseAuthTokenProvider implements AuthTokenProvider {\n  private auth_: FirebaseAuthInternal | null = null;\n\n  constructor(\n    private appName_: string,\n    private firebaseOptions_: object,\n    private authProvider_: Provider<FirebaseAuthInternalName>\n  ) {\n    this.auth_ = authProvider_.getImmediate({ optional: true });\n    if (!this.auth_) {\n      authProvider_.onInit(auth => (this.auth_ = auth));\n    }\n  }\n\n  getToken(forceRefresh: boolean): Promise<FirebaseAuthTokenData> {\n    if (!this.auth_) {\n      return new Promise<FirebaseAuthTokenData>((resolve, reject) => {\n        // Support delayed initialization of FirebaseAuth. This allows our\n        // customers to initialize the RTDB SDK before initializing Firebase\n        // Auth and ensures that all requests are authenticated if a token\n        // becomes available before the timoeout below expires.\n        setTimeout(() => {\n          if (this.auth_) {\n            this.getToken(forceRefresh).then(resolve, reject);\n          } else {\n            resolve(null);\n          }\n        }, 0);\n      });\n    }\n\n    return this.auth_.getToken(forceRefresh).catch(error => {\n      // TODO: Need to figure out all the cases this is raised and whether\n      // this makes sense.\n      if (error && error.code === 'auth/token-not-initialized') {\n        log('Got auth/token-not-initialized error.  Treating as null token.');\n        return null;\n      } else {\n        return Promise.reject(error);\n      }\n    });\n  }\n\n  addTokenChangeListener(listener: (token: string | null) => void): void {\n    // TODO: We might want to wrap the listener and call it with no args to\n    // avoid a leaky abstraction, but that makes removing the listener harder.\n    if (this.auth_) {\n      this.auth_.addAuthTokenListener(listener);\n    } else {\n      this.authProvider_\n        .get()\n        .then(auth => auth.addAuthTokenListener(listener));\n    }\n  }\n\n  removeTokenChangeListener(listener: (token: string | null) => void): void {\n    this.authProvider_\n      .get()\n      .then(auth => auth.removeAuthTokenListener(listener));\n  }\n\n  notifyForInvalidToken(): void {\n    let errorMessage =\n      'Provided authentication credentials for the app named \"' +\n      this.appName_ +\n      '\" are invalid. This usually indicates your app was not ' +\n      'initialized correctly. ';\n    if ('credential' in this.firebaseOptions_) {\n      errorMessage +=\n        'Make sure the \"credential\" property provided to initializeApp() ' +\n        'is authorized to access the specified \"databaseURL\" and is from the correct ' +\n        'project.';\n    } else if ('serviceAccount' in this.firebaseOptions_) {\n      errorMessage +=\n        'Make sure the \"serviceAccount\" property provided to initializeApp() ' +\n        'is authorized to access the specified \"databaseURL\" and is from the correct ' +\n        'project.';\n    } else {\n      errorMessage +=\n        'Make sure the \"apiKey\" and \"databaseURL\" properties provided to ' +\n        'initializeApp() match the values provided for your app at ' +\n        'https://console.firebase.google.com/.';\n    }\n    warn(errorMessage);\n  }\n}\n\n/* AuthTokenProvider that supplies a constant token. Used by Admin SDK or mockUserToken with emulators. */\nexport class EmulatorTokenProvider implements AuthTokenProvider {\n  /** A string that is treated as an admin access token by the RTDB emulator. Used by Admin SDK. */\n  static OWNER = 'owner';\n\n  constructor(private accessToken: string) {}\n\n  getToken(forceRefresh: boolean): Promise<FirebaseAuthTokenData> {\n    return Promise.resolve({\n      accessToken: this.accessToken\n    });\n  }\n\n  addTokenChangeListener(listener: (token: string | null) => void): void {\n    // Invoke the listener immediately to match the behavior in Firebase Auth\n    // (see packages/auth/src/auth.js#L1807)\n    listener(this.accessToken);\n  }\n\n  removeTokenChangeListener(listener: (token: string | null) => void): void {}\n\n  notifyForInvalidToken(): void {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const PROTOCOL_VERSION = '5';\n\nexport const VERSION_PARAM = 'v';\n\nexport const TRANSPORT_SESSION_PARAM = 's';\n\nexport const REFERER_PARAM = 'r';\n\nexport const FORGE_REF = 'f';\n\n// Matches console.firebase.google.com, firebase-console-*.corp.google.com and\n// firebase.corp.google.com\nexport const FORGE_DOMAIN_RE =\n  /(console\\.firebase|firebase-console-\\w+\\.corp|firebase\\.corp)\\.google\\.com/;\n\nexport const LAST_SESSION_PARAM = 'ls';\n\nexport const APPLICATION_ID_PARAM = 'p';\n\nexport const APP_CHECK_TOKEN_PARAM = 'ac';\n\nexport const WEBSOCKET = 'websocket';\n\nexport const LONG_POLLING = 'long_polling';\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { LONG_POLLING, WEBSOCKET } from '../realtime/Constants';\n\nimport { PersistentStorage } from './storage/storage';\nimport { each } from './util/util';\n\n/**\n * A class that holds metadata about a Repo object\n */\nexport class RepoInfo {\n  private _host: string;\n  private _domain: string;\n  internalHost: string;\n\n  /**\n   * @param host - Hostname portion of the url for the repo\n   * @param secure - Whether or not this repo is accessed over ssl\n   * @param namespace - The namespace represented by the repo\n   * @param webSocketOnly - Whether to prefer websockets over all other transports (used by Nest).\n   * @param nodeAdmin - Whether this instance uses Admin SDK credentials\n   * @param persistenceKey - Override the default session persistence storage key\n   */\n  constructor(\n    host: string,\n    public readonly secure: boolean,\n    public readonly namespace: string,\n    public readonly webSocketOnly: boolean,\n    public readonly nodeAdmin: boolean = false,\n    public readonly persistenceKey: string = '',\n    public readonly includeNamespaceInQueryParams: boolean = false\n  ) {\n    this._host = host.toLowerCase();\n    this._domain = this._host.substr(this._host.indexOf('.') + 1);\n    this.internalHost =\n      (PersistentStorage.get('host:' + host) as string) || this._host;\n  }\n\n  isCacheableHost(): boolean {\n    return this.internalHost.substr(0, 2) === 's-';\n  }\n\n  isCustomHost() {\n    return (\n      this._domain !== 'firebaseio.com' &&\n      this._domain !== 'firebaseio-demo.com'\n    );\n  }\n\n  get host() {\n    return this._host;\n  }\n\n  set host(newHost: string) {\n    if (newHost !== this.internalHost) {\n      this.internalHost = newHost;\n      if (this.isCacheableHost()) {\n        PersistentStorage.set('host:' + this._host, this.internalHost);\n      }\n    }\n  }\n\n  toString(): string {\n    let str = this.toURLString();\n    if (this.persistenceKey) {\n      str += '<' + this.persistenceKey + '>';\n    }\n    return str;\n  }\n\n  toURLString(): string {\n    const protocol = this.secure ? 'https://' : 'http://';\n    const query = this.includeNamespaceInQueryParams\n      ? `?ns=${this.namespace}`\n      : '';\n    return `${protocol}${this.host}/${query}`;\n  }\n}\n\nfunction repoInfoNeedsQueryParam(repoInfo: RepoInfo): boolean {\n  return (\n    repoInfo.host !== repoInfo.internalHost ||\n    repoInfo.isCustomHost() ||\n    repoInfo.includeNamespaceInQueryParams\n  );\n}\n\n/**\n * Returns the websocket URL for this repo\n * @param repoInfo - RepoInfo object\n * @param type - of connection\n * @param params - list\n * @returns The URL for this repo\n */\nexport function repoInfoConnectionURL(\n  repoInfo: RepoInfo,\n  type: string,\n  params: { [k: string]: string }\n): string {\n  assert(typeof type === 'string', 'typeof type must == string');\n  assert(typeof params === 'object', 'typeof params must == object');\n\n  let connURL: string;\n  if (type === WEBSOCKET) {\n    connURL =\n      (repoInfo.secure ? 'wss://' : 'ws://') + repoInfo.internalHost + '/.ws?';\n  } else if (type === LONG_POLLING) {\n    connURL =\n      (repoInfo.secure ? 'https://' : 'http://') +\n      repoInfo.internalHost +\n      '/.lp?';\n  } else {\n    throw new Error('Unknown connection type: ' + type);\n  }\n  if (repoInfoNeedsQueryParam(repoInfo)) {\n    params['ns'] = repoInfo.namespace;\n  }\n\n  const pairs: string[] = [];\n\n  each(params, (key: string, value: string) => {\n    pairs.push(key + '=' + value);\n  });\n\n  return connURL + pairs.join('&');\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { deepCopy, contains } from '@firebase/util';\n\n/**\n * Tracks a collection of stats.\n */\nexport class StatsCollection {\n  private counters_: { [k: string]: number } = {};\n\n  incrementCounter(name: string, amount: number = 1) {\n    if (!contains(this.counters_, name)) {\n      this.counters_[name] = 0;\n    }\n\n    this.counters_[name] += amount;\n  }\n\n  get() {\n    return deepCopy(this.counters_);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../RepoInfo';\n\nimport { StatsCollection } from './StatsCollection';\n\nconst collections: { [k: string]: StatsCollection } = {};\nconst reporters: { [k: string]: unknown } = {};\n\nexport function statsManagerGetCollection(repoInfo: RepoInfo): StatsCollection {\n  const hashString = repoInfo.toString();\n\n  if (!collections[hashString]) {\n    collections[hashString] = new StatsCollection();\n  }\n\n  return collections[hashString];\n}\n\nexport function statsManagerGetOrCreateReporter<T>(\n  repoInfo: RepoInfo,\n  creatorFunction: () => T\n): T {\n  const hashString = repoInfo.toString();\n\n  if (!reporters[hashString]) {\n    reporters[hashString] = creatorFunction();\n  }\n\n  return reporters[hashString] as T;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { exceptionGuard } from '../../core/util/util';\n\n/**\n * This class ensures the packets from the server arrive in order\n * This class takes data from the server and ensures it gets passed into the callbacks in order.\n */\nexport class PacketReceiver {\n  pendingResponses: unknown[] = [];\n  currentResponseNum = 0;\n  closeAfterResponse = -1;\n  onClose: (() => void) | null = null;\n\n  /**\n   * @param onMessage_\n   */\n  constructor(private onMessage_: (a: {}) => void) {}\n\n  closeAfter(responseNum: number, callback: () => void) {\n    this.closeAfterResponse = responseNum;\n    this.onClose = callback;\n    if (this.closeAfterResponse < this.currentResponseNum) {\n      this.onClose();\n      this.onClose = null;\n    }\n  }\n\n  /**\n   * Each message from the server comes with a response number, and an array of data. The responseNumber\n   * allows us to ensure that we process them in the right order, since we can't be guaranteed that all\n   * browsers will respond in the same order as the requests we sent\n   */\n  handleResponse(requestNum: number, data: unknown[]) {\n    this.pendingResponses[requestNum] = data;\n    while (this.pendingResponses[this.currentResponseNum]) {\n      const toProcess = this.pendingResponses[\n        this.currentResponseNum\n      ] as unknown[];\n      delete this.pendingResponses[this.currentResponseNum];\n      for (let i = 0; i < toProcess.length; ++i) {\n        if (toProcess[i]) {\n          exceptionGuard(() => {\n            this.onMessage_(toProcess[i]);\n          });\n        }\n      }\n      if (this.currentResponseNum === this.closeAfterResponse) {\n        if (this.onClose) {\n          this.onClose();\n          this.onClose = null;\n        }\n        break;\n      }\n      this.currentResponseNum++;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { base64Encode, isNodeSdk, stringify } from '@firebase/util';\n\nimport { RepoInfo, repoInfoConnectionURL } from '../core/RepoInfo';\nimport { StatsCollection } from '../core/stats/StatsCollection';\nimport { statsManagerGetCollection } from '../core/stats/StatsManager';\nimport {\n  executeWhenDOMReady,\n  isChromeExtensionContentScript,\n  isWindowsStoreApp,\n  log,\n  logWrapper,\n  LUIDGenerator,\n  splitStringBySize\n} from '../core/util/util';\n\nimport {\n  APP_CHECK_TOKEN_PARAM,\n  APPLICATION_ID_PARAM,\n  FORGE_DOMAIN_RE,\n  FORGE_REF,\n  LAST_SESSION_PARAM,\n  LONG_POLLING,\n  PROTOCOL_VERSION,\n  REFERER_PARAM,\n  TRANSPORT_SESSION_PARAM,\n  VERSION_PARAM\n} from './Constants';\nimport { PacketReceiver } from './polling/PacketReceiver';\nimport { Transport } from './Transport';\n\n// URL query parameters associated with longpolling\nexport const FIREBASE_LONGPOLL_START_PARAM = 'start';\nexport const FIREBASE_LONGPOLL_CLOSE_COMMAND = 'close';\nexport const FIREBASE_LONGPOLL_COMMAND_CB_NAME = 'pLPCommand';\nexport const FIREBASE_LONGPOLL_DATA_CB_NAME = 'pRTLPCB';\nexport const FIREBASE_LONGPOLL_ID_PARAM = 'id';\nexport const FIREBASE_LONGPOLL_PW_PARAM = 'pw';\nexport const FIREBASE_LONGPOLL_SERIAL_PARAM = 'ser';\nexport const FIREBASE_LONGPOLL_CALLBACK_ID_PARAM = 'cb';\nexport const FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM = 'seg';\nexport const FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET = 'ts';\nexport const FIREBASE_LONGPOLL_DATA_PARAM = 'd';\nexport const FIREBASE_LONGPOLL_DISCONN_FRAME_PARAM = 'disconn';\nexport const FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM = 'dframe';\n\n//Data size constants.\n//TODO: Perf: the maximum length actually differs from browser to browser.\n// We should check what browser we're on and set accordingly.\nconst MAX_URL_DATA_SIZE = 1870;\nconst SEG_HEADER_SIZE = 30; //ie: &seg=8299234&ts=982389123&d=\nconst MAX_PAYLOAD_SIZE = MAX_URL_DATA_SIZE - SEG_HEADER_SIZE;\n\n/**\n * Keepalive period\n * send a fresh request at minimum every 25 seconds. Opera has a maximum request\n * length of 30 seconds that we can't exceed.\n */\nconst KEEPALIVE_REQUEST_INTERVAL = 25000;\n\n/**\n * How long to wait before aborting a long-polling connection attempt.\n */\nconst LP_CONNECT_TIMEOUT = 30000;\n\n/**\n * This class manages a single long-polling connection.\n */\nexport class BrowserPollConnection implements Transport {\n  bytesSent = 0;\n  bytesReceived = 0;\n  urlFn: (params: object) => string;\n  scriptTagHolder: FirebaseIFrameScriptHolder;\n  myDisconnFrame: HTMLIFrameElement;\n  curSegmentNum: number;\n  myPacketOrderer: PacketReceiver;\n  id: string;\n  password: string;\n  private log_: (...a: unknown[]) => void;\n  private stats_: StatsCollection;\n  private everConnected_ = false;\n  private isClosed_: boolean;\n  private connectTimeoutTimer_: number | null;\n  private onDisconnect_: ((a?: boolean) => void) | null;\n\n  /**\n   * @param connId An identifier for this connection, used for logging\n   * @param repoInfo The info for the endpoint to send data to.\n   * @param applicationId The Firebase App ID for this project.\n   * @param appCheckToken The AppCheck token for this client.\n   * @param authToken The AuthToken to use for this connection.\n   * @param transportSessionId Optional transportSessionid if we are\n   * reconnecting for an existing transport session\n   * @param lastSessionId Optional lastSessionId if the PersistentConnection has\n   * already created a connection previously\n   */\n  constructor(\n    public connId: string,\n    public repoInfo: RepoInfo,\n    private applicationId?: string,\n    private appCheckToken?: string,\n    private authToken?: string,\n    public transportSessionId?: string,\n    public lastSessionId?: string\n  ) {\n    this.log_ = logWrapper(connId);\n    this.stats_ = statsManagerGetCollection(repoInfo);\n    this.urlFn = (params: { [k: string]: string }) => {\n      // Always add the token if we have one.\n      if (this.appCheckToken) {\n        params[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\n      }\n      return repoInfoConnectionURL(repoInfo, LONG_POLLING, params);\n    };\n  }\n\n  /**\n   * @param onMessage - Callback when messages arrive\n   * @param onDisconnect - Callback with connection lost.\n   */\n  open(onMessage: (msg: {}) => void, onDisconnect: (a?: boolean) => void) {\n    this.curSegmentNum = 0;\n    this.onDisconnect_ = onDisconnect;\n    this.myPacketOrderer = new PacketReceiver(onMessage);\n    this.isClosed_ = false;\n\n    this.connectTimeoutTimer_ = setTimeout(() => {\n      this.log_('Timed out trying to connect.');\n      // Make sure we clear the host cache\n      this.onClosed_();\n      this.connectTimeoutTimer_ = null;\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(LP_CONNECT_TIMEOUT)) as any;\n\n    // Ensure we delay the creation of the iframe until the DOM is loaded.\n    executeWhenDOMReady(() => {\n      if (this.isClosed_) {\n        return;\n      }\n\n      //Set up a callback that gets triggered once a connection is set up.\n      this.scriptTagHolder = new FirebaseIFrameScriptHolder(\n        (...args) => {\n          const [command, arg1, arg2, arg3, arg4] = args;\n          this.incrementIncomingBytes_(args);\n          if (!this.scriptTagHolder) {\n            return; // we closed the connection.\n          }\n\n          if (this.connectTimeoutTimer_) {\n            clearTimeout(this.connectTimeoutTimer_);\n            this.connectTimeoutTimer_ = null;\n          }\n          this.everConnected_ = true;\n          if (command === FIREBASE_LONGPOLL_START_PARAM) {\n            this.id = arg1 as string;\n            this.password = arg2 as string;\n          } else if (command === FIREBASE_LONGPOLL_CLOSE_COMMAND) {\n            // Don't clear the host cache. We got a response from the server, so we know it's reachable\n            if (arg1) {\n              // We aren't expecting any more data (other than what the server's already in the process of sending us\n              // through our already open polls), so don't send any more.\n              this.scriptTagHolder.sendNewPolls = false;\n\n              // arg1 in this case is the last response number sent by the server. We should try to receive\n              // all of the responses up to this one before closing\n              this.myPacketOrderer.closeAfter(arg1 as number, () => {\n                this.onClosed_();\n              });\n            } else {\n              this.onClosed_();\n            }\n          } else {\n            throw new Error('Unrecognized command received: ' + command);\n          }\n        },\n        (...args) => {\n          const [pN, data] = args;\n          this.incrementIncomingBytes_(args);\n          this.myPacketOrderer.handleResponse(pN as number, data as unknown[]);\n        },\n        () => {\n          this.onClosed_();\n        },\n        this.urlFn\n      );\n\n      //Send the initial request to connect. The serial number is simply to keep the browser from pulling previous results\n      //from cache.\n      const urlParams: { [k: string]: string | number } = {};\n      urlParams[FIREBASE_LONGPOLL_START_PARAM] = 't';\n      urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = Math.floor(\n        Math.random() * 100000000\n      );\n      if (this.scriptTagHolder.uniqueCallbackIdentifier) {\n        urlParams[FIREBASE_LONGPOLL_CALLBACK_ID_PARAM] =\n          this.scriptTagHolder.uniqueCallbackIdentifier;\n      }\n      urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n      if (this.transportSessionId) {\n        urlParams[TRANSPORT_SESSION_PARAM] = this.transportSessionId;\n      }\n      if (this.lastSessionId) {\n        urlParams[LAST_SESSION_PARAM] = this.lastSessionId;\n      }\n      if (this.applicationId) {\n        urlParams[APPLICATION_ID_PARAM] = this.applicationId;\n      }\n      if (this.appCheckToken) {\n        urlParams[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\n      }\n      if (\n        typeof location !== 'undefined' &&\n        location.hostname &&\n        FORGE_DOMAIN_RE.test(location.hostname)\n      ) {\n        urlParams[REFERER_PARAM] = FORGE_REF;\n      }\n      const connectURL = this.urlFn(urlParams);\n      this.log_('Connecting via long-poll to ' + connectURL);\n      this.scriptTagHolder.addTag(connectURL, () => {\n        /* do nothing */\n      });\n    });\n  }\n\n  /**\n   * Call this when a handshake has completed successfully and we want to consider the connection established\n   */\n  start() {\n    this.scriptTagHolder.startLongPoll(this.id, this.password);\n    this.addDisconnectPingFrame(this.id, this.password);\n  }\n\n  private static forceAllow_: boolean;\n\n  /**\n   * Forces long polling to be considered as a potential transport\n   */\n  static forceAllow() {\n    BrowserPollConnection.forceAllow_ = true;\n  }\n\n  private static forceDisallow_: boolean;\n\n  /**\n   * Forces longpolling to not be considered as a potential transport\n   */\n  static forceDisallow() {\n    BrowserPollConnection.forceDisallow_ = true;\n  }\n\n  // Static method, use string literal so it can be accessed in a generic way\n  static isAvailable() {\n    if (isNodeSdk()) {\n      return false;\n    } else if (BrowserPollConnection.forceAllow_) {\n      return true;\n    } else {\n      // NOTE: In React-Native there's normally no 'document', but if you debug a React-Native app in\n      // the Chrome debugger, 'document' is defined, but document.createElement is null (2015/06/08).\n      return (\n        !BrowserPollConnection.forceDisallow_ &&\n        typeof document !== 'undefined' &&\n        document.createElement != null &&\n        !isChromeExtensionContentScript() &&\n        !isWindowsStoreApp()\n      );\n    }\n  }\n\n  /**\n   * No-op for polling\n   */\n  markConnectionHealthy() {}\n\n  /**\n   * Stops polling and cleans up the iframe\n   */\n  private shutdown_() {\n    this.isClosed_ = true;\n\n    if (this.scriptTagHolder) {\n      this.scriptTagHolder.close();\n      this.scriptTagHolder = null;\n    }\n\n    //remove the disconnect frame, which will trigger an XHR call to the server to tell it we're leaving.\n    if (this.myDisconnFrame) {\n      document.body.removeChild(this.myDisconnFrame);\n      this.myDisconnFrame = null;\n    }\n\n    if (this.connectTimeoutTimer_) {\n      clearTimeout(this.connectTimeoutTimer_);\n      this.connectTimeoutTimer_ = null;\n    }\n  }\n\n  /**\n   * Triggered when this transport is closed\n   */\n  private onClosed_() {\n    if (!this.isClosed_) {\n      this.log_('Longpoll is closing itself');\n      this.shutdown_();\n\n      if (this.onDisconnect_) {\n        this.onDisconnect_(this.everConnected_);\n        this.onDisconnect_ = null;\n      }\n    }\n  }\n\n  /**\n   * External-facing close handler. RealTime has requested we shut down. Kill our connection and tell the server\n   * that we've left.\n   */\n  close() {\n    if (!this.isClosed_) {\n      this.log_('Longpoll is being closed.');\n      this.shutdown_();\n    }\n  }\n\n  /**\n   * Send the JSON object down to the server. It will need to be stringified, base64 encoded, and then\n   * broken into chunks (since URLs have a small maximum length).\n   * @param data - The JSON data to transmit.\n   */\n  send(data: {}) {\n    const dataStr = stringify(data);\n    this.bytesSent += dataStr.length;\n    this.stats_.incrementCounter('bytes_sent', dataStr.length);\n\n    //first, lets get the base64-encoded data\n    const base64data = base64Encode(dataStr);\n\n    //We can only fit a certain amount in each URL, so we need to split this request\n    //up into multiple pieces if it doesn't fit in one request.\n    const dataSegs = splitStringBySize(base64data, MAX_PAYLOAD_SIZE);\n\n    //Enqueue each segment for transmission. We assign each chunk a sequential ID and a total number\n    //of segments so that we can reassemble the packet on the server.\n    for (let i = 0; i < dataSegs.length; i++) {\n      this.scriptTagHolder.enqueueSegment(\n        this.curSegmentNum,\n        dataSegs.length,\n        dataSegs[i]\n      );\n      this.curSegmentNum++;\n    }\n  }\n\n  /**\n   * This is how we notify the server that we're leaving.\n   * We aren't able to send requests with DHTML on a window close event, but we can\n   * trigger XHR requests in some browsers (everything but Opera basically).\n   */\n  addDisconnectPingFrame(id: string, pw: string) {\n    if (isNodeSdk()) {\n      return;\n    }\n    this.myDisconnFrame = document.createElement('iframe');\n    const urlParams: { [k: string]: string } = {};\n    urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM] = 't';\n    urlParams[FIREBASE_LONGPOLL_ID_PARAM] = id;\n    urlParams[FIREBASE_LONGPOLL_PW_PARAM] = pw;\n    this.myDisconnFrame.src = this.urlFn(urlParams);\n    this.myDisconnFrame.style.display = 'none';\n\n    document.body.appendChild(this.myDisconnFrame);\n  }\n\n  /**\n   * Used to track the bytes received by this client\n   */\n  private incrementIncomingBytes_(args: unknown) {\n    // TODO: This is an annoying perf hit just to track the number of incoming bytes.  Maybe it should be opt-in.\n    const bytesReceived = stringify(args).length;\n    this.bytesReceived += bytesReceived;\n    this.stats_.incrementCounter('bytes_received', bytesReceived);\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport interface IFrameElement extends HTMLIFrameElement {\n  doc: Document;\n}\n\n/*********************************************************************************************\n * A wrapper around an iframe that is used as a long-polling script holder.\n *********************************************************************************************/\nexport class FirebaseIFrameScriptHolder {\n  //We maintain a count of all of the outstanding requests, because if we have too many active at once it can cause\n  //problems in some browsers.\n  outstandingRequests = new Set<number>();\n\n  //A queue of the pending segments waiting for transmission to the server.\n  pendingSegs: Array<{ seg: number; ts: number; d: unknown }> = [];\n\n  //A serial number. We use this for two things:\n  // 1) A way to ensure the browser doesn't cache responses to polls\n  // 2) A way to make the server aware when long-polls arrive in a different order than we started them. The\n  //    server needs to release both polls in this case or it will cause problems in Opera since Opera can only execute\n  //    JSONP code in the order it was added to the iframe.\n  currentSerial = Math.floor(Math.random() * 100000000);\n\n  // This gets set to false when we're \"closing down\" the connection (e.g. we're switching transports but there's still\n  // incoming data from the server that we're waiting for).\n  sendNewPolls = true;\n\n  uniqueCallbackIdentifier: number;\n  myIFrame: IFrameElement;\n  alive: boolean;\n  myID: string;\n  myPW: string;\n  commandCB: (command: string, ...args: unknown[]) => void;\n  onMessageCB: (...args: unknown[]) => void;\n\n  /**\n   * @param commandCB - The callback to be called when control commands are recevied from the server.\n   * @param onMessageCB - The callback to be triggered when responses arrive from the server.\n   * @param onDisconnect - The callback to be triggered when this tag holder is closed\n   * @param urlFn - A function that provides the URL of the endpoint to send data to.\n   */\n  constructor(\n    commandCB: (command: string, ...args: unknown[]) => void,\n    onMessageCB: (...args: unknown[]) => void,\n    public onDisconnect: () => void,\n    public urlFn: (a: object) => string\n  ) {\n    if (!isNodeSdk()) {\n      //Each script holder registers a couple of uniquely named callbacks with the window. These are called from the\n      //iframes where we put the long-polling script tags. We have two callbacks:\n      //   1) Command Callback - Triggered for control issues, like starting a connection.\n      //   2) Message Callback - Triggered when new data arrives.\n      this.uniqueCallbackIdentifier = LUIDGenerator();\n      window[\n        FIREBASE_LONGPOLL_COMMAND_CB_NAME + this.uniqueCallbackIdentifier\n      ] = commandCB;\n      window[FIREBASE_LONGPOLL_DATA_CB_NAME + this.uniqueCallbackIdentifier] =\n        onMessageCB;\n\n      //Create an iframe for us to add script tags to.\n      this.myIFrame = FirebaseIFrameScriptHolder.createIFrame_();\n\n      // Set the iframe's contents.\n      let script = '';\n      // if we set a javascript url, it's IE and we need to set the document domain. The javascript url is sufficient\n      // for ie9, but ie8 needs to do it again in the document itself.\n      if (\n        this.myIFrame.src &&\n        this.myIFrame.src.substr(0, 'javascript:'.length) === 'javascript:'\n      ) {\n        const currentDomain = document.domain;\n        script = '<script>document.domain=\"' + currentDomain + '\";</script>';\n      }\n      const iframeContents = '<html><body>' + script + '</body></html>';\n      try {\n        this.myIFrame.doc.open();\n        this.myIFrame.doc.write(iframeContents);\n        this.myIFrame.doc.close();\n      } catch (e) {\n        log('frame writing exception');\n        if (e.stack) {\n          log(e.stack);\n        }\n        log(e);\n      }\n    } else {\n      this.commandCB = commandCB;\n      this.onMessageCB = onMessageCB;\n    }\n  }\n\n  /**\n   * Each browser has its own funny way to handle iframes. Here we mush them all together into one object that I can\n   * actually use.\n   */\n  private static createIFrame_(): IFrameElement {\n    const iframe = document.createElement('iframe') as IFrameElement;\n    iframe.style.display = 'none';\n\n    // This is necessary in order to initialize the document inside the iframe\n    if (document.body) {\n      document.body.appendChild(iframe);\n      try {\n        // If document.domain has been modified in IE, this will throw an error, and we need to set the\n        // domain of the iframe's document manually. We can do this via a javascript: url as the src attribute\n        // Also note that we must do this *after* the iframe has been appended to the page. Otherwise it doesn't work.\n        const a = iframe.contentWindow.document;\n        if (!a) {\n          // Apologies for the log-spam, I need to do something to keep closure from optimizing out the assignment above.\n          log('No IE domain setting required');\n        }\n      } catch (e) {\n        const domain = document.domain;\n        iframe.src =\n          \"javascript:void((function(){document.open();document.domain='\" +\n          domain +\n          \"';document.close();})())\";\n      }\n    } else {\n      // LongPollConnection attempts to delay initialization until the document is ready, so hopefully this\n      // never gets hit.\n      throw 'Document body has not initialized. Wait to initialize Firebase until after the document is ready.';\n    }\n\n    // Get the document of the iframe in a browser-specific way.\n    if (iframe.contentDocument) {\n      iframe.doc = iframe.contentDocument; // Firefox, Opera, Safari\n    } else if (iframe.contentWindow) {\n      iframe.doc = iframe.contentWindow.document; // Internet Explorer\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } else if ((iframe as any).document) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      iframe.doc = (iframe as any).document; //others?\n    }\n\n    return iframe;\n  }\n\n  /**\n   * Cancel all outstanding queries and remove the frame.\n   */\n  close() {\n    //Mark this iframe as dead, so no new requests are sent.\n    this.alive = false;\n\n    if (this.myIFrame) {\n      //We have to actually remove all of the html inside this iframe before removing it from the\n      //window, or IE will continue loading and executing the script tags we've already added, which\n      //can lead to some errors being thrown. Setting innerHTML seems to be the easiest way to do this.\n      this.myIFrame.doc.body.innerHTML = '';\n      setTimeout(() => {\n        if (this.myIFrame !== null) {\n          document.body.removeChild(this.myIFrame);\n          this.myIFrame = null;\n        }\n      }, Math.floor(0));\n    }\n\n    // Protect from being called recursively.\n    const onDisconnect = this.onDisconnect;\n    if (onDisconnect) {\n      this.onDisconnect = null;\n      onDisconnect();\n    }\n  }\n\n  /**\n   * Actually start the long-polling session by adding the first script tag(s) to the iframe.\n   * @param id - The ID of this connection\n   * @param pw - The password for this connection\n   */\n  startLongPoll(id: string, pw: string) {\n    this.myID = id;\n    this.myPW = pw;\n    this.alive = true;\n\n    //send the initial request. If there are requests queued, make sure that we transmit as many as we are currently able to.\n    while (this.newRequest_()) {}\n  }\n\n  /**\n   * This is called any time someone might want a script tag to be added. It adds a script tag when there aren't\n   * too many outstanding requests and we are still alive.\n   *\n   * If there are outstanding packet segments to send, it sends one. If there aren't, it sends a long-poll anyways if\n   * needed.\n   */\n  private newRequest_() {\n    // We keep one outstanding request open all the time to receive data, but if we need to send data\n    // (pendingSegs.length > 0) then we create a new request to send the data.  The server will automatically\n    // close the old request.\n    if (\n      this.alive &&\n      this.sendNewPolls &&\n      this.outstandingRequests.size < (this.pendingSegs.length > 0 ? 2 : 1)\n    ) {\n      //construct our url\n      this.currentSerial++;\n      const urlParams: { [k: string]: string | number } = {};\n      urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;\n      urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;\n      urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = this.currentSerial;\n      let theURL = this.urlFn(urlParams);\n      //Now add as much data as we can.\n      let curDataString = '';\n      let i = 0;\n\n      while (this.pendingSegs.length > 0) {\n        //first, lets see if the next segment will fit.\n        const nextSeg = this.pendingSegs[0];\n        if (\n          (nextSeg.d as unknown[]).length +\n            SEG_HEADER_SIZE +\n            curDataString.length <=\n          MAX_URL_DATA_SIZE\n        ) {\n          //great, the segment will fit. Lets append it.\n          const theSeg = this.pendingSegs.shift();\n          curDataString =\n            curDataString +\n            '&' +\n            FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM +\n            i +\n            '=' +\n            theSeg.seg +\n            '&' +\n            FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET +\n            i +\n            '=' +\n            theSeg.ts +\n            '&' +\n            FIREBASE_LONGPOLL_DATA_PARAM +\n            i +\n            '=' +\n            theSeg.d;\n          i++;\n        } else {\n          break;\n        }\n      }\n\n      theURL = theURL + curDataString;\n      this.addLongPollTag_(theURL, this.currentSerial);\n\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Queue a packet for transmission to the server.\n   * @param segnum - A sequential id for this packet segment used for reassembly\n   * @param totalsegs - The total number of segments in this packet\n   * @param data - The data for this segment.\n   */\n  enqueueSegment(segnum: number, totalsegs: number, data: unknown) {\n    //add this to the queue of segments to send.\n    this.pendingSegs.push({ seg: segnum, ts: totalsegs, d: data });\n\n    //send the data immediately if there isn't already data being transmitted, unless\n    //startLongPoll hasn't been called yet.\n    if (this.alive) {\n      this.newRequest_();\n    }\n  }\n\n  /**\n   * Add a script tag for a regular long-poll request.\n   * @param url - The URL of the script tag.\n   * @param serial - The serial number of the request.\n   */\n  private addLongPollTag_(url: string, serial: number) {\n    //remember that we sent this request.\n    this.outstandingRequests.add(serial);\n\n    const doNewRequest = () => {\n      this.outstandingRequests.delete(serial);\n      this.newRequest_();\n    };\n\n    // If this request doesn't return on its own accord (by the server sending us some data), we'll\n    // create a new one after the KEEPALIVE interval to make sure we always keep a fresh request open.\n    const keepaliveTimeout = setTimeout(\n      doNewRequest,\n      Math.floor(KEEPALIVE_REQUEST_INTERVAL)\n    );\n\n    const readyStateCB = () => {\n      // Request completed.  Cancel the keepalive.\n      clearTimeout(keepaliveTimeout);\n\n      // Trigger a new request so we can continue receiving data.\n      doNewRequest();\n    };\n\n    this.addTag(url, readyStateCB);\n  }\n\n  /**\n   * Add an arbitrary script tag to the iframe.\n   * @param url - The URL for the script tag source.\n   * @param loadCB - A callback to be triggered once the script has loaded.\n   */\n  addTag(url: string, loadCB: () => void) {\n    if (isNodeSdk()) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (this as any).doNodeLongPoll(url, loadCB);\n    } else {\n      setTimeout(() => {\n        try {\n          // if we're already closed, don't add this poll\n          if (!this.sendNewPolls) {\n            return;\n          }\n          const newScript = this.myIFrame.doc.createElement('script');\n          newScript.type = 'text/javascript';\n          newScript.async = true;\n          newScript.src = url;\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          newScript.onload = (newScript as any).onreadystatechange =\n            function () {\n              // eslint-disable-next-line @typescript-eslint/no-explicit-any\n              const rstate = (newScript as any).readyState;\n              if (!rstate || rstate === 'loaded' || rstate === 'complete') {\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                newScript.onload = (newScript as any).onreadystatechange = null;\n                if (newScript.parentNode) {\n                  newScript.parentNode.removeChild(newScript);\n                }\n                loadCB();\n              }\n            };\n          newScript.onerror = () => {\n            log('Long-poll script failed to load: ' + url);\n            this.sendNewPolls = false;\n            this.close();\n          };\n          this.myIFrame.doc.body.appendChild(newScript);\n        } catch (e) {\n          // TODO: we should make this error visible somehow\n        }\n      }, Math.floor(1));\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, isNodeSdk, jsonEval, stringify } from '@firebase/util';\n\nimport { RepoInfo, repoInfoConnectionURL } from '../core/RepoInfo';\nimport { StatsCollection } from '../core/stats/StatsCollection';\nimport { statsManagerGetCollection } from '../core/stats/StatsManager';\nimport { PersistentStorage } from '../core/storage/storage';\nimport { logWrapper, splitStringBySize } from '../core/util/util';\nimport { SDK_VERSION } from '../core/version';\n\nimport {\n  APP_CHECK_TOKEN_PARAM,\n  FORGE_DOMAIN_RE,\n  FORGE_REF,\n  LAST_SESSION_PARAM,\n  PROTOCOL_VERSION,\n  REFERER_PARAM,\n  TRANSPORT_SESSION_PARAM,\n  VERSION_PARAM,\n  WEBSOCKET\n} from './Constants';\nimport { Transport } from './Transport';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ndeclare const MozWebSocket: any;\n\nconst WEBSOCKET_MAX_FRAME_SIZE = 16384;\nconst WEBSOCKET_KEEPALIVE_INTERVAL = 45000;\n\nlet WebSocketImpl = null;\nif (typeof MozWebSocket !== 'undefined') {\n  WebSocketImpl = MozWebSocket;\n} else if (typeof WebSocket !== 'undefined') {\n  WebSocketImpl = WebSocket;\n}\n\nexport function setWebSocketImpl(impl) {\n  WebSocketImpl = impl;\n}\n\n/**\n * Create a new websocket connection with the given callbacks.\n */\nexport class WebSocketConnection implements Transport {\n  keepaliveTimer: number | null = null;\n  frames: string[] | null = null;\n  totalFrames = 0;\n  bytesSent = 0;\n  bytesReceived = 0;\n  connURL: string;\n  onDisconnect: (a?: boolean) => void;\n  onMessage: (msg: {}) => void;\n  mySock: WebSocket | null;\n  private log_: (...a: unknown[]) => void;\n  private stats_: StatsCollection;\n  private everConnected_: boolean;\n  private isClosed_: boolean;\n  private nodeAdmin: boolean;\n\n  /**\n   * @param connId identifier for this transport\n   * @param repoInfo The info for the websocket endpoint.\n   * @param applicationId The Firebase App ID for this project.\n   * @param appCheckToken The App Check Token for this client.\n   * @param authToken The Auth Token for this client.\n   * @param transportSessionId Optional transportSessionId if this is connecting\n   * to an existing transport session\n   * @param lastSessionId Optional lastSessionId if there was a previous\n   * connection\n   */\n  constructor(\n    public connId: string,\n    repoInfo: RepoInfo,\n    private applicationId?: string,\n    private appCheckToken?: string,\n    private authToken?: string,\n    transportSessionId?: string,\n    lastSessionId?: string\n  ) {\n    this.log_ = logWrapper(this.connId);\n    this.stats_ = statsManagerGetCollection(repoInfo);\n    this.connURL = WebSocketConnection.connectionURL_(\n      repoInfo,\n      transportSessionId,\n      lastSessionId,\n      appCheckToken\n    );\n    this.nodeAdmin = repoInfo.nodeAdmin;\n  }\n\n  /**\n   * @param repoInfo - The info for the websocket endpoint.\n   * @param transportSessionId - Optional transportSessionId if this is connecting to an existing transport\n   *                                         session\n   * @param lastSessionId - Optional lastSessionId if there was a previous connection\n   * @returns connection url\n   */\n  private static connectionURL_(\n    repoInfo: RepoInfo,\n    transportSessionId?: string,\n    lastSessionId?: string,\n    appCheckToken?: string\n  ): string {\n    const urlParams: { [k: string]: string } = {};\n    urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n\n    if (\n      !isNodeSdk() &&\n      typeof location !== 'undefined' &&\n      location.hostname &&\n      FORGE_DOMAIN_RE.test(location.hostname)\n    ) {\n      urlParams[REFERER_PARAM] = FORGE_REF;\n    }\n    if (transportSessionId) {\n      urlParams[TRANSPORT_SESSION_PARAM] = transportSessionId;\n    }\n    if (lastSessionId) {\n      urlParams[LAST_SESSION_PARAM] = lastSessionId;\n    }\n    if (appCheckToken) {\n      urlParams[APP_CHECK_TOKEN_PARAM] = appCheckToken;\n    }\n\n    return repoInfoConnectionURL(repoInfo, WEBSOCKET, urlParams);\n  }\n\n  /**\n   * @param onMessage - Callback when messages arrive\n   * @param onDisconnect - Callback with connection lost.\n   */\n  open(onMessage: (msg: {}) => void, onDisconnect: (a?: boolean) => void) {\n    this.onDisconnect = onDisconnect;\n    this.onMessage = onMessage;\n\n    this.log_('Websocket connecting to ' + this.connURL);\n\n    this.everConnected_ = false;\n    // Assume failure until proven otherwise.\n    PersistentStorage.set('previous_websocket_failure', true);\n\n    try {\n      if (isNodeSdk()) {\n        const device = this.nodeAdmin ? 'AdminNode' : 'Node';\n        // UA Format: Firebase/<wire_protocol>/<sdk_version>/<platform>/<device>\n        const options: { [k: string]: object } = {\n          headers: {\n            'User-Agent': `Firebase/${PROTOCOL_VERSION}/${SDK_VERSION}/${process.platform}/${device}`,\n            'X-Firebase-GMPID': this.applicationId || ''\n          }\n        };\n\n        // If using Node with admin creds, AppCheck-related checks are unnecessary.\n        // Note that we send the credentials here even if they aren't admin credentials, which is\n        // not a problem.\n        // Note that this header is just used to bypass appcheck, and the token should still be sent\n        // through the websocket connection once it is established.\n        if (this.authToken) {\n          options.headers['Authorization'] = `Bearer ${this.authToken}`;\n        }\n        if (this.appCheckToken) {\n          options.headers['X-Firebase-AppCheck'] = this.appCheckToken;\n        }\n\n        // Plumb appropriate http_proxy environment variable into faye-websocket if it exists.\n        const env = process['env'];\n        const proxy =\n          this.connURL.indexOf('wss://') === 0\n            ? env['HTTPS_PROXY'] || env['https_proxy']\n            : env['HTTP_PROXY'] || env['http_proxy'];\n\n        if (proxy) {\n          options['proxy'] = { origin: proxy };\n        }\n\n        this.mySock = new WebSocketImpl(this.connURL, [], options);\n      } else {\n        const options: { [k: string]: object } = {\n          headers: {\n            'X-Firebase-GMPID': this.applicationId || '',\n            'X-Firebase-AppCheck': this.appCheckToken || ''\n          }\n        };\n        this.mySock = new WebSocketImpl(this.connURL, [], options);\n      }\n    } catch (e) {\n      this.log_('Error instantiating WebSocket.');\n      const error = e.message || e.data;\n      if (error) {\n        this.log_(error);\n      }\n      this.onClosed_();\n      return;\n    }\n\n    this.mySock.onopen = () => {\n      this.log_('Websocket connected.');\n      this.everConnected_ = true;\n    };\n\n    this.mySock.onclose = () => {\n      this.log_('Websocket connection was disconnected.');\n      this.mySock = null;\n      this.onClosed_();\n    };\n\n    this.mySock.onmessage = m => {\n      this.handleIncomingFrame(m as {});\n    };\n\n    this.mySock.onerror = e => {\n      this.log_('WebSocket error.  Closing connection.');\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const error = (e as any).message || (e as any).data;\n      if (error) {\n        this.log_(error);\n      }\n      this.onClosed_();\n    };\n  }\n\n  /**\n   * No-op for websockets, we don't need to do anything once the connection is confirmed as open\n   */\n  start() {}\n\n  static forceDisallow_: boolean;\n\n  static forceDisallow() {\n    WebSocketConnection.forceDisallow_ = true;\n  }\n\n  static isAvailable(): boolean {\n    let isOldAndroid = false;\n    if (typeof navigator !== 'undefined' && navigator.userAgent) {\n      const oldAndroidRegex = /Android ([0-9]{0,}\\.[0-9]{0,})/;\n      const oldAndroidMatch = navigator.userAgent.match(oldAndroidRegex);\n      if (oldAndroidMatch && oldAndroidMatch.length > 1) {\n        if (parseFloat(oldAndroidMatch[1]) < 4.4) {\n          isOldAndroid = true;\n        }\n      }\n    }\n\n    return (\n      !isOldAndroid &&\n      WebSocketImpl !== null &&\n      !WebSocketConnection.forceDisallow_\n    );\n  }\n\n  /**\n   * Number of response before we consider the connection \"healthy.\"\n   */\n  static responsesRequiredToBeHealthy = 2;\n\n  /**\n   * Time to wait for the connection te become healthy before giving up.\n   */\n  static healthyTimeout = 30000;\n\n  /**\n   * Returns true if we previously failed to connect with this transport.\n   */\n  static previouslyFailed(): boolean {\n    // If our persistent storage is actually only in-memory storage,\n    // we default to assuming that it previously failed to be safe.\n    return (\n      PersistentStorage.isInMemoryStorage ||\n      PersistentStorage.get('previous_websocket_failure') === true\n    );\n  }\n\n  markConnectionHealthy() {\n    PersistentStorage.remove('previous_websocket_failure');\n  }\n\n  private appendFrame_(data: string) {\n    this.frames.push(data);\n    if (this.frames.length === this.totalFrames) {\n      const fullMess = this.frames.join('');\n      this.frames = null;\n      const jsonMess = jsonEval(fullMess) as object;\n\n      //handle the message\n      this.onMessage(jsonMess);\n    }\n  }\n\n  /**\n   * @param frameCount - The number of frames we are expecting from the server\n   */\n  private handleNewFrameCount_(frameCount: number) {\n    this.totalFrames = frameCount;\n    this.frames = [];\n  }\n\n  /**\n   * Attempts to parse a frame count out of some text. If it can't, assumes a value of 1\n   * @returns Any remaining data to be process, or null if there is none\n   */\n  private extractFrameCount_(data: string): string | null {\n    assert(this.frames === null, 'We already have a frame buffer');\n    // TODO: The server is only supposed to send up to 9999 frames (i.e. length <= 4), but that isn't being enforced\n    // currently.  So allowing larger frame counts (length <= 6).  See https://app.asana.com/0/search/8688598998380/8237608042508\n    if (data.length <= 6) {\n      const frameCount = Number(data);\n      if (!isNaN(frameCount)) {\n        this.handleNewFrameCount_(frameCount);\n        return null;\n      }\n    }\n    this.handleNewFrameCount_(1);\n    return data;\n  }\n\n  /**\n   * Process a websocket frame that has arrived from the server.\n   * @param mess - The frame data\n   */\n  handleIncomingFrame(mess: { [k: string]: unknown }) {\n    if (this.mySock === null) {\n      return; // Chrome apparently delivers incoming packets even after we .close() the connection sometimes.\n    }\n    const data = mess['data'] as string;\n    this.bytesReceived += data.length;\n    this.stats_.incrementCounter('bytes_received', data.length);\n\n    this.resetKeepAlive();\n\n    if (this.frames !== null) {\n      // we're buffering\n      this.appendFrame_(data);\n    } else {\n      // try to parse out a frame count, otherwise, assume 1 and process it\n      const remainingData = this.extractFrameCount_(data);\n      if (remainingData !== null) {\n        this.appendFrame_(remainingData);\n      }\n    }\n  }\n\n  /**\n   * Send a message to the server\n   * @param data - The JSON object to transmit\n   */\n  send(data: {}) {\n    this.resetKeepAlive();\n\n    const dataStr = stringify(data);\n    this.bytesSent += dataStr.length;\n    this.stats_.incrementCounter('bytes_sent', dataStr.length);\n\n    //We can only fit a certain amount in each websocket frame, so we need to split this request\n    //up into multiple pieces if it doesn't fit in one request.\n\n    const dataSegs = splitStringBySize(dataStr, WEBSOCKET_MAX_FRAME_SIZE);\n\n    //Send the length header\n    if (dataSegs.length > 1) {\n      this.sendString_(String(dataSegs.length));\n    }\n\n    //Send the actual data in segments.\n    for (let i = 0; i < dataSegs.length; i++) {\n      this.sendString_(dataSegs[i]);\n    }\n  }\n\n  private shutdown_() {\n    this.isClosed_ = true;\n    if (this.keepaliveTimer) {\n      clearInterval(this.keepaliveTimer);\n      this.keepaliveTimer = null;\n    }\n\n    if (this.mySock) {\n      this.mySock.close();\n      this.mySock = null;\n    }\n  }\n\n  private onClosed_() {\n    if (!this.isClosed_) {\n      this.log_('WebSocket is closing itself');\n      this.shutdown_();\n\n      // since this is an internal close, trigger the close listener\n      if (this.onDisconnect) {\n        this.onDisconnect(this.everConnected_);\n        this.onDisconnect = null;\n      }\n    }\n  }\n\n  /**\n   * External-facing close handler.\n   * Close the websocket and kill the connection.\n   */\n  close() {\n    if (!this.isClosed_) {\n      this.log_('WebSocket is being closed');\n      this.shutdown_();\n    }\n  }\n\n  /**\n   * Kill the current keepalive timer and start a new one, to ensure that it always fires N seconds after\n   * the last activity.\n   */\n  resetKeepAlive() {\n    clearInterval(this.keepaliveTimer);\n    this.keepaliveTimer = setInterval(() => {\n      //If there has been no websocket activity for a while, send a no-op\n      if (this.mySock) {\n        this.sendString_('0');\n      }\n      this.resetKeepAlive();\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(WEBSOCKET_KEEPALIVE_INTERVAL)) as any;\n  }\n\n  /**\n   * Send a string over the websocket.\n   *\n   * @param str - String to send.\n   */\n  private sendString_(str: string) {\n    // Firefox seems to sometimes throw exceptions (NS_ERROR_UNEXPECTED) from websocket .send()\n    // calls for some unknown reason.  We treat these as an error and disconnect.\n    // See https://app.asana.com/0/58926111402292/68021340250410\n    try {\n      this.mySock.send(str);\n    } catch (e) {\n      this.log_(\n        'Exception thrown from WebSocket.send():',\n        e.message || e.data,\n        'Closing connection.'\n      );\n      setTimeout(this.onClosed_.bind(this), 0);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../core/RepoInfo';\nimport { warn } from '../core/util/util';\n\nimport { BrowserPollConnection } from './BrowserPollConnection';\nimport { TransportConstructor } from './Transport';\nimport { WebSocketConnection } from './WebSocketConnection';\n\n/**\n * Currently simplistic, this class manages what transport a Connection should use at various stages of its\n * lifecycle.\n *\n * It starts with longpolling in a browser, and httppolling on node. It then upgrades to websockets if\n * they are available.\n */\nexport class TransportManager {\n  private transports_: TransportConstructor[];\n\n  static get ALL_TRANSPORTS() {\n    return [BrowserPollConnection, WebSocketConnection];\n  }\n\n  /**\n   * @param repoInfo - Metadata around the namespace we're connecting to\n   */\n  constructor(repoInfo: RepoInfo) {\n    this.initTransports_(repoInfo);\n  }\n\n  private initTransports_(repoInfo: RepoInfo) {\n    const isWebSocketsAvailable: boolean =\n      WebSocketConnection && WebSocketConnection['isAvailable']();\n    let isSkipPollConnection =\n      isWebSocketsAvailable && !WebSocketConnection.previouslyFailed();\n\n    if (repoInfo.webSocketOnly) {\n      if (!isWebSocketsAvailable) {\n        warn(\n          \"wss:// URL used, but browser isn't known to support websockets.  Trying anyway.\"\n        );\n      }\n\n      isSkipPollConnection = true;\n    }\n\n    if (isSkipPollConnection) {\n      this.transports_ = [WebSocketConnection];\n    } else {\n      const transports = (this.transports_ = [] as TransportConstructor[]);\n      for (const transport of TransportManager.ALL_TRANSPORTS) {\n        if (transport && transport['isAvailable']()) {\n          transports.push(transport);\n        }\n      }\n    }\n  }\n\n  /**\n   * @returns The constructor for the initial transport to use\n   */\n  initialTransport(): TransportConstructor {\n    if (this.transports_.length > 0) {\n      return this.transports_[0];\n    } else {\n      throw new Error('No transports available');\n    }\n  }\n\n  /**\n   * @returns The constructor for the next transport, or null\n   */\n  upgradeTransport(): TransportConstructor | null {\n    if (this.transports_.length > 1) {\n      return this.transports_[1];\n    } else {\n      return null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../core/RepoInfo';\nimport { PersistentStorage } from '../core/storage/storage';\nimport { Indexable } from '../core/util/misc';\nimport {\n  error,\n  logWrapper,\n  requireKey,\n  setTimeoutNonBlocking,\n  warn\n} from '../core/util/util';\n\nimport { PROTOCOL_VERSION } from './Constants';\nimport { Transport, TransportConstructor } from './Transport';\nimport { TransportManager } from './TransportManager';\n\n// Abort upgrade attempt if it takes longer than 60s.\nconst UPGRADE_TIMEOUT = 60000;\n\n// For some transports (WebSockets), we need to \"validate\" the transport by exchanging a few requests and responses.\n// If we haven't sent enough requests within 5s, we'll start sending noop ping requests.\nconst DELAY_BEFORE_SENDING_EXTRA_REQUESTS = 5000;\n\n// If the initial data sent triggers a lot of bandwidth (i.e. it's a large put or a listen for a large amount of data)\n// then we may not be able to exchange our ping/pong requests within the healthy timeout.  So if we reach the timeout\n// but we've sent/received enough bytes, we don't cancel the connection.\nconst BYTES_SENT_HEALTHY_OVERRIDE = 10 * 1024;\nconst BYTES_RECEIVED_HEALTHY_OVERRIDE = 100 * 1024;\n\nconst enum RealtimeState {\n  CONNECTING,\n  CONNECTED,\n  DISCONNECTED\n}\n\nconst MESSAGE_TYPE = 't';\nconst MESSAGE_DATA = 'd';\nconst CONTROL_SHUTDOWN = 's';\nconst CONTROL_RESET = 'r';\nconst CONTROL_ERROR = 'e';\nconst CONTROL_PONG = 'o';\nconst SWITCH_ACK = 'a';\nconst END_TRANSMISSION = 'n';\nconst PING = 'p';\n\nconst SERVER_HELLO = 'h';\n\n/**\n * Creates a new real-time connection to the server using whichever method works\n * best in the current browser.\n */\nexport class Connection {\n  connectionCount = 0;\n  pendingDataMessages: unknown[] = [];\n  sessionId: string;\n\n  private conn_: Transport;\n  private healthyTimeout_: number;\n  private isHealthy_: boolean;\n  private log_: (...args: unknown[]) => void;\n  private primaryResponsesRequired_: number;\n  private rx_: Transport;\n  private secondaryConn_: Transport;\n  private secondaryResponsesRequired_: number;\n  private state_ = RealtimeState.CONNECTING;\n  private transportManager_: TransportManager;\n  private tx_: Transport;\n\n  /**\n   * @param id - an id for this connection\n   * @param repoInfo_ - the info for the endpoint to connect to\n   * @param applicationId_ - the Firebase App ID for this project\n   * @param appCheckToken_ - The App Check Token for this device.\n   * @param authToken_ - The auth token for this session.\n   * @param onMessage_ - the callback to be triggered when a server-push message arrives\n   * @param onReady_ - the callback to be triggered when this connection is ready to send messages.\n   * @param onDisconnect_ - the callback to be triggered when a connection was lost\n   * @param onKill_ - the callback to be triggered when this connection has permanently shut down.\n   * @param lastSessionId - last session id in persistent connection. is used to clean up old session in real-time server\n   */\n  constructor(\n    public id: string,\n    private repoInfo_: RepoInfo,\n    private applicationId_: string | undefined,\n    private appCheckToken_: string | undefined,\n    private authToken_: string | undefined,\n    private onMessage_: (a: {}) => void,\n    private onReady_: (a: number, b: string) => void,\n    private onDisconnect_: () => void,\n    private onKill_: (a: string) => void,\n    public lastSessionId?: string\n  ) {\n    this.log_ = logWrapper('c:' + this.id + ':');\n    this.transportManager_ = new TransportManager(repoInfo_);\n    this.log_('Connection created');\n    this.start_();\n  }\n\n  /**\n   * Starts a connection attempt\n   */\n  private start_(): void {\n    const conn = this.transportManager_.initialTransport();\n    this.conn_ = new conn(\n      this.nextTransportId_(),\n      this.repoInfo_,\n      this.applicationId_,\n      this.appCheckToken_,\n      this.authToken_,\n      null,\n      this.lastSessionId\n    );\n\n    // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n    // can consider the transport healthy.\n    this.primaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;\n\n    const onMessageReceived = this.connReceiver_(this.conn_);\n    const onConnectionLost = this.disconnReceiver_(this.conn_);\n    this.tx_ = this.conn_;\n    this.rx_ = this.conn_;\n    this.secondaryConn_ = null;\n    this.isHealthy_ = false;\n\n    /*\n     * Firefox doesn't like when code from one iframe tries to create another iframe by way of the parent frame.\n     * This can occur in the case of a redirect, i.e. we guessed wrong on what server to connect to and received a reset.\n     * Somehow, setTimeout seems to make this ok. That doesn't make sense from a security perspective, since you should\n     * still have the context of your originating frame.\n     */\n    setTimeout(() => {\n      // this.conn_ gets set to null in some of the tests. Check to make sure it still exists before using it\n      this.conn_ && this.conn_.open(onMessageReceived, onConnectionLost);\n    }, Math.floor(0));\n\n    const healthyTimeoutMS = conn['healthyTimeout'] || 0;\n    if (healthyTimeoutMS > 0) {\n      this.healthyTimeout_ = setTimeoutNonBlocking(() => {\n        this.healthyTimeout_ = null;\n        if (!this.isHealthy_) {\n          if (\n            this.conn_ &&\n            this.conn_.bytesReceived > BYTES_RECEIVED_HEALTHY_OVERRIDE\n          ) {\n            this.log_(\n              'Connection exceeded healthy timeout but has received ' +\n                this.conn_.bytesReceived +\n                ' bytes.  Marking connection healthy.'\n            );\n            this.isHealthy_ = true;\n            this.conn_.markConnectionHealthy();\n          } else if (\n            this.conn_ &&\n            this.conn_.bytesSent > BYTES_SENT_HEALTHY_OVERRIDE\n          ) {\n            this.log_(\n              'Connection exceeded healthy timeout but has sent ' +\n                this.conn_.bytesSent +\n                ' bytes.  Leaving connection alive.'\n            );\n            // NOTE: We don't want to mark it healthy, since we have no guarantee that the bytes have made it to\n            // the server.\n          } else {\n            this.log_('Closing unhealthy connection after timeout.');\n            this.close();\n          }\n        }\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      }, Math.floor(healthyTimeoutMS)) as any;\n    }\n  }\n\n  private nextTransportId_(): string {\n    return 'c:' + this.id + ':' + this.connectionCount++;\n  }\n\n  private disconnReceiver_(conn) {\n    return everConnected => {\n      if (conn === this.conn_) {\n        this.onConnectionLost_(everConnected);\n      } else if (conn === this.secondaryConn_) {\n        this.log_('Secondary connection lost.');\n        this.onSecondaryConnectionLost_();\n      } else {\n        this.log_('closing an old connection');\n      }\n    };\n  }\n\n  private connReceiver_(conn: Transport) {\n    return (message: Indexable) => {\n      if (this.state_ !== RealtimeState.DISCONNECTED) {\n        if (conn === this.rx_) {\n          this.onPrimaryMessageReceived_(message);\n        } else if (conn === this.secondaryConn_) {\n          this.onSecondaryMessageReceived_(message);\n        } else {\n          this.log_('message on old connection');\n        }\n      }\n    };\n  }\n\n  /**\n   * @param dataMsg - An arbitrary data message to be sent to the server\n   */\n  sendRequest(dataMsg: object) {\n    // wrap in a data message envelope and send it on\n    const msg = { t: 'd', d: dataMsg };\n    this.sendData_(msg);\n  }\n\n  tryCleanupConnection() {\n    if (this.tx_ === this.secondaryConn_ && this.rx_ === this.secondaryConn_) {\n      this.log_(\n        'cleaning up and promoting a connection: ' + this.secondaryConn_.connId\n      );\n      this.conn_ = this.secondaryConn_;\n      this.secondaryConn_ = null;\n      // the server will shutdown the old connection\n    }\n  }\n\n  private onSecondaryControl_(controlData: { [k: string]: unknown }) {\n    if (MESSAGE_TYPE in controlData) {\n      const cmd = controlData[MESSAGE_TYPE] as string;\n      if (cmd === SWITCH_ACK) {\n        this.upgradeIfSecondaryHealthy_();\n      } else if (cmd === CONTROL_RESET) {\n        // Most likely the session wasn't valid. Abandon the switch attempt\n        this.log_('Got a reset on secondary, closing it');\n        this.secondaryConn_.close();\n        // If we were already using this connection for something, than we need to fully close\n        if (\n          this.tx_ === this.secondaryConn_ ||\n          this.rx_ === this.secondaryConn_\n        ) {\n          this.close();\n        }\n      } else if (cmd === CONTROL_PONG) {\n        this.log_('got pong on secondary.');\n        this.secondaryResponsesRequired_--;\n        this.upgradeIfSecondaryHealthy_();\n      }\n    }\n  }\n\n  private onSecondaryMessageReceived_(parsedData: Indexable) {\n    const layer: string = requireKey('t', parsedData) as string;\n    const data: unknown = requireKey('d', parsedData);\n    if (layer === 'c') {\n      this.onSecondaryControl_(data as Indexable);\n    } else if (layer === 'd') {\n      // got a data message, but we're still second connection. Need to buffer it up\n      this.pendingDataMessages.push(data);\n    } else {\n      throw new Error('Unknown protocol layer: ' + layer);\n    }\n  }\n\n  private upgradeIfSecondaryHealthy_() {\n    if (this.secondaryResponsesRequired_ <= 0) {\n      this.log_('Secondary connection is healthy.');\n      this.isHealthy_ = true;\n      this.secondaryConn_.markConnectionHealthy();\n      this.proceedWithUpgrade_();\n    } else {\n      // Send a ping to make sure the connection is healthy.\n      this.log_('sending ping on secondary.');\n      this.secondaryConn_.send({ t: 'c', d: { t: PING, d: {} } });\n    }\n  }\n\n  private proceedWithUpgrade_() {\n    // tell this connection to consider itself open\n    this.secondaryConn_.start();\n    // send ack\n    this.log_('sending client ack on secondary');\n    this.secondaryConn_.send({ t: 'c', d: { t: SWITCH_ACK, d: {} } });\n\n    // send end packet on primary transport, switch to sending on this one\n    // can receive on this one, buffer responses until end received on primary transport\n    this.log_('Ending transmission on primary');\n    this.conn_.send({ t: 'c', d: { t: END_TRANSMISSION, d: {} } });\n    this.tx_ = this.secondaryConn_;\n\n    this.tryCleanupConnection();\n  }\n\n  private onPrimaryMessageReceived_(parsedData: { [k: string]: unknown }) {\n    // Must refer to parsedData properties in quotes, so closure doesn't touch them.\n    const layer: string = requireKey('t', parsedData) as string;\n    const data: unknown = requireKey('d', parsedData);\n    if (layer === 'c') {\n      this.onControl_(data as { [k: string]: unknown });\n    } else if (layer === 'd') {\n      this.onDataMessage_(data);\n    }\n  }\n\n  private onDataMessage_(message: unknown) {\n    this.onPrimaryResponse_();\n\n    // We don't do anything with data messages, just kick them up a level\n    this.onMessage_(message);\n  }\n\n  private onPrimaryResponse_() {\n    if (!this.isHealthy_) {\n      this.primaryResponsesRequired_--;\n      if (this.primaryResponsesRequired_ <= 0) {\n        this.log_('Primary connection is healthy.');\n        this.isHealthy_ = true;\n        this.conn_.markConnectionHealthy();\n      }\n    }\n  }\n\n  private onControl_(controlData: { [k: string]: unknown }) {\n    const cmd: string = requireKey(MESSAGE_TYPE, controlData) as string;\n    if (MESSAGE_DATA in controlData) {\n      const payload = controlData[MESSAGE_DATA];\n      if (cmd === SERVER_HELLO) {\n        this.onHandshake_(\n          payload as {\n            ts: number;\n            v: string;\n            h: string;\n            s: string;\n          }\n        );\n      } else if (cmd === END_TRANSMISSION) {\n        this.log_('recvd end transmission on primary');\n        this.rx_ = this.secondaryConn_;\n        for (let i = 0; i < this.pendingDataMessages.length; ++i) {\n          this.onDataMessage_(this.pendingDataMessages[i]);\n        }\n        this.pendingDataMessages = [];\n        this.tryCleanupConnection();\n      } else if (cmd === CONTROL_SHUTDOWN) {\n        // This was previously the 'onKill' callback passed to the lower-level connection\n        // payload in this case is the reason for the shutdown. Generally a human-readable error\n        this.onConnectionShutdown_(payload as string);\n      } else if (cmd === CONTROL_RESET) {\n        // payload in this case is the host we should contact\n        this.onReset_(payload as string);\n      } else if (cmd === CONTROL_ERROR) {\n        error('Server Error: ' + payload);\n      } else if (cmd === CONTROL_PONG) {\n        this.log_('got pong on primary.');\n        this.onPrimaryResponse_();\n        this.sendPingOnPrimaryIfNecessary_();\n      } else {\n        error('Unknown control packet command: ' + cmd);\n      }\n    }\n  }\n\n  /**\n   * @param handshake - The handshake data returned from the server\n   */\n  private onHandshake_(handshake: {\n    ts: number;\n    v: string;\n    h: string;\n    s: string;\n  }): void {\n    const timestamp = handshake.ts;\n    const version = handshake.v;\n    const host = handshake.h;\n    this.sessionId = handshake.s;\n    this.repoInfo_.host = host;\n    // if we've already closed the connection, then don't bother trying to progress further\n    if (this.state_ === RealtimeState.CONNECTING) {\n      this.conn_.start();\n      this.onConnectionEstablished_(this.conn_, timestamp);\n      if (PROTOCOL_VERSION !== version) {\n        warn('Protocol version mismatch detected');\n      }\n      // TODO: do we want to upgrade? when? maybe a delay?\n      this.tryStartUpgrade_();\n    }\n  }\n\n  private tryStartUpgrade_() {\n    const conn = this.transportManager_.upgradeTransport();\n    if (conn) {\n      this.startUpgrade_(conn);\n    }\n  }\n\n  private startUpgrade_(conn: TransportConstructor) {\n    this.secondaryConn_ = new conn(\n      this.nextTransportId_(),\n      this.repoInfo_,\n      this.applicationId_,\n      this.appCheckToken_,\n      this.authToken_,\n      this.sessionId\n    );\n    // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n    // can consider the transport healthy.\n    this.secondaryResponsesRequired_ =\n      conn['responsesRequiredToBeHealthy'] || 0;\n\n    const onMessage = this.connReceiver_(this.secondaryConn_);\n    const onDisconnect = this.disconnReceiver_(this.secondaryConn_);\n    this.secondaryConn_.open(onMessage, onDisconnect);\n\n    // If we haven't successfully upgraded after UPGRADE_TIMEOUT, give up and kill the secondary.\n    setTimeoutNonBlocking(() => {\n      if (this.secondaryConn_) {\n        this.log_('Timed out trying to upgrade.');\n        this.secondaryConn_.close();\n      }\n    }, Math.floor(UPGRADE_TIMEOUT));\n  }\n\n  private onReset_(host: string) {\n    this.log_('Reset packet received.  New host: ' + host);\n    this.repoInfo_.host = host;\n    // TODO: if we're already \"connected\", we need to trigger a disconnect at the next layer up.\n    // We don't currently support resets after the connection has already been established\n    if (this.state_ === RealtimeState.CONNECTED) {\n      this.close();\n    } else {\n      // Close whatever connections we have open and start again.\n      this.closeConnections_();\n      this.start_();\n    }\n  }\n\n  private onConnectionEstablished_(conn: Transport, timestamp: number) {\n    this.log_('Realtime connection established.');\n    this.conn_ = conn;\n    this.state_ = RealtimeState.CONNECTED;\n\n    if (this.onReady_) {\n      this.onReady_(timestamp, this.sessionId);\n      this.onReady_ = null;\n    }\n\n    // If after 5 seconds we haven't sent enough requests to the server to get the connection healthy,\n    // send some pings.\n    if (this.primaryResponsesRequired_ === 0) {\n      this.log_('Primary connection is healthy.');\n      this.isHealthy_ = true;\n    } else {\n      setTimeoutNonBlocking(() => {\n        this.sendPingOnPrimaryIfNecessary_();\n      }, Math.floor(DELAY_BEFORE_SENDING_EXTRA_REQUESTS));\n    }\n  }\n\n  private sendPingOnPrimaryIfNecessary_() {\n    // If the connection isn't considered healthy yet, we'll send a noop ping packet request.\n    if (!this.isHealthy_ && this.state_ === RealtimeState.CONNECTED) {\n      this.log_('sending ping on primary.');\n      this.sendData_({ t: 'c', d: { t: PING, d: {} } });\n    }\n  }\n\n  private onSecondaryConnectionLost_() {\n    const conn = this.secondaryConn_;\n    this.secondaryConn_ = null;\n    if (this.tx_ === conn || this.rx_ === conn) {\n      // we are relying on this connection already in some capacity. Therefore, a failure is real\n      this.close();\n    }\n  }\n\n  /**\n   * @param everConnected - Whether or not the connection ever reached a server. Used to determine if\n   * we should flush the host cache\n   */\n  private onConnectionLost_(everConnected: boolean) {\n    this.conn_ = null;\n\n    // NOTE: IF you're seeing a Firefox error for this line, I think it might be because it's getting\n    // called on window close and RealtimeState.CONNECTING is no longer defined.  Just a guess.\n    if (!everConnected && this.state_ === RealtimeState.CONNECTING) {\n      this.log_('Realtime connection failed.');\n      // Since we failed to connect at all, clear any cached entry for this namespace in case the machine went away\n      if (this.repoInfo_.isCacheableHost()) {\n        PersistentStorage.remove('host:' + this.repoInfo_.host);\n        // reset the internal host to what we would show the user, i.e. <ns>.firebaseio.com\n        this.repoInfo_.internalHost = this.repoInfo_.host;\n      }\n    } else if (this.state_ === RealtimeState.CONNECTED) {\n      this.log_('Realtime connection lost.');\n    }\n\n    this.close();\n  }\n\n  private onConnectionShutdown_(reason: string) {\n    this.log_('Connection shutdown command received. Shutting down...');\n\n    if (this.onKill_) {\n      this.onKill_(reason);\n      this.onKill_ = null;\n    }\n\n    // We intentionally don't want to fire onDisconnect (kill is a different case),\n    // so clear the callback.\n    this.onDisconnect_ = null;\n\n    this.close();\n  }\n\n  private sendData_(data: object) {\n    if (this.state_ !== RealtimeState.CONNECTED) {\n      throw 'Connection is not connected';\n    } else {\n      this.tx_.send(data);\n    }\n  }\n\n  /**\n   * Cleans up this connection, calling the appropriate callbacks\n   */\n  close() {\n    if (this.state_ !== RealtimeState.DISCONNECTED) {\n      this.log_('Closing realtime connection.');\n      this.state_ = RealtimeState.DISCONNECTED;\n\n      this.closeConnections_();\n\n      if (this.onDisconnect_) {\n        this.onDisconnect_();\n        this.onDisconnect_ = null;\n      }\n    }\n  }\n\n  private closeConnections_() {\n    this.log_('Shutting down all connections');\n    if (this.conn_) {\n      this.conn_.close();\n      this.conn_ = null;\n    }\n\n    if (this.secondaryConn_) {\n      this.secondaryConn_.close();\n      this.secondaryConn_ = null;\n    }\n\n    if (this.healthyTimeout_) {\n      clearTimeout(this.healthyTimeout_);\n      this.healthyTimeout_ = null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { QueryContext } from './view/EventRegistration';\n\n/**\n * Interface defining the set of actions that can be performed against the Firebase server\n * (basically corresponds to our wire protocol).\n *\n * @interface\n */\nexport abstract class ServerActions {\n  abstract listen(\n    query: QueryContext,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: unknown) => void\n  ): void;\n\n  /**\n   * Remove a listen.\n   */\n  abstract unlisten(query: QueryContext, tag: number | null): void;\n\n  /**\n   * Get the server value satisfying this query.\n   */\n  abstract get(query: QueryContext): Promise<string>;\n\n  put(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void,\n    hash?: string\n  ) {}\n\n  merge(\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) {}\n\n  /**\n   * Refreshes the auth token for the current connection.\n   * @param token - The authentication token\n   */\n  refreshAuthToken(token: string) {}\n\n  /**\n   * Refreshes the app check token for the current connection.\n   * @param token The app check token\n   */\n  refreshAppCheckToken(token: string) {}\n\n  onDisconnectPut(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  onDisconnectMerge(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  onDisconnectCancel(\n    pathString: string,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  reportStats(stats: { [k: string]: unknown }) {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\n/**\n * Base class to be used if you want to emit events. Call the constructor with\n * the set of allowed event names.\n */\nexport abstract class EventEmitter {\n  private listeners_: {\n    [eventType: string]: Array<{\n      callback(...args: unknown[]): void;\n      context: unknown;\n    }>;\n  } = {};\n\n  constructor(private allowedEvents_: string[]) {\n    assert(\n      Array.isArray(allowedEvents_) && allowedEvents_.length > 0,\n      'Requires a non-empty array'\n    );\n  }\n\n  /**\n   * To be overridden by derived classes in order to fire an initial event when\n   * somebody subscribes for data.\n   *\n   * @returns {Array.<*>} Array of parameters to trigger initial event with.\n   */\n  abstract getInitialEvent(eventType: string): unknown[];\n\n  /**\n   * To be called by derived classes to trigger events.\n   */\n  protected trigger(eventType: string, ...varArgs: unknown[]) {\n    if (Array.isArray(this.listeners_[eventType])) {\n      // Clone the list, since callbacks could add/remove listeners.\n      const listeners = [...this.listeners_[eventType]];\n\n      for (let i = 0; i < listeners.length; i++) {\n        listeners[i].callback.apply(listeners[i].context, varArgs);\n      }\n    }\n  }\n\n  on(eventType: string, callback: (a: unknown) => void, context: unknown) {\n    this.validateEventType_(eventType);\n    this.listeners_[eventType] = this.listeners_[eventType] || [];\n    this.listeners_[eventType].push({ callback, context });\n\n    const eventData = this.getInitialEvent(eventType);\n    if (eventData) {\n      callback.apply(context, eventData);\n    }\n  }\n\n  off(eventType: string, callback: (a: unknown) => void, context: unknown) {\n    this.validateEventType_(eventType);\n    const listeners = this.listeners_[eventType] || [];\n    for (let i = 0; i < listeners.length; i++) {\n      if (\n        listeners[i].callback === callback &&\n        (!context || context === listeners[i].context)\n      ) {\n        listeners.splice(i, 1);\n        return;\n      }\n    }\n  }\n\n  private validateEventType_(eventType: string) {\n    assert(\n      this.allowedEvents_.find(et => {\n        return et === eventType;\n      }),\n      'Unknown event: ' + eventType\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, isMobileCordova } from '@firebase/util';\n\nimport { EventEmitter } from './EventEmitter';\n\n/**\n * Monitors online state (as reported by window.online/offline events).\n *\n * The expectation is that this could have many false positives (thinks we are online\n * when we're not), but no false negatives.  So we can safely use it to determine when\n * we definitely cannot reach the internet.\n */\nexport class OnlineMonitor extends EventEmitter {\n  private online_ = true;\n\n  static getInstance() {\n    return new OnlineMonitor();\n  }\n\n  constructor() {\n    super(['online']);\n\n    // We've had repeated complaints that Cordova apps can get stuck \"offline\", e.g.\n    // https://forum.ionicframework.com/t/firebase-connection-is-lost-and-never-come-back/43810\n    // It would seem that the 'online' event does not always fire consistently. So we disable it\n    // for Cordova.\n    if (\n      typeof window !== 'undefined' &&\n      typeof window.addEventListener !== 'undefined' &&\n      !isMobileCordova()\n    ) {\n      window.addEventListener(\n        'online',\n        () => {\n          if (!this.online_) {\n            this.online_ = true;\n            this.trigger('online', true);\n          }\n        },\n        false\n      );\n\n      window.addEventListener(\n        'offline',\n        () => {\n          if (this.online_) {\n            this.online_ = false;\n            this.trigger('online', false);\n          }\n        },\n        false\n      );\n    }\n  }\n\n  getInitialEvent(eventType: string): boolean[] {\n    assert(eventType === 'online', 'Unknown event type: ' + eventType);\n    return [this.online_];\n  }\n\n  currentlyOnline(): boolean {\n    return this.online_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { stringLength } from '@firebase/util';\n\nimport { nameCompare } from './util';\n\n/** Maximum key depth. */\nconst MAX_PATH_DEPTH = 32;\n\n/** Maximum number of (UTF8) bytes in a Firebase path. */\nconst MAX_PATH_LENGTH_BYTES = 768;\n\n/**\n * An immutable object representing a parsed path.  It's immutable so that you\n * can pass them around to other functions without worrying about them changing\n * it.\n */\n\nexport class Path {\n  pieces_: string[];\n  pieceNum_: number;\n\n  /**\n   * @param pathOrString - Path string to parse, or another path, or the raw\n   * tokens array\n   */\n  constructor(pathOrString: string | string[], pieceNum?: number) {\n    if (pieceNum === void 0) {\n      this.pieces_ = (pathOrString as string).split('/');\n\n      // Remove empty pieces.\n      let copyTo = 0;\n      for (let i = 0; i < this.pieces_.length; i++) {\n        if (this.pieces_[i].length > 0) {\n          this.pieces_[copyTo] = this.pieces_[i];\n          copyTo++;\n        }\n      }\n      this.pieces_.length = copyTo;\n\n      this.pieceNum_ = 0;\n    } else {\n      this.pieces_ = pathOrString as string[];\n      this.pieceNum_ = pieceNum;\n    }\n  }\n\n  toString(): string {\n    let pathString = '';\n    for (let i = this.pieceNum_; i < this.pieces_.length; i++) {\n      if (this.pieces_[i] !== '') {\n        pathString += '/' + this.pieces_[i];\n      }\n    }\n\n    return pathString || '/';\n  }\n}\n\nexport function newEmptyPath(): Path {\n  return new Path('');\n}\n\nexport function pathGetFront(path: Path): string | null {\n  if (path.pieceNum_ >= path.pieces_.length) {\n    return null;\n  }\n\n  return path.pieces_[path.pieceNum_];\n}\n\n/**\n * @returns The number of segments in this path\n */\nexport function pathGetLength(path: Path): number {\n  return path.pieces_.length - path.pieceNum_;\n}\n\nexport function pathPopFront(path: Path): Path {\n  let pieceNum = path.pieceNum_;\n  if (pieceNum < path.pieces_.length) {\n    pieceNum++;\n  }\n  return new Path(path.pieces_, pieceNum);\n}\n\nexport function pathGetBack(path: Path): string | null {\n  if (path.pieceNum_ < path.pieces_.length) {\n    return path.pieces_[path.pieces_.length - 1];\n  }\n\n  return null;\n}\n\nexport function pathToUrlEncodedString(path: Path): string {\n  let pathString = '';\n  for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\n    if (path.pieces_[i] !== '') {\n      pathString += '/' + encodeURIComponent(String(path.pieces_[i]));\n    }\n  }\n\n  return pathString || '/';\n}\n\n/**\n * Shallow copy of the parts of the path.\n *\n */\nexport function pathSlice(path: Path, begin: number = 0): string[] {\n  return path.pieces_.slice(path.pieceNum_ + begin);\n}\n\nexport function pathParent(path: Path): Path | null {\n  if (path.pieceNum_ >= path.pieces_.length) {\n    return null;\n  }\n\n  const pieces = [];\n  for (let i = path.pieceNum_; i < path.pieces_.length - 1; i++) {\n    pieces.push(path.pieces_[i]);\n  }\n\n  return new Path(pieces, 0);\n}\n\nexport function pathChild(path: Path, childPathObj: string | Path): Path {\n  const pieces = [];\n  for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\n    pieces.push(path.pieces_[i]);\n  }\n\n  if (childPathObj instanceof Path) {\n    for (let i = childPathObj.pieceNum_; i < childPathObj.pieces_.length; i++) {\n      pieces.push(childPathObj.pieces_[i]);\n    }\n  } else {\n    const childPieces = childPathObj.split('/');\n    for (let i = 0; i < childPieces.length; i++) {\n      if (childPieces[i].length > 0) {\n        pieces.push(childPieces[i]);\n      }\n    }\n  }\n\n  return new Path(pieces, 0);\n}\n\n/**\n * @returns True if there are no segments in this path\n */\nexport function pathIsEmpty(path: Path): boolean {\n  return path.pieceNum_ >= path.pieces_.length;\n}\n\n/**\n * @returns The path from outerPath to innerPath\n */\nexport function newRelativePath(outerPath: Path, innerPath: Path): Path {\n  const outer = pathGetFront(outerPath),\n    inner = pathGetFront(innerPath);\n  if (outer === null) {\n    return innerPath;\n  } else if (outer === inner) {\n    return newRelativePath(pathPopFront(outerPath), pathPopFront(innerPath));\n  } else {\n    throw new Error(\n      'INTERNAL ERROR: innerPath (' +\n        innerPath +\n        ') is not within ' +\n        'outerPath (' +\n        outerPath +\n        ')'\n    );\n  }\n}\n\n/**\n * @returns -1, 0, 1 if left is less, equal, or greater than the right.\n */\nexport function pathCompare(left: Path, right: Path): number {\n  const leftKeys = pathSlice(left, 0);\n  const rightKeys = pathSlice(right, 0);\n  for (let i = 0; i < leftKeys.length && i < rightKeys.length; i++) {\n    const cmp = nameCompare(leftKeys[i], rightKeys[i]);\n    if (cmp !== 0) {\n      return cmp;\n    }\n  }\n  if (leftKeys.length === rightKeys.length) {\n    return 0;\n  }\n  return leftKeys.length < rightKeys.length ? -1 : 1;\n}\n\n/**\n * @returns true if paths are the same.\n */\nexport function pathEquals(path: Path, other: Path): boolean {\n  if (pathGetLength(path) !== pathGetLength(other)) {\n    return false;\n  }\n\n  for (\n    let i = path.pieceNum_, j = other.pieceNum_;\n    i <= path.pieces_.length;\n    i++, j++\n  ) {\n    if (path.pieces_[i] !== other.pieces_[j]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * @returns True if this path is a parent (or the same as) other\n */\nexport function pathContains(path: Path, other: Path): boolean {\n  let i = path.pieceNum_;\n  let j = other.pieceNum_;\n  if (pathGetLength(path) > pathGetLength(other)) {\n    return false;\n  }\n  while (i < path.pieces_.length) {\n    if (path.pieces_[i] !== other.pieces_[j]) {\n      return false;\n    }\n    ++i;\n    ++j;\n  }\n  return true;\n}\n\n/**\n * Dynamic (mutable) path used to count path lengths.\n *\n * This class is used to efficiently check paths for valid\n * length (in UTF8 bytes) and depth (used in path validation).\n *\n * Throws Error exception if path is ever invalid.\n *\n * The definition of a path always begins with '/'.\n */\nexport class ValidationPath {\n  parts_: string[];\n  /** Initialize to number of '/' chars needed in path. */\n  byteLength_: number;\n\n  /**\n   * @param path - Initial Path.\n   * @param errorPrefix_ - Prefix for any error messages.\n   */\n  constructor(path: Path, public errorPrefix_: string) {\n    this.parts_ = pathSlice(path, 0);\n    /** Initialize to number of '/' chars needed in path. */\n    this.byteLength_ = Math.max(1, this.parts_.length);\n\n    for (let i = 0; i < this.parts_.length; i++) {\n      this.byteLength_ += stringLength(this.parts_[i]);\n    }\n    validationPathCheckValid(this);\n  }\n}\n\nexport function validationPathPush(\n  validationPath: ValidationPath,\n  child: string\n): void {\n  // Count the needed '/'\n  if (validationPath.parts_.length > 0) {\n    validationPath.byteLength_ += 1;\n  }\n  validationPath.parts_.push(child);\n  validationPath.byteLength_ += stringLength(child);\n  validationPathCheckValid(validationPath);\n}\n\nexport function validationPathPop(validationPath: ValidationPath): void {\n  const last = validationPath.parts_.pop();\n  validationPath.byteLength_ -= stringLength(last);\n  // Un-count the previous '/'\n  if (validationPath.parts_.length > 0) {\n    validationPath.byteLength_ -= 1;\n  }\n}\n\nfunction validationPathCheckValid(validationPath: ValidationPath): void {\n  if (validationPath.byteLength_ > MAX_PATH_LENGTH_BYTES) {\n    throw new Error(\n      validationPath.errorPrefix_ +\n        'has a key path longer than ' +\n        MAX_PATH_LENGTH_BYTES +\n        ' bytes (' +\n        validationPath.byteLength_ +\n        ').'\n    );\n  }\n  if (validationPath.parts_.length > MAX_PATH_DEPTH) {\n    throw new Error(\n      validationPath.errorPrefix_ +\n        'path specified exceeds the maximum depth that can be written (' +\n        MAX_PATH_DEPTH +\n        ') or object contains a cycle ' +\n        validationPathToErrorString(validationPath)\n    );\n  }\n}\n\n/**\n * String for use in error messages - uses '.' notation for path.\n */\nexport function validationPathToErrorString(\n  validationPath: ValidationPath\n): string {\n  if (validationPath.parts_.length === 0) {\n    return '';\n  }\n  return \"in property '\" + validationPath.parts_.join('.') + \"'\";\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { EventEmitter } from './EventEmitter';\n\ndeclare const document: Document;\n\nexport class VisibilityMonitor extends EventEmitter {\n  private visible_: boolean;\n\n  static getInstance() {\n    return new VisibilityMonitor();\n  }\n\n  constructor() {\n    super(['visible']);\n    let hidden: string;\n    let visibilityChange: string;\n    if (\n      typeof document !== 'undefined' &&\n      typeof document.addEventListener !== 'undefined'\n    ) {\n      if (typeof document['hidden'] !== 'undefined') {\n        // Opera 12.10 and Firefox 18 and later support\n        visibilityChange = 'visibilitychange';\n        hidden = 'hidden';\n      } else if (typeof document['mozHidden'] !== 'undefined') {\n        visibilityChange = 'mozvisibilitychange';\n        hidden = 'mozHidden';\n      } else if (typeof document['msHidden'] !== 'undefined') {\n        visibilityChange = 'msvisibilitychange';\n        hidden = 'msHidden';\n      } else if (typeof document['webkitHidden'] !== 'undefined') {\n        visibilityChange = 'webkitvisibilitychange';\n        hidden = 'webkitHidden';\n      }\n    }\n\n    // Initially, we always assume we are visible. This ensures that in browsers\n    // without page visibility support or in cases where we are never visible\n    // (e.g. chrome extension), we act as if we are visible, i.e. don't delay\n    // reconnects\n    this.visible_ = true;\n\n    if (visibilityChange) {\n      document.addEventListener(\n        visibilityChange,\n        () => {\n          const visible = !document[hidden];\n          if (visible !== this.visible_) {\n            this.visible_ = visible;\n            this.trigger('visible', visible);\n          }\n        },\n        false\n      );\n    }\n  }\n\n  getInitialEvent(eventType: string): boolean[] {\n    assert(eventType === 'visible', 'Unknown event type: ' + eventType);\n    return [this.visible_];\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  contains,\n  Deferred,\n  isEmpty,\n  isMobileCordova,\n  isNodeSdk,\n  isReactNative,\n  isValidFormat,\n  safeGet,\n  stringify,\n  isAdmin\n} from '@firebase/util';\n\nimport { Connection } from '../realtime/Connection';\n\nimport { AppCheckTokenProvider } from './AppCheckTokenProvider';\nimport { AuthTokenProvider } from './AuthTokenProvider';\nimport { RepoInfo } from './RepoInfo';\nimport { ServerActions } from './ServerActions';\nimport { OnlineMonitor } from './util/OnlineMonitor';\nimport { Path } from './util/Path';\nimport { error, log, logWrapper, warn, ObjectToUniqueKey } from './util/util';\nimport { VisibilityMonitor } from './util/VisibilityMonitor';\nimport { SDK_VERSION } from './version';\nimport { QueryContext } from './view/EventRegistration';\n\nconst RECONNECT_MIN_DELAY = 1000;\nconst RECONNECT_MAX_DELAY_DEFAULT = 60 * 5 * 1000; // 5 minutes in milliseconds (Case: 1858)\nconst GET_CONNECT_TIMEOUT = 3 * 1000;\nconst RECONNECT_MAX_DELAY_FOR_ADMINS = 30 * 1000; // 30 seconds for admin clients (likely to be a backend server)\nconst RECONNECT_DELAY_MULTIPLIER = 1.3;\nconst RECONNECT_DELAY_RESET_TIMEOUT = 30000; // Reset delay back to MIN_DELAY after being connected for 30sec.\nconst SERVER_KILL_INTERRUPT_REASON = 'server_kill';\n\n// If auth fails repeatedly, we'll assume something is wrong and log a warning / back off.\nconst INVALID_TOKEN_THRESHOLD = 3;\n\ninterface ListenSpec {\n  onComplete(s: string, p?: unknown): void;\n\n  hashFn(): string;\n\n  query: QueryContext;\n  tag: number | null;\n}\n\ninterface OnDisconnectRequest {\n  pathString: string;\n  action: string;\n  data: unknown;\n  onComplete?: (a: string, b: string) => void;\n}\n\ninterface OutstandingPut {\n  action: string;\n  request: object;\n  queued?: boolean;\n  onComplete: (a: string, b?: string) => void;\n}\n\ninterface OutstandingGet {\n  request: object;\n  onComplete: (response: { [k: string]: unknown }) => void;\n}\n\n/**\n * Firebase connection.  Abstracts wire protocol and handles reconnecting.\n *\n * NOTE: All JSON objects sent to the realtime connection must have property names enclosed\n * in quotes to make sure the closure compiler does not minify them.\n */\nexport class PersistentConnection extends ServerActions {\n  // Used for diagnostic logging.\n  id = PersistentConnection.nextPersistentConnectionId_++;\n  private log_ = logWrapper('p:' + this.id + ':');\n\n  private interruptReasons_: { [reason: string]: boolean } = {};\n  private readonly listens: Map<\n    /* path */ string,\n    Map</* queryId */ string, ListenSpec>\n  > = new Map();\n  private outstandingPuts_: OutstandingPut[] = [];\n  private outstandingGets_: OutstandingGet[] = [];\n  private outstandingPutCount_ = 0;\n  private outstandingGetCount_ = 0;\n  private onDisconnectRequestQueue_: OnDisconnectRequest[] = [];\n  private connected_ = false;\n  private reconnectDelay_ = RECONNECT_MIN_DELAY;\n  private maxReconnectDelay_ = RECONNECT_MAX_DELAY_DEFAULT;\n  private securityDebugCallback_: ((a: object) => void) | null = null;\n  lastSessionId: string | null = null;\n\n  private establishConnectionTimer_: number | null = null;\n\n  private visible_: boolean = false;\n\n  // Before we get connected, we keep a queue of pending messages to send.\n  private requestCBHash_: { [k: number]: (a: unknown) => void } = {};\n  private requestNumber_ = 0;\n\n  private realtime_: {\n    sendRequest(a: object): void;\n    close(): void;\n  } | null = null;\n\n  private authToken_: string | null = null;\n  private appCheckToken_: string | null = null;\n  private forceTokenRefresh_ = false;\n  private invalidAuthTokenCount_ = 0;\n  private invalidAppCheckTokenCount_ = 0;\n\n  private firstConnection_ = true;\n  private lastConnectionAttemptTime_: number | null = null;\n  private lastConnectionEstablishedTime_: number | null = null;\n\n  private static nextPersistentConnectionId_ = 0;\n\n  /**\n   * Counter for number of connections created. Mainly used for tagging in the logs\n   */\n  private static nextConnectionId_ = 0;\n\n  /**\n   * @param repoInfo_ - Data about the namespace we are connecting to\n   * @param applicationId_ - The Firebase App ID for this project\n   * @param onDataUpdate_ - A callback for new data from the server\n   */\n  constructor(\n    private repoInfo_: RepoInfo,\n    private applicationId_: string,\n    private onDataUpdate_: (\n      a: string,\n      b: unknown,\n      c: boolean,\n      d: number | null\n    ) => void,\n    private onConnectStatus_: (a: boolean) => void,\n    private onServerInfoUpdate_: (a: unknown) => void,\n    private authTokenProvider_: AuthTokenProvider,\n    private appCheckTokenProvider_: AppCheckTokenProvider,\n    private authOverride_?: object | null\n  ) {\n    super();\n\n    if (authOverride_ && !isNodeSdk()) {\n      throw new Error(\n        'Auth override specified in options, but not supported on non Node.js platforms'\n      );\n    }\n\n    VisibilityMonitor.getInstance().on('visible', this.onVisible_, this);\n\n    if (repoInfo_.host.indexOf('fblocal') === -1) {\n      OnlineMonitor.getInstance().on('online', this.onOnline_, this);\n    }\n  }\n\n  protected sendRequest(\n    action: string,\n    body: unknown,\n    onResponse?: (a: unknown) => void\n  ) {\n    const curReqNum = ++this.requestNumber_;\n\n    const msg = { r: curReqNum, a: action, b: body };\n    this.log_(stringify(msg));\n    assert(\n      this.connected_,\n      \"sendRequest call when we're not connected not allowed.\"\n    );\n    this.realtime_.sendRequest(msg);\n    if (onResponse) {\n      this.requestCBHash_[curReqNum] = onResponse;\n    }\n  }\n\n  get(query: QueryContext): Promise<string> {\n    this.initConnection_();\n\n    const deferred = new Deferred<string>();\n    const request = {\n      p: query._path.toString(),\n      q: query._queryObject\n    };\n    const outstandingGet = {\n      action: 'g',\n      request,\n      onComplete: (message: { [k: string]: unknown }) => {\n        const payload = message['d'] as string;\n        if (message['s'] === 'ok') {\n          this.onDataUpdate_(\n            request['p'],\n            payload,\n            /*isMerge*/ false,\n            /*tag*/ null\n          );\n          deferred.resolve(payload);\n        } else {\n          deferred.reject(payload);\n        }\n      }\n    };\n    this.outstandingGets_.push(outstandingGet);\n    this.outstandingGetCount_++;\n    const index = this.outstandingGets_.length - 1;\n\n    if (!this.connected_) {\n      setTimeout(() => {\n        const get = this.outstandingGets_[index];\n        if (get === undefined || outstandingGet !== get) {\n          return;\n        }\n        delete this.outstandingGets_[index];\n        this.outstandingGetCount_--;\n        if (this.outstandingGetCount_ === 0) {\n          this.outstandingGets_ = [];\n        }\n        this.log_('get ' + index + ' timed out on connection');\n        deferred.reject(new Error('Client is offline.'));\n      }, GET_CONNECT_TIMEOUT);\n    }\n\n    if (this.connected_) {\n      this.sendGet_(index);\n    }\n\n    return deferred.promise;\n  }\n\n  listen(\n    query: QueryContext,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: unknown) => void\n  ) {\n    this.initConnection_();\n\n    const queryId = query._queryIdentifier;\n    const pathString = query._path.toString();\n    this.log_('Listen called for ' + pathString + ' ' + queryId);\n    if (!this.listens.has(pathString)) {\n      this.listens.set(pathString, new Map());\n    }\n    assert(\n      query._queryParams.isDefault() || !query._queryParams.loadsAllData(),\n      'listen() called for non-default but complete query'\n    );\n    assert(\n      !this.listens.get(pathString)!.has(queryId),\n      'listen() called twice for same path/queryId.'\n    );\n    const listenSpec: ListenSpec = {\n      onComplete,\n      hashFn: currentHashFn,\n      query,\n      tag\n    };\n    this.listens.get(pathString)!.set(queryId, listenSpec);\n\n    if (this.connected_) {\n      this.sendListen_(listenSpec);\n    }\n  }\n\n  private sendGet_(index: number) {\n    const get = this.outstandingGets_[index];\n    this.sendRequest('g', get.request, (message: { [k: string]: unknown }) => {\n      delete this.outstandingGets_[index];\n      this.outstandingGetCount_--;\n      if (this.outstandingGetCount_ === 0) {\n        this.outstandingGets_ = [];\n      }\n      if (get.onComplete) {\n        get.onComplete(message);\n      }\n    });\n  }\n\n  private sendListen_(listenSpec: ListenSpec) {\n    const query = listenSpec.query;\n    const pathString = query._path.toString();\n    const queryId = query._queryIdentifier;\n    this.log_('Listen on ' + pathString + ' for ' + queryId);\n    const req: { [k: string]: unknown } = { /*path*/ p: pathString };\n\n    const action = 'q';\n\n    // Only bother to send query if it's non-default.\n    if (listenSpec.tag) {\n      req['q'] = query._queryObject;\n      req['t'] = listenSpec.tag;\n    }\n\n    req[/*hash*/ 'h'] = listenSpec.hashFn();\n\n    this.sendRequest(action, req, (message: { [k: string]: unknown }) => {\n      const payload: unknown = message[/*data*/ 'd'];\n      const status = message[/*status*/ 's'] as string;\n\n      // print warnings in any case...\n      PersistentConnection.warnOnListenWarnings_(payload, query);\n\n      const currentListenSpec =\n        this.listens.get(pathString) &&\n        this.listens.get(pathString)!.get(queryId);\n      // only trigger actions if the listen hasn't been removed and readded\n      if (currentListenSpec === listenSpec) {\n        this.log_('listen response', message);\n\n        if (status !== 'ok') {\n          this.removeListen_(pathString, queryId);\n        }\n\n        if (listenSpec.onComplete) {\n          listenSpec.onComplete(status, payload);\n        }\n      }\n    });\n  }\n\n  private static warnOnListenWarnings_(payload: unknown, query: QueryContext) {\n    if (payload && typeof payload === 'object' && contains(payload, 'w')) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const warnings = safeGet(payload as any, 'w');\n      if (Array.isArray(warnings) && ~warnings.indexOf('no_index')) {\n        const indexSpec =\n          '\".indexOn\": \"' + query._queryParams.getIndex().toString() + '\"';\n        const indexPath = query._path.toString();\n        warn(\n          `Using an unspecified index. Your data will be downloaded and ` +\n            `filtered on the client. Consider adding ${indexSpec} at ` +\n            `${indexPath} to your security rules for better performance.`\n        );\n      }\n    }\n  }\n\n  refreshAuthToken(token: string) {\n    this.authToken_ = token;\n    this.log_('Auth token refreshed');\n    if (this.authToken_) {\n      this.tryAuth();\n    } else {\n      //If we're connected we want to let the server know to unauthenticate us. If we're not connected, simply delete\n      //the credential so we dont become authenticated next time we connect.\n      if (this.connected_) {\n        this.sendRequest('unauth', {}, () => {});\n      }\n    }\n\n    this.reduceReconnectDelayIfAdminCredential_(token);\n  }\n\n  private reduceReconnectDelayIfAdminCredential_(credential: string) {\n    // NOTE: This isn't intended to be bulletproof (a malicious developer can always just modify the client).\n    // Additionally, we don't bother resetting the max delay back to the default if auth fails / expires.\n    const isFirebaseSecret = credential && credential.length === 40;\n    if (isFirebaseSecret || isAdmin(credential)) {\n      this.log_(\n        'Admin auth credential detected.  Reducing max reconnect time.'\n      );\n      this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\n    }\n  }\n\n  refreshAppCheckToken(token: string | null) {\n    this.appCheckToken_ = token;\n    this.log_('App check token refreshed');\n    if (this.appCheckToken_) {\n      this.tryAppCheck();\n    } else {\n      //If we're connected we want to let the server know to unauthenticate us.\n      //If we're not connected, simply delete the credential so we dont become\n      // authenticated next time we connect.\n      if (this.connected_) {\n        this.sendRequest('unappeck', {}, () => {});\n      }\n    }\n  }\n\n  /**\n   * Attempts to authenticate with the given credentials. If the authentication attempt fails, it's triggered like\n   * a auth revoked (the connection is closed).\n   */\n  tryAuth() {\n    if (this.connected_ && this.authToken_) {\n      const token = this.authToken_;\n      const authMethod = isValidFormat(token) ? 'auth' : 'gauth';\n      const requestData: { [k: string]: unknown } = { cred: token };\n      if (this.authOverride_ === null) {\n        requestData['noauth'] = true;\n      } else if (typeof this.authOverride_ === 'object') {\n        requestData['authvar'] = this.authOverride_;\n      }\n      this.sendRequest(\n        authMethod,\n        requestData,\n        (res: { [k: string]: unknown }) => {\n          const status = res[/*status*/ 's'] as string;\n          const data = (res[/*data*/ 'd'] as string) || 'error';\n\n          if (this.authToken_ === token) {\n            if (status === 'ok') {\n              this.invalidAuthTokenCount_ = 0;\n            } else {\n              // Triggers reconnect and force refresh for auth token\n              this.onAuthRevoked_(status, data);\n            }\n          }\n        }\n      );\n    }\n  }\n\n  /**\n   * Attempts to authenticate with the given token. If the authentication\n   * attempt fails, it's triggered like the token was revoked (the connection is\n   * closed).\n   */\n  tryAppCheck() {\n    if (this.connected_ && this.appCheckToken_) {\n      this.sendRequest(\n        'appcheck',\n        { 'token': this.appCheckToken_ },\n        (res: { [k: string]: unknown }) => {\n          const status = res[/*status*/ 's'] as string;\n          const data = (res[/*data*/ 'd'] as string) || 'error';\n          if (status === 'ok') {\n            this.invalidAppCheckTokenCount_ = 0;\n          } else {\n            this.onAppCheckRevoked_(status, data);\n          }\n        }\n      );\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  unlisten(query: QueryContext, tag: number | null) {\n    const pathString = query._path.toString();\n    const queryId = query._queryIdentifier;\n\n    this.log_('Unlisten called for ' + pathString + ' ' + queryId);\n\n    assert(\n      query._queryParams.isDefault() || !query._queryParams.loadsAllData(),\n      'unlisten() called for non-default but complete query'\n    );\n    const listen = this.removeListen_(pathString, queryId);\n    if (listen && this.connected_) {\n      this.sendUnlisten_(pathString, queryId, query._queryObject, tag);\n    }\n  }\n\n  private sendUnlisten_(\n    pathString: string,\n    queryId: string,\n    queryObj: object,\n    tag: number | null\n  ) {\n    this.log_('Unlisten on ' + pathString + ' for ' + queryId);\n\n    const req: { [k: string]: unknown } = { /*path*/ p: pathString };\n    const action = 'n';\n    // Only bother sending queryId if it's non-default.\n    if (tag) {\n      req['q'] = queryObj;\n      req['t'] = tag;\n    }\n\n    this.sendRequest(action, req);\n  }\n\n  onDisconnectPut(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {\n    this.initConnection_();\n\n    if (this.connected_) {\n      this.sendOnDisconnect_('o', pathString, data, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'o',\n        data,\n        onComplete\n      });\n    }\n  }\n\n  onDisconnectMerge(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {\n    this.initConnection_();\n\n    if (this.connected_) {\n      this.sendOnDisconnect_('om', pathString, data, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'om',\n        data,\n        onComplete\n      });\n    }\n  }\n\n  onDisconnectCancel(\n    pathString: string,\n    onComplete?: (a: string, b: string) => void\n  ) {\n    this.initConnection_();\n\n    if (this.connected_) {\n      this.sendOnDisconnect_('oc', pathString, null, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'oc',\n        data: null,\n        onComplete\n      });\n    }\n  }\n\n  private sendOnDisconnect_(\n    action: string,\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string) => void\n  ) {\n    const request = { /*path*/ p: pathString, /*data*/ d: data };\n    this.log_('onDisconnect ' + action, request);\n    this.sendRequest(action, request, (response: { [k: string]: unknown }) => {\n      if (onComplete) {\n        setTimeout(() => {\n          onComplete(\n            response[/*status*/ 's'] as string,\n            response[/* data */ 'd'] as string\n          );\n        }, Math.floor(0));\n      }\n    });\n  }\n\n  put(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void,\n    hash?: string\n  ) {\n    this.putInternal('p', pathString, data, onComplete, hash);\n  }\n\n  merge(\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) {\n    this.putInternal('m', pathString, data, onComplete, hash);\n  }\n\n  putInternal(\n    action: string,\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) {\n    this.initConnection_();\n\n    const request: { [k: string]: unknown } = {\n      /*path*/ p: pathString,\n      /*data*/ d: data\n    };\n\n    if (hash !== undefined) {\n      request[/*hash*/ 'h'] = hash;\n    }\n\n    // TODO: Only keep track of the most recent put for a given path?\n    this.outstandingPuts_.push({\n      action,\n      request,\n      onComplete\n    });\n\n    this.outstandingPutCount_++;\n    const index = this.outstandingPuts_.length - 1;\n\n    if (this.connected_) {\n      this.sendPut_(index);\n    } else {\n      this.log_('Buffering put: ' + pathString);\n    }\n  }\n\n  private sendPut_(index: number) {\n    const action = this.outstandingPuts_[index].action;\n    const request = this.outstandingPuts_[index].request;\n    const onComplete = this.outstandingPuts_[index].onComplete;\n    this.outstandingPuts_[index].queued = this.connected_;\n\n    this.sendRequest(action, request, (message: { [k: string]: unknown }) => {\n      this.log_(action + ' response', message);\n\n      delete this.outstandingPuts_[index];\n      this.outstandingPutCount_--;\n\n      // Clean up array occasionally.\n      if (this.outstandingPutCount_ === 0) {\n        this.outstandingPuts_ = [];\n      }\n\n      if (onComplete) {\n        onComplete(\n          message[/*status*/ 's'] as string,\n          message[/* data */ 'd'] as string\n        );\n      }\n    });\n  }\n\n  reportStats(stats: { [k: string]: unknown }) {\n    // If we're not connected, we just drop the stats.\n    if (this.connected_) {\n      const request = { /*counters*/ c: stats };\n      this.log_('reportStats', request);\n\n      this.sendRequest(/*stats*/ 's', request, result => {\n        const status = result[/*status*/ 's'];\n        if (status !== 'ok') {\n          const errorReason = result[/* data */ 'd'];\n          this.log_('reportStats', 'Error sending stats: ' + errorReason);\n        }\n      });\n    }\n  }\n\n  private onDataMessage_(message: { [k: string]: unknown }) {\n    if ('r' in message) {\n      // this is a response\n      this.log_('from server: ' + stringify(message));\n      const reqNum = message['r'] as string;\n      const onResponse = this.requestCBHash_[reqNum];\n      if (onResponse) {\n        delete this.requestCBHash_[reqNum];\n        onResponse(message[/*body*/ 'b']);\n      }\n    } else if ('error' in message) {\n      throw 'A server-side error has occurred: ' + message['error'];\n    } else if ('a' in message) {\n      // a and b are action and body, respectively\n      this.onDataPush_(message['a'] as string, message['b'] as {});\n    }\n  }\n\n  private onDataPush_(action: string, body: { [k: string]: unknown }) {\n    this.log_('handleServerMessage', action, body);\n    if (action === 'd') {\n      this.onDataUpdate_(\n        body[/*path*/ 'p'] as string,\n        body[/*data*/ 'd'],\n        /*isMerge*/ false,\n        body['t'] as number\n      );\n    } else if (action === 'm') {\n      this.onDataUpdate_(\n        body[/*path*/ 'p'] as string,\n        body[/*data*/ 'd'],\n        /*isMerge=*/ true,\n        body['t'] as number\n      );\n    } else if (action === 'c') {\n      this.onListenRevoked_(\n        body[/*path*/ 'p'] as string,\n        body[/*query*/ 'q'] as unknown[]\n      );\n    } else if (action === 'ac') {\n      this.onAuthRevoked_(\n        body[/*status code*/ 's'] as string,\n        body[/* explanation */ 'd'] as string\n      );\n    } else if (action === 'apc') {\n      this.onAppCheckRevoked_(\n        body[/*status code*/ 's'] as string,\n        body[/* explanation */ 'd'] as string\n      );\n    } else if (action === 'sd') {\n      this.onSecurityDebugPacket_(body);\n    } else {\n      error(\n        'Unrecognized action received from server: ' +\n          stringify(action) +\n          '\\nAre you using the latest client?'\n      );\n    }\n  }\n\n  private onReady_(timestamp: number, sessionId: string) {\n    this.log_('connection ready');\n    this.connected_ = true;\n    this.lastConnectionEstablishedTime_ = new Date().getTime();\n    this.handleTimestamp_(timestamp);\n    this.lastSessionId = sessionId;\n    if (this.firstConnection_) {\n      this.sendConnectStats_();\n    }\n    this.restoreState_();\n    this.firstConnection_ = false;\n    this.onConnectStatus_(true);\n  }\n\n  private scheduleConnect_(timeout: number) {\n    assert(\n      !this.realtime_,\n      \"Scheduling a connect when we're already connected/ing?\"\n    );\n\n    if (this.establishConnectionTimer_) {\n      clearTimeout(this.establishConnectionTimer_);\n    }\n\n    // NOTE: Even when timeout is 0, it's important to do a setTimeout to work around an infuriating \"Security Error\" in\n    // Firefox when trying to write to our long-polling iframe in some scenarios (e.g. Forge or our unit tests).\n\n    this.establishConnectionTimer_ = setTimeout(() => {\n      this.establishConnectionTimer_ = null;\n      this.establishConnection_();\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(timeout)) as any;\n  }\n\n  private initConnection_() {\n    if (!this.realtime_ && this.firstConnection_) {\n      this.scheduleConnect_(0);\n    }\n  }\n\n  private onVisible_(visible: boolean) {\n    // NOTE: Tabbing away and back to a window will defeat our reconnect backoff, but I think that's fine.\n    if (\n      visible &&\n      !this.visible_ &&\n      this.reconnectDelay_ === this.maxReconnectDelay_\n    ) {\n      this.log_('Window became visible.  Reducing delay.');\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    }\n    this.visible_ = visible;\n  }\n\n  private onOnline_(online: boolean) {\n    if (online) {\n      this.log_('Browser went online.');\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    } else {\n      this.log_('Browser went offline.  Killing connection.');\n      if (this.realtime_) {\n        this.realtime_.close();\n      }\n    }\n  }\n\n  private onRealtimeDisconnect_() {\n    this.log_('data client disconnected');\n    this.connected_ = false;\n    this.realtime_ = null;\n\n    // Since we don't know if our sent transactions succeeded or not, we need to cancel them.\n    this.cancelSentTransactions_();\n\n    // Clear out the pending requests.\n    this.requestCBHash_ = {};\n\n    if (this.shouldReconnect_()) {\n      if (!this.visible_) {\n        this.log_(\"Window isn't visible.  Delaying reconnect.\");\n        this.reconnectDelay_ = this.maxReconnectDelay_;\n        this.lastConnectionAttemptTime_ = new Date().getTime();\n      } else if (this.lastConnectionEstablishedTime_) {\n        // If we've been connected long enough, reset reconnect delay to minimum.\n        const timeSinceLastConnectSucceeded =\n          new Date().getTime() - this.lastConnectionEstablishedTime_;\n        if (timeSinceLastConnectSucceeded > RECONNECT_DELAY_RESET_TIMEOUT) {\n          this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n        }\n        this.lastConnectionEstablishedTime_ = null;\n      }\n\n      const timeSinceLastConnectAttempt =\n        new Date().getTime() - this.lastConnectionAttemptTime_;\n      let reconnectDelay = Math.max(\n        0,\n        this.reconnectDelay_ - timeSinceLastConnectAttempt\n      );\n      reconnectDelay = Math.random() * reconnectDelay;\n\n      this.log_('Trying to reconnect in ' + reconnectDelay + 'ms');\n      this.scheduleConnect_(reconnectDelay);\n\n      // Adjust reconnect delay for next time.\n      this.reconnectDelay_ = Math.min(\n        this.maxReconnectDelay_,\n        this.reconnectDelay_ * RECONNECT_DELAY_MULTIPLIER\n      );\n    }\n    this.onConnectStatus_(false);\n  }\n\n  private async establishConnection_() {\n    if (this.shouldReconnect_()) {\n      this.log_('Making a connection attempt');\n      this.lastConnectionAttemptTime_ = new Date().getTime();\n      this.lastConnectionEstablishedTime_ = null;\n      const onDataMessage = this.onDataMessage_.bind(this);\n      const onReady = this.onReady_.bind(this);\n      const onDisconnect = this.onRealtimeDisconnect_.bind(this);\n      const connId = this.id + ':' + PersistentConnection.nextConnectionId_++;\n      const lastSessionId = this.lastSessionId;\n      let canceled = false;\n      let connection: Connection | null = null;\n      const closeFn = function () {\n        if (connection) {\n          connection.close();\n        } else {\n          canceled = true;\n          onDisconnect();\n        }\n      };\n      const sendRequestFn = function (msg: object) {\n        assert(\n          connection,\n          \"sendRequest call when we're not connected not allowed.\"\n        );\n        connection.sendRequest(msg);\n      };\n\n      this.realtime_ = {\n        close: closeFn,\n        sendRequest: sendRequestFn\n      };\n\n      const forceRefresh = this.forceTokenRefresh_;\n      this.forceTokenRefresh_ = false;\n\n      try {\n        // First fetch auth and app check token, and establish connection after\n        // fetching the token was successful\n        const [authToken, appCheckToken] = await Promise.all([\n          this.authTokenProvider_.getToken(forceRefresh),\n          this.appCheckTokenProvider_.getToken(forceRefresh)\n        ]);\n\n        if (!canceled) {\n          log('getToken() completed. Creating connection.');\n          this.authToken_ = authToken && authToken.accessToken;\n          this.appCheckToken_ = appCheckToken && appCheckToken.token;\n          connection = new Connection(\n            connId,\n            this.repoInfo_,\n            this.applicationId_,\n            this.appCheckToken_,\n            this.authToken_,\n            onDataMessage,\n            onReady,\n            onDisconnect,\n            /* onKill= */ reason => {\n              warn(reason + ' (' + this.repoInfo_.toString() + ')');\n              this.interrupt(SERVER_KILL_INTERRUPT_REASON);\n            },\n            lastSessionId\n          );\n        } else {\n          log('getToken() completed but was canceled');\n        }\n      } catch (error) {\n        this.log_('Failed to get token: ' + error);\n        if (!canceled) {\n          if (this.repoInfo_.nodeAdmin) {\n            // This may be a critical error for the Admin Node.js SDK, so log a warning.\n            // But getToken() may also just have temporarily failed, so we still want to\n            // continue retrying.\n            warn(error);\n          }\n          closeFn();\n        }\n      }\n    }\n  }\n\n  interrupt(reason: string) {\n    log('Interrupting connection for reason: ' + reason);\n    this.interruptReasons_[reason] = true;\n    if (this.realtime_) {\n      this.realtime_.close();\n    } else {\n      if (this.establishConnectionTimer_) {\n        clearTimeout(this.establishConnectionTimer_);\n        this.establishConnectionTimer_ = null;\n      }\n      if (this.connected_) {\n        this.onRealtimeDisconnect_();\n      }\n    }\n  }\n\n  resume(reason: string) {\n    log('Resuming connection for reason: ' + reason);\n    delete this.interruptReasons_[reason];\n    if (isEmpty(this.interruptReasons_)) {\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    }\n  }\n\n  private handleTimestamp_(timestamp: number) {\n    const delta = timestamp - new Date().getTime();\n    this.onServerInfoUpdate_({ serverTimeOffset: delta });\n  }\n\n  private cancelSentTransactions_() {\n    for (let i = 0; i < this.outstandingPuts_.length; i++) {\n      const put = this.outstandingPuts_[i];\n      if (put && /*hash*/ 'h' in put.request && put.queued) {\n        if (put.onComplete) {\n          put.onComplete('disconnect');\n        }\n\n        delete this.outstandingPuts_[i];\n        this.outstandingPutCount_--;\n      }\n    }\n\n    // Clean up array occasionally.\n    if (this.outstandingPutCount_ === 0) {\n      this.outstandingPuts_ = [];\n    }\n  }\n\n  private onListenRevoked_(pathString: string, query?: unknown[]) {\n    // Remove the listen and manufacture a \"permission_denied\" error for the failed listen.\n    let queryId;\n    if (!query) {\n      queryId = 'default';\n    } else {\n      queryId = query.map(q => ObjectToUniqueKey(q)).join('$');\n    }\n    const listen = this.removeListen_(pathString, queryId);\n    if (listen && listen.onComplete) {\n      listen.onComplete('permission_denied');\n    }\n  }\n\n  private removeListen_(pathString: string, queryId: string): ListenSpec {\n    const normalizedPathString = new Path(pathString).toString(); // normalize path.\n    let listen;\n    if (this.listens.has(normalizedPathString)) {\n      const map = this.listens.get(normalizedPathString)!;\n      listen = map.get(queryId);\n      map.delete(queryId);\n      if (map.size === 0) {\n        this.listens.delete(normalizedPathString);\n      }\n    } else {\n      // all listens for this path has already been removed\n      listen = undefined;\n    }\n    return listen;\n  }\n\n  private onAuthRevoked_(statusCode: string, explanation: string) {\n    log('Auth token revoked: ' + statusCode + '/' + explanation);\n    this.authToken_ = null;\n    this.forceTokenRefresh_ = true;\n    this.realtime_.close();\n    if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\n      // We'll wait a couple times before logging the warning / increasing the\n      // retry period since oauth tokens will report as \"invalid\" if they're\n      // just expired. Plus there may be transient issues that resolve themselves.\n      this.invalidAuthTokenCount_++;\n      if (this.invalidAuthTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\n        // Set a long reconnect delay because recovery is unlikely\n        this.reconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\n\n        // Notify the auth token provider that the token is invalid, which will log\n        // a warning\n        this.authTokenProvider_.notifyForInvalidToken();\n      }\n    }\n  }\n\n  private onAppCheckRevoked_(statusCode: string, explanation: string) {\n    log('App check token revoked: ' + statusCode + '/' + explanation);\n    this.appCheckToken_ = null;\n    this.forceTokenRefresh_ = true;\n    // Note: We don't close the connection as the developer may not have\n    // enforcement enabled. The backend closes connections with enforcements.\n    if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\n      // We'll wait a couple times before logging the warning / increasing the\n      // retry period since oauth tokens will report as \"invalid\" if they're\n      // just expired. Plus there may be transient issues that resolve themselves.\n      this.invalidAppCheckTokenCount_++;\n      if (this.invalidAppCheckTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\n        this.appCheckTokenProvider_.notifyForInvalidToken();\n      }\n    }\n  }\n\n  private onSecurityDebugPacket_(body: { [k: string]: unknown }) {\n    if (this.securityDebugCallback_) {\n      this.securityDebugCallback_(body);\n    } else {\n      if ('msg' in body) {\n        console.log(\n          'FIREBASE: ' + (body['msg'] as string).replace('\\n', '\\nFIREBASE: ')\n        );\n      }\n    }\n  }\n\n  private restoreState_() {\n    //Re-authenticate ourselves if we have a credential stored.\n    this.tryAuth();\n    this.tryAppCheck();\n\n    // Puts depend on having received the corresponding data update from the server before they complete, so we must\n    // make sure to send listens before puts.\n    for (const queries of this.listens.values()) {\n      for (const listenSpec of queries.values()) {\n        this.sendListen_(listenSpec);\n      }\n    }\n\n    for (let i = 0; i < this.outstandingPuts_.length; i++) {\n      if (this.outstandingPuts_[i]) {\n        this.sendPut_(i);\n      }\n    }\n\n    while (this.onDisconnectRequestQueue_.length) {\n      const request = this.onDisconnectRequestQueue_.shift();\n      this.sendOnDisconnect_(\n        request.action,\n        request.pathString,\n        request.data,\n        request.onComplete\n      );\n    }\n\n    for (let i = 0; i < this.outstandingGets_.length; i++) {\n      if (this.outstandingGets_[i]) {\n        this.sendGet_(i);\n      }\n    }\n  }\n\n  /**\n   * Sends client stats for first connection\n   */\n  private sendConnectStats_() {\n    const stats: { [k: string]: number } = {};\n\n    let clientName = 'js';\n    if (isNodeSdk()) {\n      if (this.repoInfo_.nodeAdmin) {\n        clientName = 'admin_node';\n      } else {\n        clientName = 'node';\n      }\n    }\n\n    stats['sdk.' + clientName + '.' + SDK_VERSION.replace(/\\./g, '-')] = 1;\n\n    if (isMobileCordova()) {\n      stats['framework.cordova'] = 1;\n    } else if (isReactNative()) {\n      stats['framework.reactnative'] = 1;\n    }\n    this.reportStats(stats);\n  }\n\n  private shouldReconnect_(): boolean {\n    const online = OnlineMonitor.getInstance().currentlyOnline();\n    return isEmpty(this.interruptReasons_) && online;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path } from '../util/Path';\n\nimport { Index } from './indexes/Index';\n\n/**\n * Node is an interface defining the common functionality for nodes in\n * a DataSnapshot.\n *\n * @interface\n */\nexport interface Node {\n  /**\n   * Whether this node is a leaf node.\n   * @returns Whether this is a leaf node.\n   */\n  isLeafNode(): boolean;\n\n  /**\n   * Gets the priority of the node.\n   * @returns The priority of the node.\n   */\n  getPriority(): Node;\n\n  /**\n   * Returns a duplicate node with the new priority.\n   * @param newPriorityNode - New priority to set for the node.\n   * @returns Node with new priority.\n   */\n  updatePriority(newPriorityNode: Node): Node;\n\n  /**\n   * Returns the specified immediate child, or null if it doesn't exist.\n   * @param childName - The name of the child to retrieve.\n   * @returns The retrieved child, or an empty node.\n   */\n  getImmediateChild(childName: string): Node;\n\n  /**\n   * Returns a child by path, or null if it doesn't exist.\n   * @param path - The path of the child to retrieve.\n   * @returns The retrieved child or an empty node.\n   */\n  getChild(path: Path): Node;\n\n  /**\n   * Returns the name of the child immediately prior to the specified childNode, or null.\n   * @param childName - The name of the child to find the predecessor of.\n   * @param childNode - The node to find the predecessor of.\n   * @param index - The index to use to determine the predecessor\n   * @returns The name of the predecessor child, or null if childNode is the first child.\n   */\n  getPredecessorChildName(\n    childName: string,\n    childNode: Node,\n    index: Index\n  ): string | null;\n\n  /**\n   * Returns a duplicate node, with the specified immediate child updated.\n   * Any value in the node will be removed.\n   * @param childName - The name of the child to update.\n   * @param newChildNode - The new child node\n   * @returns The updated node.\n   */\n  updateImmediateChild(childName: string, newChildNode: Node): Node;\n\n  /**\n   * Returns a duplicate node, with the specified child updated.  Any value will\n   * be removed.\n   * @param path - The path of the child to update.\n   * @param newChildNode - The new child node, which may be an empty node\n   * @returns The updated node.\n   */\n  updateChild(path: Path, newChildNode: Node): Node;\n\n  /**\n   * True if the immediate child specified exists\n   */\n  hasChild(childName: string): boolean;\n\n  /**\n   * @returns True if this node has no value or children.\n   */\n  isEmpty(): boolean;\n\n  /**\n   * @returns The number of children of this node.\n   */\n  numChildren(): number;\n\n  /**\n   * Calls action for each child.\n   * @param action - Action to be called for\n   * each child.  It's passed the child name and the child node.\n   * @returns The first truthy value return by action, or the last falsey one\n   */\n  forEachChild(index: Index, action: (a: string, b: Node) => void): unknown;\n\n  /**\n   * @param exportFormat - True for export format (also wire protocol format).\n   * @returns Value of this node as JSON.\n   */\n  val(exportFormat?: boolean): unknown;\n\n  /**\n   * @returns hash representing the node contents.\n   */\n  hash(): string;\n\n  /**\n   * @param other - Another node\n   * @returns -1 for less than, 0 for equal, 1 for greater than other\n   */\n  compareTo(other: Node): number;\n\n  /**\n   * @returns Whether or not this snapshot equals other\n   */\n  equals(other: Node): boolean;\n\n  /**\n   * @returns This node, with the specified index now available\n   */\n  withIndex(indexDefinition: Index): Node;\n\n  isIndexed(indexDefinition: Index): boolean;\n}\n\nexport class NamedNode {\n  constructor(public name: string, public node: Node) {}\n\n  static Wrap(name: string, node: Node) {\n    return new NamedNode(name, node);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Comparator } from '../../util/SortedMap';\nimport { MIN_NAME } from '../../util/util';\nimport { Node, NamedNode } from '../Node';\n\nexport abstract class Index {\n  abstract compare(a: NamedNode, b: NamedNode): number;\n\n  abstract isDefinedOn(node: Node): boolean;\n\n  /**\n   * @returns A standalone comparison function for\n   * this index\n   */\n  getCompare(): Comparator<NamedNode> {\n    return this.compare.bind(this);\n  }\n\n  /**\n   * Given a before and after value for a node, determine if the indexed value has changed. Even if they are different,\n   * it's possible that the changes are isolated to parts of the snapshot that are not indexed.\n   *\n   *\n   * @returns True if the portion of the snapshot being indexed changed between oldNode and newNode\n   */\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    const oldWrapped = new NamedNode(MIN_NAME, oldNode);\n    const newWrapped = new NamedNode(MIN_NAME, newNode);\n    return this.compare(oldWrapped, newWrapped) !== 0;\n  }\n\n  /**\n   * @returns a node wrapper that will sort equal to or less than\n   * any other node wrapper, using this index\n   */\n  minPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n\n  /**\n   * @returns a node wrapper that will sort greater than or equal to\n   * any other node wrapper, using this index\n   */\n  abstract maxPost(): NamedNode;\n\n  abstract makePost(indexValue: unknown, name: string): NamedNode;\n\n  /**\n   * @returns String representation for inclusion in a query spec\n   */\n  abstract toString(): string;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, assertionError } from '@firebase/util';\n\nimport { nameCompare, MAX_NAME } from '../../util/util';\nimport { ChildrenNode } from '../ChildrenNode';\nimport { Node, NamedNode } from '../Node';\n\nimport { Index } from './Index';\n\nlet __EMPTY_NODE: ChildrenNode;\n\nexport class KeyIndex extends Index {\n  static get __EMPTY_NODE() {\n    return __EMPTY_NODE;\n  }\n\n  static set __EMPTY_NODE(val) {\n    __EMPTY_NODE = val;\n  }\n  compare(a: NamedNode, b: NamedNode): number {\n    return nameCompare(a.name, b.name);\n  }\n  isDefinedOn(node: Node): boolean {\n    // We could probably return true here (since every node has a key), but it's never called\n    // so just leaving unimplemented for now.\n    throw assertionError('KeyIndex.isDefinedOn not expected to be called.');\n  }\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return false; // The key for a node never changes.\n  }\n  minPost() {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n  maxPost(): NamedNode {\n    // TODO: This should really be created once and cached in a static property, but\n    // NamedNode isn't defined yet, so I can't use it in a static.  Bleh.\n    return new NamedNode(MAX_NAME, __EMPTY_NODE);\n  }\n\n  makePost(indexValue: string, name: string): NamedNode {\n    assert(\n      typeof indexValue === 'string',\n      'KeyIndex indexValue must always be a string.'\n    );\n    // We just use empty node, but it'll never be compared, since our comparator only looks at name.\n    return new NamedNode(indexValue, __EMPTY_NODE);\n  }\n\n  /**\n   * @returns String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.key';\n  }\n}\n\nexport const KEY_INDEX = new KeyIndex();\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Implementation of an immutable SortedMap using a Left-leaning\n * Red-Black Tree, adapted from the implementation in Mugs\n * (http://mads379.github.com/mugs/) by Mads Hartmann Jensen\n * (mads379\\@gmail.com).\n *\n * Original paper on Left-leaning Red-Black Trees:\n *   http://www.cs.princeton.edu/~rs/talks/LLRB/LLRB.pdf\n *\n * Invariant 1: No red node has a red child\n * Invariant 2: Every leaf path has the same number of black nodes\n * Invariant 3: Only the left child can be red (left leaning)\n */\n\n// TODO: There are some improvements I'd like to make to improve memory / perf:\n//  * Create two prototypes, LLRedNode and LLBlackNode, instead of storing a\n//    color property in every node.\n// TODO: It would also be good (and possibly necessary) to create a base\n// interface for LLRBNode and LLRBEmptyNode.\n\nexport type Comparator<K> = (key1: K, key2: K) => number;\n\n/**\n * An iterator over an LLRBNode.\n */\nexport class SortedMapIterator<K, V, T> {\n  private nodeStack_: Array<LLRBNode<K, V> | LLRBEmptyNode<K, V>> = [];\n\n  /**\n   * @param node - Node to iterate.\n   * @param isReverse_ - Whether or not to iterate in reverse\n   */\n  constructor(\n    node: LLRBNode<K, V> | LLRBEmptyNode<K, V>,\n    startKey: K | null,\n    comparator: Comparator<K>,\n    private isReverse_: boolean,\n    private resultGenerator_: ((k: K, v: V) => T) | null = null\n  ) {\n    let cmp = 1;\n    while (!node.isEmpty()) {\n      node = node as LLRBNode<K, V>;\n      cmp = startKey ? comparator(node.key, startKey) : 1;\n      // flip the comparison if we're going in reverse\n      if (isReverse_) {\n        cmp *= -1;\n      }\n\n      if (cmp < 0) {\n        // This node is less than our start key. ignore it\n        if (this.isReverse_) {\n          node = node.left;\n        } else {\n          node = node.right;\n        }\n      } else if (cmp === 0) {\n        // This node is exactly equal to our start key. Push it on the stack, but stop iterating;\n        this.nodeStack_.push(node);\n        break;\n      } else {\n        // This node is greater than our start key, add it to the stack and move to the next one\n        this.nodeStack_.push(node);\n        if (this.isReverse_) {\n          node = node.right;\n        } else {\n          node = node.left;\n        }\n      }\n    }\n  }\n\n  getNext(): T {\n    if (this.nodeStack_.length === 0) {\n      return null;\n    }\n\n    let node = this.nodeStack_.pop();\n    let result: T;\n    if (this.resultGenerator_) {\n      result = this.resultGenerator_(node.key, node.value);\n    } else {\n      result = { key: node.key, value: node.value } as unknown as T;\n    }\n\n    if (this.isReverse_) {\n      node = node.left;\n      while (!node.isEmpty()) {\n        this.nodeStack_.push(node);\n        node = node.right;\n      }\n    } else {\n      node = node.right;\n      while (!node.isEmpty()) {\n        this.nodeStack_.push(node);\n        node = node.left;\n      }\n    }\n\n    return result;\n  }\n\n  hasNext(): boolean {\n    return this.nodeStack_.length > 0;\n  }\n\n  peek(): T {\n    if (this.nodeStack_.length === 0) {\n      return null;\n    }\n\n    const node = this.nodeStack_[this.nodeStack_.length - 1];\n    if (this.resultGenerator_) {\n      return this.resultGenerator_(node.key, node.value);\n    } else {\n      return { key: node.key, value: node.value } as unknown as T;\n    }\n  }\n}\n\n/**\n * Represents a node in a Left-leaning Red-Black tree.\n */\nexport class LLRBNode<K, V> {\n  color: boolean;\n  left: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  right: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n\n  /**\n   * @param key - Key associated with this node.\n   * @param value - Value associated with this node.\n   * @param color - Whether this node is red.\n   * @param left - Left child.\n   * @param right - Right child.\n   */\n  constructor(\n    public key: K,\n    public value: V,\n    color: boolean | null,\n    left?: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right?: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ) {\n    this.color = color != null ? color : LLRBNode.RED;\n    this.left =\n      left != null ? left : (SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>);\n    this.right =\n      right != null ? right : (SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>);\n  }\n\n  static RED = true;\n  static BLACK = false;\n\n  /**\n   * Returns a copy of the current node, optionally replacing pieces of it.\n   *\n   * @param key - New key for the node, or null.\n   * @param value - New value for the node, or null.\n   * @param color - New color for the node, or null.\n   * @param left - New left child for the node, or null.\n   * @param right - New right child for the node, or null.\n   * @returns The node copy.\n   */\n  copy(\n    key: K | null,\n    value: V | null,\n    color: boolean | null,\n    left: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ): LLRBNode<K, V> {\n    return new LLRBNode(\n      key != null ? key : this.key,\n      value != null ? value : this.value,\n      color != null ? color : this.color,\n      left != null ? left : this.left,\n      right != null ? right : this.right\n    );\n  }\n\n  /**\n   * @returns The total number of nodes in the tree.\n   */\n  count(): number {\n    return this.left.count() + 1 + this.right.count();\n  }\n\n  /**\n   * @returns True if the tree is empty.\n   */\n  isEmpty(): boolean {\n    return false;\n  }\n\n  /**\n   * Traverses the tree in key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   *   node.  If it returns true, traversal is aborted.\n   * @returns The first truthy value returned by action, or the last falsey\n   *   value returned by action\n   */\n  inorderTraversal(action: (k: K, v: V) => unknown): boolean {\n    return (\n      this.left.inorderTraversal(action) ||\n      !!action(this.key, this.value) ||\n      this.right.inorderTraversal(action)\n    );\n  }\n\n  /**\n   * Traverses the tree in reverse key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @returns True if traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return (\n      this.right.reverseTraversal(action) ||\n      action(this.key, this.value) ||\n      this.left.reverseTraversal(action)\n    );\n  }\n\n  /**\n   * @returns The minimum node in the tree.\n   */\n  private min_(): LLRBNode<K, V> {\n    if (this.left.isEmpty()) {\n      return this;\n    } else {\n      return (this.left as LLRBNode<K, V>).min_();\n    }\n  }\n\n  /**\n   * @returns The maximum key in the tree.\n   */\n  minKey(): K {\n    return this.min_().key;\n  }\n\n  /**\n   * @returns The maximum key in the tree.\n   */\n  maxKey(): K {\n    if (this.right.isEmpty()) {\n      return this.key;\n    } else {\n      return this.right.maxKey();\n    }\n  }\n\n  /**\n   * @param key - Key to insert.\n   * @param value - Value to insert.\n   * @param comparator - Comparator.\n   * @returns New tree, with the key/value added.\n   */\n  insert(key: K, value: V, comparator: Comparator<K>): LLRBNode<K, V> {\n    let n: LLRBNode<K, V> = this;\n    const cmp = comparator(key, n.key);\n    if (cmp < 0) {\n      n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);\n    } else if (cmp === 0) {\n      n = n.copy(null, value, null, null, null);\n    } else {\n      n = n.copy(\n        null,\n        null,\n        null,\n        null,\n        n.right.insert(key, value, comparator)\n      );\n    }\n    return n.fixUp_();\n  }\n\n  /**\n   * @returns New tree, with the minimum key removed.\n   */\n  private removeMin_(): LLRBNode<K, V> | LLRBEmptyNode<K, V> {\n    if (this.left.isEmpty()) {\n      return SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>;\n    }\n    let n: LLRBNode<K, V> = this;\n    if (!n.left.isRed_() && !n.left.left.isRed_()) {\n      n = n.moveRedLeft_();\n    }\n    n = n.copy(null, null, null, (n.left as LLRBNode<K, V>).removeMin_(), null);\n    return n.fixUp_();\n  }\n\n  /**\n   * @param key - The key of the item to remove.\n   * @param comparator - Comparator.\n   * @returns New tree, with the specified item removed.\n   */\n  remove(\n    key: K,\n    comparator: Comparator<K>\n  ): LLRBNode<K, V> | LLRBEmptyNode<K, V> {\n    let n, smallest;\n    n = this;\n    if (comparator(key, n.key) < 0) {\n      if (!n.left.isEmpty() && !n.left.isRed_() && !n.left.left.isRed_()) {\n        n = n.moveRedLeft_();\n      }\n      n = n.copy(null, null, null, n.left.remove(key, comparator), null);\n    } else {\n      if (n.left.isRed_()) {\n        n = n.rotateRight_();\n      }\n      if (!n.right.isEmpty() && !n.right.isRed_() && !n.right.left.isRed_()) {\n        n = n.moveRedRight_();\n      }\n      if (comparator(key, n.key) === 0) {\n        if (n.right.isEmpty()) {\n          return SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>;\n        } else {\n          smallest = (n.right as LLRBNode<K, V>).min_();\n          n = n.copy(\n            smallest.key,\n            smallest.value,\n            null,\n            null,\n            (n.right as LLRBNode<K, V>).removeMin_()\n          );\n        }\n      }\n      n = n.copy(null, null, null, null, n.right.remove(key, comparator));\n    }\n    return n.fixUp_();\n  }\n\n  /**\n   * @returns Whether this is a RED node.\n   */\n  isRed_(): boolean {\n    return this.color;\n  }\n\n  /**\n   * @returns New tree after performing any needed rotations.\n   */\n  private fixUp_(): LLRBNode<K, V> {\n    let n: LLRBNode<K, V> = this;\n    if (n.right.isRed_() && !n.left.isRed_()) {\n      n = n.rotateLeft_();\n    }\n    if (n.left.isRed_() && n.left.left.isRed_()) {\n      n = n.rotateRight_();\n    }\n    if (n.left.isRed_() && n.right.isRed_()) {\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n\n  /**\n   * @returns New tree, after moveRedLeft.\n   */\n  private moveRedLeft_(): LLRBNode<K, V> {\n    let n = this.colorFlip_();\n    if (n.right.left.isRed_()) {\n      n = n.copy(\n        null,\n        null,\n        null,\n        null,\n        (n.right as LLRBNode<K, V>).rotateRight_()\n      );\n      n = n.rotateLeft_();\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n\n  /**\n   * @returns New tree, after moveRedRight.\n   */\n  private moveRedRight_(): LLRBNode<K, V> {\n    let n = this.colorFlip_();\n    if (n.left.left.isRed_()) {\n      n = n.rotateRight_();\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n\n  /**\n   * @returns New tree, after rotateLeft.\n   */\n  private rotateLeft_(): LLRBNode<K, V> {\n    const nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);\n    return this.right.copy(null, null, this.color, nl, null) as LLRBNode<K, V>;\n  }\n\n  /**\n   * @returns New tree, after rotateRight.\n   */\n  private rotateRight_(): LLRBNode<K, V> {\n    const nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);\n    return this.left.copy(null, null, this.color, null, nr) as LLRBNode<K, V>;\n  }\n\n  /**\n   * @returns Newt ree, after colorFlip.\n   */\n  private colorFlip_(): LLRBNode<K, V> {\n    const left = this.left.copy(null, null, !this.left.color, null, null);\n    const right = this.right.copy(null, null, !this.right.color, null, null);\n    return this.copy(null, null, !this.color, left, right);\n  }\n\n  /**\n   * For testing.\n   *\n   * @returns True if all is well.\n   */\n  private checkMaxDepth_(): boolean {\n    const blackDepth = this.check_();\n    return Math.pow(2.0, blackDepth) <= this.count() + 1;\n  }\n\n  check_(): number {\n    if (this.isRed_() && this.left.isRed_()) {\n      throw new Error(\n        'Red node has red child(' + this.key + ',' + this.value + ')'\n      );\n    }\n    if (this.right.isRed_()) {\n      throw new Error(\n        'Right child of (' + this.key + ',' + this.value + ') is red'\n      );\n    }\n    const blackDepth = this.left.check_();\n    if (blackDepth !== this.right.check_()) {\n      throw new Error('Black depths differ');\n    } else {\n      return blackDepth + (this.isRed_() ? 0 : 1);\n    }\n  }\n}\n\n/**\n * Represents an empty node (a leaf node in the Red-Black Tree).\n */\nexport class LLRBEmptyNode<K, V> {\n  key: K;\n  value: V;\n  left: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  right: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  color: boolean;\n\n  /**\n   * Returns a copy of the current node.\n   *\n   * @returns The node copy.\n   */\n  copy(\n    key: K | null,\n    value: V | null,\n    color: boolean | null,\n    left: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ): LLRBEmptyNode<K, V> {\n    return this;\n  }\n\n  /**\n   * Returns a copy of the tree, with the specified key/value added.\n   *\n   * @param key - Key to be added.\n   * @param value - Value to be added.\n   * @param comparator - Comparator.\n   * @returns New tree, with item added.\n   */\n  insert(key: K, value: V, comparator: Comparator<K>): LLRBNode<K, V> {\n    return new LLRBNode(key, value, null);\n  }\n\n  /**\n   * Returns a copy of the tree, with the specified key removed.\n   *\n   * @param key - The key to remove.\n   * @param comparator - Comparator.\n   * @returns New tree, with item removed.\n   */\n  remove(key: K, comparator: Comparator<K>): LLRBEmptyNode<K, V> {\n    return this;\n  }\n\n  /**\n   * @returns The total number of nodes in the tree.\n   */\n  count(): number {\n    return 0;\n  }\n\n  /**\n   * @returns True if the tree is empty.\n   */\n  isEmpty(): boolean {\n    return true;\n  }\n\n  /**\n   * Traverses the tree in key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @returns True if traversal was aborted.\n   */\n  inorderTraversal(action: (k: K, v: V) => unknown): boolean {\n    return false;\n  }\n\n  /**\n   * Traverses the tree in reverse key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @returns True if traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return false;\n  }\n\n  minKey(): null {\n    return null;\n  }\n\n  maxKey(): null {\n    return null;\n  }\n\n  check_(): number {\n    return 0;\n  }\n\n  /**\n   * @returns Whether this node is red.\n   */\n  isRed_() {\n    return false;\n  }\n}\n\n/**\n * An immutable sorted map implementation, based on a Left-leaning Red-Black\n * tree.\n */\nexport class SortedMap<K, V> {\n  /**\n   * Always use the same empty node, to reduce memory.\n   */\n  static EMPTY_NODE = new LLRBEmptyNode();\n\n  /**\n   * @param comparator_ - Key comparator.\n   * @param root_ - Optional root node for the map.\n   */\n  constructor(\n    private comparator_: Comparator<K>,\n    private root_:\n      | LLRBNode<K, V>\n      | LLRBEmptyNode<K, V> = SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>\n  ) {}\n\n  /**\n   * Returns a copy of the map, with the specified key/value added or replaced.\n   * (TODO: We should perhaps rename this method to 'put')\n   *\n   * @param key - Key to be added.\n   * @param value - Value to be added.\n   * @returns New map, with item added.\n   */\n  insert(key: K, value: V): SortedMap<K, V> {\n    return new SortedMap(\n      this.comparator_,\n      this.root_\n        .insert(key, value, this.comparator_)\n        .copy(null, null, LLRBNode.BLACK, null, null)\n    );\n  }\n\n  /**\n   * Returns a copy of the map, with the specified key removed.\n   *\n   * @param key - The key to remove.\n   * @returns New map, with item removed.\n   */\n  remove(key: K): SortedMap<K, V> {\n    return new SortedMap(\n      this.comparator_,\n      this.root_\n        .remove(key, this.comparator_)\n        .copy(null, null, LLRBNode.BLACK, null, null)\n    );\n  }\n\n  /**\n   * Returns the value of the node with the given key, or null.\n   *\n   * @param key - The key to look up.\n   * @returns The value of the node with the given key, or null if the\n   * key doesn't exist.\n   */\n  get(key: K): V | null {\n    let cmp;\n    let node = this.root_;\n    while (!node.isEmpty()) {\n      cmp = this.comparator_(key, node.key);\n      if (cmp === 0) {\n        return node.value;\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        node = node.right;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Returns the key of the item *before* the specified key, or null if key is the first item.\n   * @param key - The key to find the predecessor of\n   * @returns The predecessor key.\n   */\n  getPredecessorKey(key: K): K | null {\n    let cmp,\n      node = this.root_,\n      rightParent = null;\n    while (!node.isEmpty()) {\n      cmp = this.comparator_(key, node.key);\n      if (cmp === 0) {\n        if (!node.left.isEmpty()) {\n          node = node.left;\n          while (!node.right.isEmpty()) {\n            node = node.right;\n          }\n          return node.key;\n        } else if (rightParent) {\n          return rightParent.key;\n        } else {\n          return null; // first item.\n        }\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        rightParent = node;\n        node = node.right;\n      }\n    }\n\n    throw new Error(\n      'Attempted to find predecessor key for a nonexistent key.  What gives?'\n    );\n  }\n\n  /**\n   * @returns True if the map is empty.\n   */\n  isEmpty(): boolean {\n    return this.root_.isEmpty();\n  }\n\n  /**\n   * @returns The total number of nodes in the map.\n   */\n  count(): number {\n    return this.root_.count();\n  }\n\n  /**\n   * @returns The minimum key in the map.\n   */\n  minKey(): K | null {\n    return this.root_.minKey();\n  }\n\n  /**\n   * @returns The maximum key in the map.\n   */\n  maxKey(): K | null {\n    return this.root_.maxKey();\n  }\n\n  /**\n   * Traverses the map in key order and calls the specified action function\n   * for each key/value pair.\n   *\n   * @param action - Callback function to be called\n   * for each key/value pair.  If action returns true, traversal is aborted.\n   * @returns The first truthy value returned by action, or the last falsey\n   *   value returned by action\n   */\n  inorderTraversal(action: (k: K, v: V) => unknown): boolean {\n    return this.root_.inorderTraversal(action);\n  }\n\n  /**\n   * Traverses the map in reverse key order and calls the specified action function\n   * for each key/value pair.\n   *\n   * @param action - Callback function to be called\n   * for each key/value pair.  If action returns true, traversal is aborted.\n   * @returns True if the traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return this.root_.reverseTraversal(action);\n  }\n\n  /**\n   * Returns an iterator over the SortedMap.\n   * @returns The iterator.\n   */\n  getIterator<T>(\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      null,\n      this.comparator_,\n      false,\n      resultGenerator\n    );\n  }\n\n  getIteratorFrom<T>(\n    key: K,\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      key,\n      this.comparator_,\n      false,\n      resultGenerator\n    );\n  }\n\n  getReverseIteratorFrom<T>(\n    key: K,\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      key,\n      this.comparator_,\n      true,\n      resultGenerator\n    );\n  }\n\n  getReverseIterator<T>(\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      null,\n      this.comparator_,\n      true,\n      resultGenerator\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { nameCompare } from '../util/util';\n\nimport { NamedNode } from './Node';\n\nexport function NAME_ONLY_COMPARATOR(left: NamedNode, right: NamedNode) {\n  return nameCompare(left.name, right.name);\n}\n\nexport function NAME_COMPARATOR(left: string, right: string) {\n  return nameCompare(left, right);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, contains } from '@firebase/util';\n\nimport { Indexable } from '../util/misc';\nimport { doubleToIEEE754String } from '../util/util';\n\nimport { Node } from './Node';\n\nlet MAX_NODE: Node;\n\nexport function setMaxNode(val: Node) {\n  MAX_NODE = val;\n}\n\nexport const priorityHashText = function (priority: string | number): string {\n  if (typeof priority === 'number') {\n    return 'number:' + doubleToIEEE754String(priority);\n  } else {\n    return 'string:' + priority;\n  }\n};\n\n/**\n * Validates that a priority snapshot Node is valid.\n */\nexport const validatePriorityNode = function (priorityNode: Node) {\n  if (priorityNode.isLeafNode()) {\n    const val = priorityNode.val();\n    assert(\n      typeof val === 'string' ||\n        typeof val === 'number' ||\n        (typeof val === 'object' && contains(val as Indexable, '.sv')),\n      'Priority must be a string or number.'\n    );\n  } else {\n    assert(\n      priorityNode === MAX_NODE || priorityNode.isEmpty(),\n      'priority of unexpected type.'\n    );\n  }\n  // Don't call getPriority() on MAX_NODE to avoid hitting assertion.\n  assert(\n    priorityNode === MAX_NODE || priorityNode.getPriority().isEmpty(),\n    \"Priority nodes can't have a priority of their own.\"\n  );\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Indexable } from '../util/misc';\nimport {\n  Path,\n  pathGetFront,\n  pathGetLength,\n  pathIsEmpty,\n  pathPopFront\n} from '../util/Path';\nimport { doubleToIEEE754String, sha1 } from '../util/util';\n\nimport { ChildrenNodeConstructor } from './ChildrenNode';\nimport { Index } from './indexes/Index';\nimport { Node } from './Node';\nimport { priorityHashText, validatePriorityNode } from './snap';\n\nlet __childrenNodeConstructor: ChildrenNodeConstructor;\n\n/**\n * LeafNode is a class for storing leaf nodes in a DataSnapshot.  It\n * implements Node and stores the value of the node (a string,\n * number, or boolean) accessible via getValue().\n */\nexport class LeafNode implements Node {\n  static set __childrenNodeConstructor(val: ChildrenNodeConstructor) {\n    __childrenNodeConstructor = val;\n  }\n\n  static get __childrenNodeConstructor() {\n    return __childrenNodeConstructor;\n  }\n\n  /**\n   * The sort order for comparing leaf nodes of different types. If two leaf nodes have\n   * the same type, the comparison falls back to their value\n   */\n  static VALUE_TYPE_ORDER = ['object', 'boolean', 'number', 'string'];\n\n  private lazyHash_: string | null = null;\n\n  /**\n   * @param value_ - The value to store in this leaf node. The object type is\n   * possible in the event of a deferred value\n   * @param priorityNode_ - The priority of this node.\n   */\n  constructor(\n    private readonly value_: string | number | boolean | Indexable,\n    private priorityNode_: Node = LeafNode.__childrenNodeConstructor.EMPTY_NODE\n  ) {\n    assert(\n      this.value_ !== undefined && this.value_ !== null,\n      \"LeafNode shouldn't be created with null/undefined value.\"\n    );\n\n    validatePriorityNode(this.priorityNode_);\n  }\n\n  /** @inheritDoc */\n  isLeafNode(): boolean {\n    return true;\n  }\n\n  /** @inheritDoc */\n  getPriority(): Node {\n    return this.priorityNode_;\n  }\n\n  /** @inheritDoc */\n  updatePriority(newPriorityNode: Node): Node {\n    return new LeafNode(this.value_, newPriorityNode);\n  }\n\n  /** @inheritDoc */\n  getImmediateChild(childName: string): Node {\n    // Hack to treat priority as a regular child\n    if (childName === '.priority') {\n      return this.priorityNode_;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    }\n  }\n\n  /** @inheritDoc */\n  getChild(path: Path): Node {\n    if (pathIsEmpty(path)) {\n      return this;\n    } else if (pathGetFront(path) === '.priority') {\n      return this.priorityNode_;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    }\n  }\n  hasChild(): boolean {\n    return false;\n  }\n\n  /** @inheritDoc */\n  getPredecessorChildName(childName: string, childNode: Node): null {\n    return null;\n  }\n\n  /** @inheritDoc */\n  updateImmediateChild(childName: string, newChildNode: Node): Node {\n    if (childName === '.priority') {\n      return this.updatePriority(newChildNode);\n    } else if (newChildNode.isEmpty() && childName !== '.priority') {\n      return this;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(\n        childName,\n        newChildNode\n      ).updatePriority(this.priorityNode_);\n    }\n  }\n\n  /** @inheritDoc */\n  updateChild(path: Path, newChildNode: Node): Node {\n    const front = pathGetFront(path);\n    if (front === null) {\n      return newChildNode;\n    } else if (newChildNode.isEmpty() && front !== '.priority') {\n      return this;\n    } else {\n      assert(\n        front !== '.priority' || pathGetLength(path) === 1,\n        '.priority must be the last token in a path'\n      );\n\n      return this.updateImmediateChild(\n        front,\n        LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateChild(\n          pathPopFront(path),\n          newChildNode\n        )\n      );\n    }\n  }\n\n  /** @inheritDoc */\n  isEmpty(): boolean {\n    return false;\n  }\n\n  /** @inheritDoc */\n  numChildren(): number {\n    return 0;\n  }\n\n  /** @inheritDoc */\n  forEachChild(index: Index, action: (s: string, n: Node) => void): boolean {\n    return false;\n  }\n  val(exportFormat?: boolean): {} {\n    if (exportFormat && !this.getPriority().isEmpty()) {\n      return {\n        '.value': this.getValue(),\n        '.priority': this.getPriority().val()\n      };\n    } else {\n      return this.getValue();\n    }\n  }\n\n  /** @inheritDoc */\n  hash(): string {\n    if (this.lazyHash_ === null) {\n      let toHash = '';\n      if (!this.priorityNode_.isEmpty()) {\n        toHash +=\n          'priority:' +\n          priorityHashText(this.priorityNode_.val() as number | string) +\n          ':';\n      }\n\n      const type = typeof this.value_;\n      toHash += type + ':';\n      if (type === 'number') {\n        toHash += doubleToIEEE754String(this.value_ as number);\n      } else {\n        toHash += this.value_;\n      }\n      this.lazyHash_ = sha1(toHash);\n    }\n    return this.lazyHash_;\n  }\n\n  /**\n   * Returns the value of the leaf node.\n   * @returns The value of the node.\n   */\n  getValue(): Indexable | string | number | boolean {\n    return this.value_;\n  }\n  compareTo(other: Node): number {\n    if (other === LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\n      return 1;\n    } else if (other instanceof LeafNode.__childrenNodeConstructor) {\n      return -1;\n    } else {\n      assert(other.isLeafNode(), 'Unknown node type');\n      return this.compareToLeafNode_(other as LeafNode);\n    }\n  }\n\n  /**\n   * Comparison specifically for two leaf nodes\n   */\n  private compareToLeafNode_(otherLeaf: LeafNode): number {\n    const otherLeafType = typeof otherLeaf.value_;\n    const thisLeafType = typeof this.value_;\n    const otherIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(otherLeafType);\n    const thisIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(thisLeafType);\n    assert(otherIndex >= 0, 'Unknown leaf type: ' + otherLeafType);\n    assert(thisIndex >= 0, 'Unknown leaf type: ' + thisLeafType);\n    if (otherIndex === thisIndex) {\n      // Same type, compare values\n      if (thisLeafType === 'object') {\n        // Deferred value nodes are all equal, but we should also never get to this point...\n        return 0;\n      } else {\n        // Note that this works because true > false, all others are number or string comparisons\n        if (this.value_ < otherLeaf.value_) {\n          return -1;\n        } else if (this.value_ === otherLeaf.value_) {\n          return 0;\n        } else {\n          return 1;\n        }\n      }\n    } else {\n      return thisIndex - otherIndex;\n    }\n  }\n  withIndex(): Node {\n    return this;\n  }\n  isIndexed(): boolean {\n    return true;\n  }\n  equals(other: Node): boolean {\n    if (other === this) {\n      return true;\n    } else if (other.isLeafNode()) {\n      const otherLeaf = other as LeafNode;\n      return (\n        this.value_ === otherLeaf.value_ &&\n        this.priorityNode_.equals(otherLeaf.priorityNode_)\n      );\n    } else {\n      return false;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { nameCompare, MAX_NAME } from '../../util/util';\nimport { LeafNode } from '../LeafNode';\nimport { NamedNode, Node } from '../Node';\n\nimport { Index } from './Index';\n\nlet nodeFromJSON: (a: unknown) => Node;\nlet MAX_NODE: Node;\n\nexport function setNodeFromJSON(val: (a: unknown) => Node) {\n  nodeFromJSON = val;\n}\n\nexport function setMaxNode(val: Node) {\n  MAX_NODE = val;\n}\n\nexport class PriorityIndex extends Index {\n  compare(a: NamedNode, b: NamedNode): number {\n    const aPriority = a.node.getPriority();\n    const bPriority = b.node.getPriority();\n    const indexCmp = aPriority.compareTo(bPriority);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n  isDefinedOn(node: Node): boolean {\n    return !node.getPriority().isEmpty();\n  }\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return !oldNode.getPriority().equals(newNode.getPriority());\n  }\n  minPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n  maxPost(): NamedNode {\n    return new NamedNode(MAX_NAME, new LeafNode('[PRIORITY-POST]', MAX_NODE));\n  }\n\n  makePost(indexValue: unknown, name: string): NamedNode {\n    const priorityNode = nodeFromJSON(indexValue);\n    return new NamedNode(name, new LeafNode('[PRIORITY-POST]', priorityNode));\n  }\n\n  /**\n   * @returns String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.priority';\n  }\n}\n\nexport const PRIORITY_INDEX = new PriorityIndex();\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { LLRBNode, SortedMap } from '../util/SortedMap';\n\nimport { NamedNode } from './Node';\n\nconst LOG_2 = Math.log(2);\n\nclass Base12Num {\n  count: number;\n  private current_: number;\n  private bits_: number;\n\n  constructor(length: number) {\n    const logBase2 = (num: number) =>\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      parseInt((Math.log(num) / LOG_2) as any, 10);\n    const bitMask = (bits: number) => parseInt(Array(bits + 1).join('1'), 2);\n    this.count = logBase2(length + 1);\n    this.current_ = this.count - 1;\n    const mask = bitMask(this.count);\n    this.bits_ = (length + 1) & mask;\n  }\n\n  nextBitIsOne(): boolean {\n    //noinspection JSBitwiseOperatorUsage\n    const result = !(this.bits_ & (0x1 << this.current_));\n    this.current_--;\n    return result;\n  }\n}\n\n/**\n * Takes a list of child nodes and constructs a SortedSet using the given comparison\n * function\n *\n * Uses the algorithm described in the paper linked here:\n * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.1458\n *\n * @param childList - Unsorted list of children\n * @param cmp - The comparison method to be used\n * @param keyFn - An optional function to extract K from a node wrapper, if K's\n * type is not NamedNode\n * @param mapSortFn - An optional override for comparator used by the generated sorted map\n */\nexport const buildChildSet = function <K, V>(\n  childList: NamedNode[],\n  cmp: (a: NamedNode, b: NamedNode) => number,\n  keyFn?: (a: NamedNode) => K,\n  mapSortFn?: (a: K, b: K) => number\n): SortedMap<K, V> {\n  childList.sort(cmp);\n\n  const buildBalancedTree = function (\n    low: number,\n    high: number\n  ): LLRBNode<K, V> | null {\n    const length = high - low;\n    let namedNode: NamedNode;\n    let key: K;\n    if (length === 0) {\n      return null;\n    } else if (length === 1) {\n      namedNode = childList[low];\n      key = keyFn ? keyFn(namedNode) : (namedNode as unknown as K);\n      return new LLRBNode(\n        key,\n        namedNode.node as unknown as V,\n        LLRBNode.BLACK,\n        null,\n        null\n      );\n    } else {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const middle = parseInt((length / 2) as any, 10) + low;\n      const left = buildBalancedTree(low, middle);\n      const right = buildBalancedTree(middle + 1, high);\n      namedNode = childList[middle];\n      key = keyFn ? keyFn(namedNode) : (namedNode as unknown as K);\n      return new LLRBNode(\n        key,\n        namedNode.node as unknown as V,\n        LLRBNode.BLACK,\n        left,\n        right\n      );\n    }\n  };\n\n  const buildFrom12Array = function (base12: Base12Num): LLRBNode<K, V> {\n    let node: LLRBNode<K, V> = null;\n    let root = null;\n    let index = childList.length;\n\n    const buildPennant = function (chunkSize: number, color: boolean) {\n      const low = index - chunkSize;\n      const high = index;\n      index -= chunkSize;\n      const childTree = buildBalancedTree(low + 1, high);\n      const namedNode = childList[low];\n      const key: K = keyFn ? keyFn(namedNode) : (namedNode as unknown as K);\n      attachPennant(\n        new LLRBNode(\n          key,\n          namedNode.node as unknown as V,\n          color,\n          null,\n          childTree\n        )\n      );\n    };\n\n    const attachPennant = function (pennant: LLRBNode<K, V>) {\n      if (node) {\n        node.left = pennant;\n        node = pennant;\n      } else {\n        root = pennant;\n        node = pennant;\n      }\n    };\n\n    for (let i = 0; i < base12.count; ++i) {\n      const isOne = base12.nextBitIsOne();\n      // The number of nodes taken in each slice is 2^(arr.length - (i + 1))\n      const chunkSize = Math.pow(2, base12.count - (i + 1));\n      if (isOne) {\n        buildPennant(chunkSize, LLRBNode.BLACK);\n      } else {\n        // current == 2\n        buildPennant(chunkSize, LLRBNode.BLACK);\n        buildPennant(chunkSize, LLRBNode.RED);\n      }\n    }\n    return root;\n  };\n\n  const base12 = new Base12Num(childList.length);\n  const root = buildFrom12Array(base12);\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return new SortedMap<K, V>(mapSortFn || (cmp as any), root);\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, contains, map, safeGet } from '@firebase/util';\n\nimport { SortedMap } from '../util/SortedMap';\n\nimport { buildChildSet } from './childSet';\nimport { Index } from './indexes/Index';\nimport { KEY_INDEX } from './indexes/KeyIndex';\nimport { PRIORITY_INDEX } from './indexes/PriorityIndex';\nimport { NamedNode, Node } from './Node';\n\nlet _defaultIndexMap: IndexMap;\n\nconst fallbackObject = {};\n\nexport class IndexMap {\n  /**\n   * The default IndexMap for nodes without a priority\n   */\n  static get Default(): IndexMap {\n    assert(\n      fallbackObject && PRIORITY_INDEX,\n      'ChildrenNode.ts has not been loaded'\n    );\n    _defaultIndexMap =\n      _defaultIndexMap ||\n      new IndexMap(\n        { '.priority': fallbackObject },\n        { '.priority': PRIORITY_INDEX }\n      );\n    return _defaultIndexMap;\n  }\n\n  constructor(\n    private indexes_: {\n      [k: string]: SortedMap<NamedNode, Node> | /*FallbackType*/ object;\n    },\n    private indexSet_: { [k: string]: Index }\n  ) {}\n\n  get(indexKey: string): SortedMap<NamedNode, Node> | null {\n    const sortedMap = safeGet(this.indexes_, indexKey);\n    if (!sortedMap) {\n      throw new Error('No index defined for ' + indexKey);\n    }\n\n    if (sortedMap instanceof SortedMap) {\n      return sortedMap;\n    } else {\n      // The index exists, but it falls back to just name comparison. Return null so that the calling code uses the\n      // regular child map\n      return null;\n    }\n  }\n\n  hasIndex(indexDefinition: Index): boolean {\n    return contains(this.indexSet_, indexDefinition.toString());\n  }\n\n  addIndex(\n    indexDefinition: Index,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap {\n    assert(\n      indexDefinition !== KEY_INDEX,\n      \"KeyIndex always exists and isn't meant to be added to the IndexMap.\"\n    );\n    const childList = [];\n    let sawIndexedValue = false;\n    const iter = existingChildren.getIterator(NamedNode.Wrap);\n    let next = iter.getNext();\n    while (next) {\n      sawIndexedValue =\n        sawIndexedValue || indexDefinition.isDefinedOn(next.node);\n      childList.push(next);\n      next = iter.getNext();\n    }\n    let newIndex;\n    if (sawIndexedValue) {\n      newIndex = buildChildSet(childList, indexDefinition.getCompare());\n    } else {\n      newIndex = fallbackObject;\n    }\n    const indexName = indexDefinition.toString();\n    const newIndexSet = { ...this.indexSet_ };\n    newIndexSet[indexName] = indexDefinition;\n    const newIndexes = { ...this.indexes_ };\n    newIndexes[indexName] = newIndex;\n    return new IndexMap(newIndexes, newIndexSet);\n  }\n\n  /**\n   * Ensure that this node is properly tracked in any indexes that we're maintaining\n   */\n  addToIndexes(\n    namedNode: NamedNode,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap {\n    const newIndexes = map(\n      this.indexes_,\n      (indexedChildren: SortedMap<NamedNode, Node>, indexName: string) => {\n        const index = safeGet(this.indexSet_, indexName);\n        assert(index, 'Missing index implementation for ' + indexName);\n        if (indexedChildren === fallbackObject) {\n          // Check to see if we need to index everything\n          if (index.isDefinedOn(namedNode.node)) {\n            // We need to build this index\n            const childList = [];\n            const iter = existingChildren.getIterator(NamedNode.Wrap);\n            let next = iter.getNext();\n            while (next) {\n              if (next.name !== namedNode.name) {\n                childList.push(next);\n              }\n              next = iter.getNext();\n            }\n            childList.push(namedNode);\n            return buildChildSet(childList, index.getCompare());\n          } else {\n            // No change, this remains a fallback\n            return fallbackObject;\n          }\n        } else {\n          const existingSnap = existingChildren.get(namedNode.name);\n          let newChildren = indexedChildren;\n          if (existingSnap) {\n            newChildren = newChildren.remove(\n              new NamedNode(namedNode.name, existingSnap)\n            );\n          }\n          return newChildren.insert(namedNode, namedNode.node);\n        }\n      }\n    );\n    return new IndexMap(newIndexes, this.indexSet_);\n  }\n\n  /**\n   * Create a new IndexMap instance with the given value removed\n   */\n  removeFromIndexes(\n    namedNode: NamedNode,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap {\n    const newIndexes = map(\n      this.indexes_,\n      (indexedChildren: SortedMap<NamedNode, Node>) => {\n        if (indexedChildren === fallbackObject) {\n          // This is the fallback. Just return it, nothing to do in this case\n          return indexedChildren;\n        } else {\n          const existingSnap = existingChildren.get(namedNode.name);\n          if (existingSnap) {\n            return indexedChildren.remove(\n              new NamedNode(namedNode.name, existingSnap)\n            );\n          } else {\n            // No record of this child\n            return indexedChildren;\n          }\n        }\n      }\n    );\n    return new IndexMap(newIndexes, this.indexSet_);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Path, pathGetFront, pathGetLength, pathPopFront } from '../util/Path';\nimport { SortedMap, SortedMapIterator } from '../util/SortedMap';\nimport { MAX_NAME, MIN_NAME, sha1 } from '../util/util';\n\nimport { NAME_COMPARATOR } from './comparators';\nimport { Index } from './indexes/Index';\nimport { KEY_INDEX, KeyIndex } from './indexes/KeyIndex';\nimport {\n  PRIORITY_INDEX,\n  setMaxNode as setPriorityMaxNode\n} from './indexes/PriorityIndex';\nimport { IndexMap } from './IndexMap';\nimport { LeafNode } from './LeafNode';\nimport { NamedNode, Node } from './Node';\nimport { priorityHashText, setMaxNode, validatePriorityNode } from './snap';\n\nexport interface ChildrenNodeConstructor {\n  new (\n    children_: SortedMap<string, Node>,\n    priorityNode_: Node | null,\n    indexMap_: IndexMap\n  ): ChildrenNode;\n  EMPTY_NODE: ChildrenNode;\n}\n\n// TODO: For memory savings, don't store priorityNode_ if it's empty.\n\nlet EMPTY_NODE: ChildrenNode;\n\n/**\n * ChildrenNode is a class for storing internal nodes in a DataSnapshot\n * (i.e. nodes with children).  It implements Node and stores the\n * list of children in the children property, sorted by child name.\n */\nexport class ChildrenNode implements Node {\n  private lazyHash_: string | null = null;\n\n  static get EMPTY_NODE(): ChildrenNode {\n    return (\n      EMPTY_NODE ||\n      (EMPTY_NODE = new ChildrenNode(\n        new SortedMap<string, Node>(NAME_COMPARATOR),\n        null,\n        IndexMap.Default\n      ))\n    );\n  }\n\n  /**\n   * @param children_ - List of children of this node..\n   * @param priorityNode_ - The priority of this node (as a snapshot node).\n   */\n  constructor(\n    private readonly children_: SortedMap<string, Node>,\n    private readonly priorityNode_: Node | null,\n    private indexMap_: IndexMap\n  ) {\n    /**\n     * Note: The only reason we allow null priority is for EMPTY_NODE, since we can't use\n     * EMPTY_NODE as the priority of EMPTY_NODE.  We might want to consider making EMPTY_NODE its own\n     * class instead of an empty ChildrenNode.\n     */\n    if (this.priorityNode_) {\n      validatePriorityNode(this.priorityNode_);\n    }\n\n    if (this.children_.isEmpty()) {\n      assert(\n        !this.priorityNode_ || this.priorityNode_.isEmpty(),\n        'An empty node cannot have a priority'\n      );\n    }\n  }\n\n  /** @inheritDoc */\n  isLeafNode(): boolean {\n    return false;\n  }\n\n  /** @inheritDoc */\n  getPriority(): Node {\n    return this.priorityNode_ || EMPTY_NODE;\n  }\n\n  /** @inheritDoc */\n  updatePriority(newPriorityNode: Node): Node {\n    if (this.children_.isEmpty()) {\n      // Don't allow priorities on empty nodes\n      return this;\n    } else {\n      return new ChildrenNode(this.children_, newPriorityNode, this.indexMap_);\n    }\n  }\n\n  /** @inheritDoc */\n  getImmediateChild(childName: string): Node {\n    // Hack to treat priority as a regular child\n    if (childName === '.priority') {\n      return this.getPriority();\n    } else {\n      const child = this.children_.get(childName);\n      return child === null ? EMPTY_NODE : child;\n    }\n  }\n\n  /** @inheritDoc */\n  getChild(path: Path): Node {\n    const front = pathGetFront(path);\n    if (front === null) {\n      return this;\n    }\n\n    return this.getImmediateChild(front).getChild(pathPopFront(path));\n  }\n\n  /** @inheritDoc */\n  hasChild(childName: string): boolean {\n    return this.children_.get(childName) !== null;\n  }\n\n  /** @inheritDoc */\n  updateImmediateChild(childName: string, newChildNode: Node): Node {\n    assert(newChildNode, 'We should always be passing snapshot nodes');\n    if (childName === '.priority') {\n      return this.updatePriority(newChildNode);\n    } else {\n      const namedNode = new NamedNode(childName, newChildNode);\n      let newChildren, newIndexMap;\n      if (newChildNode.isEmpty()) {\n        newChildren = this.children_.remove(childName);\n        newIndexMap = this.indexMap_.removeFromIndexes(\n          namedNode,\n          this.children_\n        );\n      } else {\n        newChildren = this.children_.insert(childName, newChildNode);\n        newIndexMap = this.indexMap_.addToIndexes(namedNode, this.children_);\n      }\n\n      const newPriority = newChildren.isEmpty()\n        ? EMPTY_NODE\n        : this.priorityNode_;\n      return new ChildrenNode(newChildren, newPriority, newIndexMap);\n    }\n  }\n\n  /** @inheritDoc */\n  updateChild(path: Path, newChildNode: Node): Node {\n    const front = pathGetFront(path);\n    if (front === null) {\n      return newChildNode;\n    } else {\n      assert(\n        pathGetFront(path) !== '.priority' || pathGetLength(path) === 1,\n        '.priority must be the last token in a path'\n      );\n      const newImmediateChild = this.getImmediateChild(front).updateChild(\n        pathPopFront(path),\n        newChildNode\n      );\n      return this.updateImmediateChild(front, newImmediateChild);\n    }\n  }\n\n  /** @inheritDoc */\n  isEmpty(): boolean {\n    return this.children_.isEmpty();\n  }\n\n  /** @inheritDoc */\n  numChildren(): number {\n    return this.children_.count();\n  }\n\n  private static INTEGER_REGEXP_ = /^(0|[1-9]\\d*)$/;\n\n  /** @inheritDoc */\n  val(exportFormat?: boolean): object {\n    if (this.isEmpty()) {\n      return null;\n    }\n\n    const obj: { [k: string]: unknown } = {};\n    let numKeys = 0,\n      maxKey = 0,\n      allIntegerKeys = true;\n    this.forEachChild(PRIORITY_INDEX, (key: string, childNode: Node) => {\n      obj[key] = childNode.val(exportFormat);\n\n      numKeys++;\n      if (allIntegerKeys && ChildrenNode.INTEGER_REGEXP_.test(key)) {\n        maxKey = Math.max(maxKey, Number(key));\n      } else {\n        allIntegerKeys = false;\n      }\n    });\n\n    if (!exportFormat && allIntegerKeys && maxKey < 2 * numKeys) {\n      // convert to array.\n      const array: unknown[] = [];\n      // eslint-disable-next-line guard-for-in\n      for (const key in obj) {\n        array[key as unknown as number] = obj[key];\n      }\n\n      return array;\n    } else {\n      if (exportFormat && !this.getPriority().isEmpty()) {\n        obj['.priority'] = this.getPriority().val();\n      }\n      return obj;\n    }\n  }\n\n  /** @inheritDoc */\n  hash(): string {\n    if (this.lazyHash_ === null) {\n      let toHash = '';\n      if (!this.getPriority().isEmpty()) {\n        toHash +=\n          'priority:' +\n          priorityHashText(this.getPriority().val() as string | number) +\n          ':';\n      }\n\n      this.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n        const childHash = childNode.hash();\n        if (childHash !== '') {\n          toHash += ':' + key + ':' + childHash;\n        }\n      });\n\n      this.lazyHash_ = toHash === '' ? '' : sha1(toHash);\n    }\n    return this.lazyHash_;\n  }\n\n  /** @inheritDoc */\n  getPredecessorChildName(\n    childName: string,\n    childNode: Node,\n    index: Index\n  ): string {\n    const idx = this.resolveIndex_(index);\n    if (idx) {\n      const predecessor = idx.getPredecessorKey(\n        new NamedNode(childName, childNode)\n      );\n      return predecessor ? predecessor.name : null;\n    } else {\n      return this.children_.getPredecessorKey(childName);\n    }\n  }\n\n  getFirstChildName(indexDefinition: Index): string | null {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      const minKey = idx.minKey();\n      return minKey && minKey.name;\n    } else {\n      return this.children_.minKey();\n    }\n  }\n\n  getFirstChild(indexDefinition: Index): NamedNode | null {\n    const minKey = this.getFirstChildName(indexDefinition);\n    if (minKey) {\n      return new NamedNode(minKey, this.children_.get(minKey));\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Given an index, return the key name of the largest value we have, according to that index\n   */\n  getLastChildName(indexDefinition: Index): string | null {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      const maxKey = idx.maxKey();\n      return maxKey && maxKey.name;\n    } else {\n      return this.children_.maxKey();\n    }\n  }\n\n  getLastChild(indexDefinition: Index): NamedNode | null {\n    const maxKey = this.getLastChildName(indexDefinition);\n    if (maxKey) {\n      return new NamedNode(maxKey, this.children_.get(maxKey));\n    } else {\n      return null;\n    }\n  }\n  forEachChild(\n    index: Index,\n    action: (key: string, node: Node) => boolean | void\n  ): boolean {\n    const idx = this.resolveIndex_(index);\n    if (idx) {\n      return idx.inorderTraversal(wrappedNode => {\n        return action(wrappedNode.name, wrappedNode.node);\n      });\n    } else {\n      return this.children_.inorderTraversal(action);\n    }\n  }\n\n  getIterator(\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    return this.getIteratorFrom(indexDefinition.minPost(), indexDefinition);\n  }\n\n  getIteratorFrom(\n    startPost: NamedNode,\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      return idx.getIteratorFrom(startPost, key => key);\n    } else {\n      const iterator = this.children_.getIteratorFrom(\n        startPost.name,\n        NamedNode.Wrap\n      );\n      let next = iterator.peek();\n      while (next != null && indexDefinition.compare(next, startPost) < 0) {\n        iterator.getNext();\n        next = iterator.peek();\n      }\n      return iterator;\n    }\n  }\n\n  getReverseIterator(\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    return this.getReverseIteratorFrom(\n      indexDefinition.maxPost(),\n      indexDefinition\n    );\n  }\n\n  getReverseIteratorFrom(\n    endPost: NamedNode,\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      return idx.getReverseIteratorFrom(endPost, key => {\n        return key;\n      });\n    } else {\n      const iterator = this.children_.getReverseIteratorFrom(\n        endPost.name,\n        NamedNode.Wrap\n      );\n      let next = iterator.peek();\n      while (next != null && indexDefinition.compare(next, endPost) > 0) {\n        iterator.getNext();\n        next = iterator.peek();\n      }\n      return iterator;\n    }\n  }\n  compareTo(other: ChildrenNode): number {\n    if (this.isEmpty()) {\n      if (other.isEmpty()) {\n        return 0;\n      } else {\n        return -1;\n      }\n    } else if (other.isLeafNode() || other.isEmpty()) {\n      return 1;\n    } else if (other === MAX_NODE) {\n      return -1;\n    } else {\n      // Must be another node with children.\n      return 0;\n    }\n  }\n  withIndex(indexDefinition: Index): Node {\n    if (\n      indexDefinition === KEY_INDEX ||\n      this.indexMap_.hasIndex(indexDefinition)\n    ) {\n      return this;\n    } else {\n      const newIndexMap = this.indexMap_.addIndex(\n        indexDefinition,\n        this.children_\n      );\n      return new ChildrenNode(this.children_, this.priorityNode_, newIndexMap);\n    }\n  }\n  isIndexed(index: Index): boolean {\n    return index === KEY_INDEX || this.indexMap_.hasIndex(index);\n  }\n  equals(other: Node): boolean {\n    if (other === this) {\n      return true;\n    } else if (other.isLeafNode()) {\n      return false;\n    } else {\n      const otherChildrenNode = other as ChildrenNode;\n      if (!this.getPriority().equals(otherChildrenNode.getPriority())) {\n        return false;\n      } else if (\n        this.children_.count() === otherChildrenNode.children_.count()\n      ) {\n        const thisIter = this.getIterator(PRIORITY_INDEX);\n        const otherIter = otherChildrenNode.getIterator(PRIORITY_INDEX);\n        let thisCurrent = thisIter.getNext();\n        let otherCurrent = otherIter.getNext();\n        while (thisCurrent && otherCurrent) {\n          if (\n            thisCurrent.name !== otherCurrent.name ||\n            !thisCurrent.node.equals(otherCurrent.node)\n          ) {\n            return false;\n          }\n          thisCurrent = thisIter.getNext();\n          otherCurrent = otherIter.getNext();\n        }\n        return thisCurrent === null && otherCurrent === null;\n      } else {\n        return false;\n      }\n    }\n  }\n\n  /**\n   * Returns a SortedMap ordered by index, or null if the default (by-key) ordering can be used\n   * instead.\n   *\n   */\n  private resolveIndex_(\n    indexDefinition: Index\n  ): SortedMap<NamedNode, Node> | null {\n    if (indexDefinition === KEY_INDEX) {\n      return null;\n    } else {\n      return this.indexMap_.get(indexDefinition.toString());\n    }\n  }\n}\n\nexport class MaxNode extends ChildrenNode {\n  constructor() {\n    super(\n      new SortedMap<string, Node>(NAME_COMPARATOR),\n      ChildrenNode.EMPTY_NODE,\n      IndexMap.Default\n    );\n  }\n\n  compareTo(other: Node): number {\n    if (other === this) {\n      return 0;\n    } else {\n      return 1;\n    }\n  }\n\n  equals(other: Node): boolean {\n    // Not that we every compare it, but MAX_NODE is only ever equal to itself\n    return other === this;\n  }\n\n  getPriority(): MaxNode {\n    return this;\n  }\n\n  getImmediateChild(childName: string): ChildrenNode {\n    return ChildrenNode.EMPTY_NODE;\n  }\n\n  isEmpty(): boolean {\n    return false;\n  }\n}\n\n/**\n * Marker that will sort higher than any other snapshot.\n */\nexport const MAX_NODE = new MaxNode();\n\n/**\n * Document NamedNode extensions\n */\ndeclare module './Node' {\n  interface NamedNode {\n    MIN: NamedNode;\n    MAX: NamedNode;\n  }\n}\n\nObject.defineProperties(NamedNode, {\n  MIN: {\n    value: new NamedNode(MIN_NAME, ChildrenNode.EMPTY_NODE)\n  },\n  MAX: {\n    value: new NamedNode(MAX_NAME, MAX_NODE)\n  }\n});\n\n/**\n * Reference Extensions\n */\nKeyIndex.__EMPTY_NODE = ChildrenNode.EMPTY_NODE;\nLeafNode.__childrenNodeConstructor = ChildrenNode;\nsetMaxNode(MAX_NODE);\nsetPriorityMaxNode(MAX_NODE);\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains, assert } from '@firebase/util';\n\nimport { Indexable } from '../util/misc';\nimport { SortedMap } from '../util/SortedMap';\nimport { each } from '../util/util';\n\nimport { ChildrenNode } from './ChildrenNode';\nimport { buildChildSet } from './childSet';\nimport { NAME_COMPARATOR, NAME_ONLY_COMPARATOR } from './comparators';\nimport { PRIORITY_INDEX, setNodeFromJSON } from './indexes/PriorityIndex';\nimport { IndexMap } from './IndexMap';\nimport { LeafNode } from './LeafNode';\nimport { NamedNode, Node } from './Node';\n\nconst USE_HINZE = true;\n\n/**\n * Constructs a snapshot node representing the passed JSON and returns it.\n * @param json - JSON to create a node for.\n * @param priority - Optional priority to use.  This will be ignored if the\n * passed JSON contains a .priority property.\n */\nexport function nodeFromJSON(\n  json: unknown | null,\n  priority: unknown = null\n): Node {\n  if (json === null) {\n    return ChildrenNode.EMPTY_NODE;\n  }\n\n  if (typeof json === 'object' && '.priority' in json) {\n    priority = json['.priority'];\n  }\n\n  assert(\n    priority === null ||\n      typeof priority === 'string' ||\n      typeof priority === 'number' ||\n      (typeof priority === 'object' && '.sv' in (priority as object)),\n    'Invalid priority type found: ' + typeof priority\n  );\n\n  if (typeof json === 'object' && '.value' in json && json['.value'] !== null) {\n    json = json['.value'];\n  }\n\n  // Valid leaf nodes include non-objects or server-value wrapper objects\n  if (typeof json !== 'object' || '.sv' in json) {\n    const jsonLeaf = json as string | number | boolean | Indexable;\n    return new LeafNode(jsonLeaf, nodeFromJSON(priority));\n  }\n\n  if (!(json instanceof Array) && USE_HINZE) {\n    const children: NamedNode[] = [];\n    let childrenHavePriority = false;\n    const hinzeJsonObj = json;\n    each(hinzeJsonObj, (key, child) => {\n      if (key.substring(0, 1) !== '.') {\n        // Ignore metadata nodes\n        const childNode = nodeFromJSON(child);\n        if (!childNode.isEmpty()) {\n          childrenHavePriority =\n            childrenHavePriority || !childNode.getPriority().isEmpty();\n          children.push(new NamedNode(key, childNode));\n        }\n      }\n    });\n\n    if (children.length === 0) {\n      return ChildrenNode.EMPTY_NODE;\n    }\n\n    const childSet = buildChildSet(\n      children,\n      NAME_ONLY_COMPARATOR,\n      namedNode => namedNode.name,\n      NAME_COMPARATOR\n    ) as SortedMap<string, Node>;\n    if (childrenHavePriority) {\n      const sortedChildSet = buildChildSet(\n        children,\n        PRIORITY_INDEX.getCompare()\n      );\n      return new ChildrenNode(\n        childSet,\n        nodeFromJSON(priority),\n        new IndexMap(\n          { '.priority': sortedChildSet },\n          { '.priority': PRIORITY_INDEX }\n        )\n      );\n    } else {\n      return new ChildrenNode(\n        childSet,\n        nodeFromJSON(priority),\n        IndexMap.Default\n      );\n    }\n  } else {\n    let node: Node = ChildrenNode.EMPTY_NODE;\n    each(json, (key: string, childData: unknown) => {\n      if (contains(json as object, key)) {\n        if (key.substring(0, 1) !== '.') {\n          // ignore metadata nodes.\n          const childNode = nodeFromJSON(childData);\n          if (childNode.isLeafNode() || !childNode.isEmpty()) {\n            node = node.updateImmediateChild(key, childNode);\n          }\n        }\n      }\n    });\n\n    return node.updatePriority(nodeFromJSON(priority));\n  }\n}\n\nsetNodeFromJSON(nodeFromJSON);\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Path, pathGetFront, pathIsEmpty, pathSlice } from '../../util/Path';\nimport { MAX_NAME, nameCompare } from '../../util/util';\nimport { ChildrenNode, MAX_NODE } from '../ChildrenNode';\nimport { NamedNode, Node } from '../Node';\nimport { nodeFromJSON } from '../nodeFromJSON';\n\nimport { Index } from './Index';\n\nexport class PathIndex extends Index {\n  constructor(private indexPath_: Path) {\n    super();\n\n    assert(\n      !pathIsEmpty(indexPath_) && pathGetFront(indexPath_) !== '.priority',\n      \"Can't create PathIndex with empty path or .priority key\"\n    );\n  }\n\n  protected extractChild(snap: Node): Node {\n    return snap.getChild(this.indexPath_);\n  }\n  isDefinedOn(node: Node): boolean {\n    return !node.getChild(this.indexPath_).isEmpty();\n  }\n  compare(a: NamedNode, b: NamedNode): number {\n    const aChild = this.extractChild(a.node);\n    const bChild = this.extractChild(b.node);\n    const indexCmp = aChild.compareTo(bChild);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n  makePost(indexValue: object, name: string): NamedNode {\n    const valueNode = nodeFromJSON(indexValue);\n    const node = ChildrenNode.EMPTY_NODE.updateChild(\n      this.indexPath_,\n      valueNode\n    );\n    return new NamedNode(name, node);\n  }\n  maxPost(): NamedNode {\n    const node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, MAX_NODE);\n    return new NamedNode(MAX_NAME, node);\n  }\n  toString(): string {\n    return pathSlice(this.indexPath_, 0).join('/');\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { nameCompare } from '../../util/util';\nimport { NamedNode, Node } from '../Node';\nimport { nodeFromJSON } from '../nodeFromJSON';\n\nimport { Index } from './Index';\n\nexport class ValueIndex extends Index {\n  compare(a: NamedNode, b: NamedNode): number {\n    const indexCmp = a.node.compareTo(b.node);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n  isDefinedOn(node: Node): boolean {\n    return true;\n  }\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return !oldNode.equals(newNode);\n  }\n  minPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n  maxPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MAX;\n  }\n\n  makePost(indexValue: object, name: string): NamedNode {\n    const valueNode = nodeFromJSON(indexValue);\n    return new NamedNode(name, valueNode);\n  }\n\n  /**\n   * @returns String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.value';\n  }\n}\n\nexport const VALUE_INDEX = new ValueIndex();\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport {\n  tryParseInt,\n  MAX_NAME,\n  MIN_NAME,\n  INTEGER_32_MIN,\n  INTEGER_32_MAX\n} from '../util/util';\n\n// Modeled after base64 web-safe chars, but ordered by ASCII.\nconst PUSH_CHARS =\n  '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';\n\nconst MIN_PUSH_CHAR = '-';\n\nconst MAX_PUSH_CHAR = 'z';\n\nconst MAX_KEY_LEN = 786;\n\n/**\n * Fancy ID generator that creates 20-character string identifiers with the\n * following properties:\n *\n * 1. They're based on timestamp so that they sort *after* any existing ids.\n * 2. They contain 72-bits of random data after the timestamp so that IDs won't\n *    collide with other clients' IDs.\n * 3. They sort *lexicographically* (so the timestamp is converted to characters\n *    that will sort properly).\n * 4. They're monotonically increasing. Even if you generate more than one in\n *    the same timestamp, the latter ones will sort after the former ones. We do\n *    this by using the previous random bits but \"incrementing\" them by 1 (only\n *    in the case of a timestamp collision).\n */\nexport const nextPushId = (function () {\n  // Timestamp of last push, used to prevent local collisions if you push twice\n  // in one ms.\n  let lastPushTime = 0;\n\n  // We generate 72-bits of randomness which get turned into 12 characters and\n  // appended to the timestamp to prevent collisions with other clients. We\n  // store the last characters we generated because in the event of a collision,\n  // we'll use those same characters except \"incremented\" by one.\n  const lastRandChars: number[] = [];\n\n  return function (now: number) {\n    const duplicateTime = now === lastPushTime;\n    lastPushTime = now;\n\n    let i;\n    const timeStampChars = new Array(8);\n    for (i = 7; i >= 0; i--) {\n      timeStampChars[i] = PUSH_CHARS.charAt(now % 64);\n      // NOTE: Can't use << here because javascript will convert to int and lose\n      // the upper bits.\n      now = Math.floor(now / 64);\n    }\n    assert(now === 0, 'Cannot push at time == 0');\n\n    let id = timeStampChars.join('');\n\n    if (!duplicateTime) {\n      for (i = 0; i < 12; i++) {\n        lastRandChars[i] = Math.floor(Math.random() * 64);\n      }\n    } else {\n      // If the timestamp hasn't changed since last push, use the same random\n      // number, except incremented by 1.\n      for (i = 11; i >= 0 && lastRandChars[i] === 63; i--) {\n        lastRandChars[i] = 0;\n      }\n      lastRandChars[i]++;\n    }\n    for (i = 0; i < 12; i++) {\n      id += PUSH_CHARS.charAt(lastRandChars[i]);\n    }\n    assert(id.length === 20, 'nextPushId: Length should be 20.');\n\n    return id;\n  };\n})();\n\nexport const successor = function (key: string) {\n  if (key === '' + INTEGER_32_MAX) {\n    // See https://firebase.google.com/docs/database/web/lists-of-data#data-order\n    return MIN_PUSH_CHAR;\n  }\n  const keyAsInt: number = tryParseInt(key);\n  if (keyAsInt != null) {\n    return '' + (keyAsInt + 1);\n  }\n  const next = new Array(key.length);\n\n  for (let i = 0; i < next.length; i++) {\n    next[i] = key.charAt(i);\n  }\n\n  if (next.length < MAX_KEY_LEN) {\n    next.push(MIN_PUSH_CHAR);\n    return next.join('');\n  }\n\n  let i = next.length - 1;\n\n  while (i >= 0 && next[i] === MAX_PUSH_CHAR) {\n    i--;\n  }\n\n  // `successor` was called on the largest possible key, so return the\n  // MAX_NAME, which sorts larger than all keys.\n  if (i === -1) {\n    return MAX_NAME;\n  }\n\n  const source = next[i];\n  const sourcePlusOne = PUSH_CHARS.charAt(PUSH_CHARS.indexOf(source) + 1);\n  next[i] = sourcePlusOne;\n\n  return next.slice(0, i + 1).join('');\n};\n\n// `key` is assumed to be non-empty.\nexport const predecessor = function (key: string) {\n  if (key === '' + INTEGER_32_MIN) {\n    return MIN_NAME;\n  }\n  const keyAsInt: number = tryParseInt(key);\n  if (keyAsInt != null) {\n    return '' + (keyAsInt - 1);\n  }\n  const next = new Array(key.length);\n  for (let i = 0; i < next.length; i++) {\n    next[i] = key.charAt(i);\n  }\n  // If `key` ends in `MIN_PUSH_CHAR`, the largest key lexicographically\n  // smaller than `key`, is `key[0:key.length - 1]`. The next key smaller\n  // than that, `predecessor(predecessor(key))`, is\n  //\n  // `key[0:key.length - 2] + (key[key.length - 1] - 1) + \\\n  //   { MAX_PUSH_CHAR repeated MAX_KEY_LEN - (key.length - 1) times }\n  //\n  // analogous to increment/decrement for base-10 integers.\n  //\n  // This works because lexigographic comparison works character-by-character,\n  // using length as a tie-breaker if one key is a prefix of the other.\n  if (next[next.length - 1] === MIN_PUSH_CHAR) {\n    if (next.length === 1) {\n      // See https://firebase.google.com/docs/database/web/lists-of-data#orderbykey\n      return '' + INTEGER_32_MAX;\n    }\n    delete next[next.length - 1];\n    return next.join('');\n  }\n  // Replace the last character with it's immediate predecessor, and\n  // fill the suffix of the key with MAX_PUSH_CHAR. This is the\n  // lexicographically largest possible key smaller than `key`.\n  next[next.length - 1] = PUSH_CHARS.charAt(\n    PUSH_CHARS.indexOf(next[next.length - 1]) - 1\n  );\n  return next.join('') + MAX_PUSH_CHAR.repeat(MAX_KEY_LEN - next.length);\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\n\nexport const enum ChangeType {\n  /** Event type for a child added */\n  CHILD_ADDED = 'child_added',\n  /** Event type for a child removed */\n  CHILD_REMOVED = 'child_removed',\n  /** Event type for a child changed */\n  CHILD_CHANGED = 'child_changed',\n  /** Event type for a child moved */\n  CHILD_MOVED = 'child_moved',\n  /** Event type for a value change */\n  VALUE = 'value'\n}\n\nexport interface Change {\n  /** @param type - The event type */\n  type: ChangeType;\n  /** @param snapshotNode - The data */\n  snapshotNode: Node;\n  /** @param childName - The name for this child, if it's a child even */\n  childName?: string;\n  /** @param oldSnap - Used for intermediate processing of child changed events */\n  oldSnap?: Node;\n  /**  * @param prevName - The name for the previous child, if applicable */\n  prevName?: string | null;\n}\n\nexport function changeValue(snapshotNode: Node): Change {\n  return { type: ChangeType.VALUE, snapshotNode };\n}\n\nexport function changeChildAdded(\n  childName: string,\n  snapshotNode: Node\n): Change {\n  return { type: ChangeType.CHILD_ADDED, snapshotNode, childName };\n}\n\nexport function changeChildRemoved(\n  childName: string,\n  snapshotNode: Node\n): Change {\n  return { type: ChangeType.CHILD_REMOVED, snapshotNode, childName };\n}\n\nexport function changeChildChanged(\n  childName: string,\n  snapshotNode: Node,\n  oldSnap: Node\n): Change {\n  return {\n    type: ChangeType.CHILD_CHANGED,\n    snapshotNode,\n    childName,\n    oldSnap\n  };\n}\n\nexport function changeChildMoved(\n  childName: string,\n  snapshotNode: Node\n): Change {\n  return { type: ChangeType.CHILD_MOVED, snapshotNode, childName };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ChildrenNode } from '../../snap/ChildrenNode';\nimport { Index } from '../../snap/indexes/Index';\nimport { PRIORITY_INDEX } from '../../snap/indexes/PriorityIndex';\nimport { Node } from '../../snap/Node';\nimport { Path } from '../../util/Path';\nimport {\n  changeChildAdded,\n  changeChildChanged,\n  changeChildRemoved\n} from '../Change';\nimport { ChildChangeAccumulator } from '../ChildChangeAccumulator';\nimport { CompleteChildSource } from '../CompleteChildSource';\n\nimport { NodeFilter } from './NodeFilter';\n\n/**\n * Doesn't really filter nodes but applies an index to the node and keeps track of any changes\n */\nexport class IndexedFilter implements NodeFilter {\n  constructor(private readonly index_: Index) {}\n\n  updateChild(\n    snap: Node,\n    key: string,\n    newChild: Node,\n    affectedPath: Path,\n    source: CompleteChildSource,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    assert(\n      snap.isIndexed(this.index_),\n      'A node must be indexed if only a child is updated'\n    );\n    const oldChild = snap.getImmediateChild(key);\n    // Check if anything actually changed.\n    if (\n      oldChild.getChild(affectedPath).equals(newChild.getChild(affectedPath))\n    ) {\n      // There's an edge case where a child can enter or leave the view because affectedPath was set to null.\n      // In this case, affectedPath will appear null in both the old and new snapshots.  So we need\n      // to avoid treating these cases as \"nothing changed.\"\n      if (oldChild.isEmpty() === newChild.isEmpty()) {\n        // Nothing changed.\n\n        // This assert should be valid, but it's expensive (can dominate perf testing) so don't actually do it.\n        //assert(oldChild.equals(newChild), 'Old and new snapshots should be equal.');\n        return snap;\n      }\n    }\n\n    if (optChangeAccumulator != null) {\n      if (newChild.isEmpty()) {\n        if (snap.hasChild(key)) {\n          optChangeAccumulator.trackChildChange(\n            changeChildRemoved(key, oldChild)\n          );\n        } else {\n          assert(\n            snap.isLeafNode(),\n            'A child remove without an old child only makes sense on a leaf node'\n          );\n        }\n      } else if (oldChild.isEmpty()) {\n        optChangeAccumulator.trackChildChange(changeChildAdded(key, newChild));\n      } else {\n        optChangeAccumulator.trackChildChange(\n          changeChildChanged(key, newChild, oldChild)\n        );\n      }\n    }\n    if (snap.isLeafNode() && newChild.isEmpty()) {\n      return snap;\n    } else {\n      // Make sure the node is indexed\n      return snap.updateImmediateChild(key, newChild).withIndex(this.index_);\n    }\n  }\n  updateFullNode(\n    oldSnap: Node,\n    newSnap: Node,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (optChangeAccumulator != null) {\n      if (!oldSnap.isLeafNode()) {\n        oldSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n          if (!newSnap.hasChild(key)) {\n            optChangeAccumulator.trackChildChange(\n              changeChildRemoved(key, childNode)\n            );\n          }\n        });\n      }\n      if (!newSnap.isLeafNode()) {\n        newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n          if (oldSnap.hasChild(key)) {\n            const oldChild = oldSnap.getImmediateChild(key);\n            if (!oldChild.equals(childNode)) {\n              optChangeAccumulator.trackChildChange(\n                changeChildChanged(key, childNode, oldChild)\n              );\n            }\n          } else {\n            optChangeAccumulator.trackChildChange(\n              changeChildAdded(key, childNode)\n            );\n          }\n        });\n      }\n    }\n    return newSnap.withIndex(this.index_);\n  }\n  updatePriority(oldSnap: Node, newPriority: Node): Node {\n    if (oldSnap.isEmpty()) {\n      return ChildrenNode.EMPTY_NODE;\n    } else {\n      return oldSnap.updatePriority(newPriority);\n    }\n  }\n  filtersNodes(): boolean {\n    return false;\n  }\n  getIndexedFilter(): IndexedFilter {\n    return this;\n  }\n  getIndex(): Index {\n    return this.index_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NamedNode, Node } from '../../../core/snap/Node';\nimport { ChildrenNode } from '../../snap/ChildrenNode';\nimport { Index } from '../../snap/indexes/Index';\nimport { PRIORITY_INDEX } from '../../snap/indexes/PriorityIndex';\nimport { Path } from '../../util/Path';\nimport { ChildChangeAccumulator } from '../ChildChangeAccumulator';\nimport { CompleteChildSource } from '../CompleteChildSource';\nimport { QueryParams } from '../QueryParams';\n\nimport { IndexedFilter } from './IndexedFilter';\nimport { NodeFilter } from './NodeFilter';\n\n/**\n * Filters nodes by range and uses an IndexFilter to track any changes after filtering the node\n */\nexport class RangedFilter implements NodeFilter {\n  private indexedFilter_: IndexedFilter;\n\n  private index_: Index;\n\n  private startPost_: NamedNode;\n\n  private endPost_: NamedNode;\n\n  constructor(params: QueryParams) {\n    this.indexedFilter_ = new IndexedFilter(params.getIndex());\n    this.index_ = params.getIndex();\n    this.startPost_ = RangedFilter.getStartPost_(params);\n    this.endPost_ = RangedFilter.getEndPost_(params);\n  }\n\n  getStartPost(): NamedNode {\n    return this.startPost_;\n  }\n\n  getEndPost(): NamedNode {\n    return this.endPost_;\n  }\n\n  matches(node: NamedNode): boolean {\n    return (\n      this.index_.compare(this.getStartPost(), node) <= 0 &&\n      this.index_.compare(node, this.getEndPost()) <= 0\n    );\n  }\n  updateChild(\n    snap: Node,\n    key: string,\n    newChild: Node,\n    affectedPath: Path,\n    source: CompleteChildSource,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (!this.matches(new NamedNode(key, newChild))) {\n      newChild = ChildrenNode.EMPTY_NODE;\n    }\n    return this.indexedFilter_.updateChild(\n      snap,\n      key,\n      newChild,\n      affectedPath,\n      source,\n      optChangeAccumulator\n    );\n  }\n  updateFullNode(\n    oldSnap: Node,\n    newSnap: Node,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (newSnap.isLeafNode()) {\n      // Make sure we have a children node with the correct index, not a leaf node;\n      newSnap = ChildrenNode.EMPTY_NODE;\n    }\n    let filtered = newSnap.withIndex(this.index_);\n    // Don't support priorities on queries\n    filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\n    const self = this;\n    newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n      if (!self.matches(new NamedNode(key, childNode))) {\n        filtered = filtered.updateImmediateChild(key, ChildrenNode.EMPTY_NODE);\n      }\n    });\n    return this.indexedFilter_.updateFullNode(\n      oldSnap,\n      filtered,\n      optChangeAccumulator\n    );\n  }\n  updatePriority(oldSnap: Node, newPriority: Node): Node {\n    // Don't support priorities on queries\n    return oldSnap;\n  }\n  filtersNodes(): boolean {\n    return true;\n  }\n  getIndexedFilter(): IndexedFilter {\n    return this.indexedFilter_;\n  }\n  getIndex(): Index {\n    return this.index_;\n  }\n\n  private static getStartPost_(params: QueryParams): NamedNode {\n    if (params.hasStart()) {\n      const startName = params.getIndexStartName();\n      return params.getIndex().makePost(params.getIndexStartValue(), startName);\n    } else {\n      return params.getIndex().minPost();\n    }\n  }\n\n  private static getEndPost_(params: QueryParams): NamedNode {\n    if (params.hasEnd()) {\n      const endName = params.getIndexEndName();\n      return params.getIndex().makePost(params.getIndexEndValue(), endName);\n    } else {\n      return params.getIndex().maxPost();\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ChildrenNode } from '../../snap/ChildrenNode';\nimport { Index } from '../../snap/indexes/Index';\nimport { NamedNode, Node } from '../../snap/Node';\nimport { Path } from '../../util/Path';\nimport {\n  changeChildAdded,\n  changeChildChanged,\n  changeChildRemoved\n} from '../Change';\nimport { ChildChangeAccumulator } from '../ChildChangeAccumulator';\nimport { CompleteChildSource } from '../CompleteChildSource';\nimport { QueryParams } from '../QueryParams';\n\nimport { IndexedFilter } from './IndexedFilter';\nimport { NodeFilter } from './NodeFilter';\nimport { RangedFilter } from './RangedFilter';\n\n/**\n * Applies a limit and a range to a node and uses RangedFilter to do the heavy lifting where possible\n */\nexport class LimitedFilter implements NodeFilter {\n  private readonly rangedFilter_: RangedFilter;\n\n  private readonly index_: Index;\n\n  private readonly limit_: number;\n\n  private readonly reverse_: boolean;\n\n  constructor(params: QueryParams) {\n    this.rangedFilter_ = new RangedFilter(params);\n    this.index_ = params.getIndex();\n    this.limit_ = params.getLimit();\n    this.reverse_ = !params.isViewFromLeft();\n  }\n  updateChild(\n    snap: Node,\n    key: string,\n    newChild: Node,\n    affectedPath: Path,\n    source: CompleteChildSource,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (!this.rangedFilter_.matches(new NamedNode(key, newChild))) {\n      newChild = ChildrenNode.EMPTY_NODE;\n    }\n    if (snap.getImmediateChild(key).equals(newChild)) {\n      // No change\n      return snap;\n    } else if (snap.numChildren() < this.limit_) {\n      return this.rangedFilter_\n        .getIndexedFilter()\n        .updateChild(\n          snap,\n          key,\n          newChild,\n          affectedPath,\n          source,\n          optChangeAccumulator\n        );\n    } else {\n      return this.fullLimitUpdateChild_(\n        snap,\n        key,\n        newChild,\n        source,\n        optChangeAccumulator\n      );\n    }\n  }\n  updateFullNode(\n    oldSnap: Node,\n    newSnap: Node,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    let filtered;\n    if (newSnap.isLeafNode() || newSnap.isEmpty()) {\n      // Make sure we have a children node with the correct index, not a leaf node;\n      filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\n    } else {\n      if (\n        this.limit_ * 2 < newSnap.numChildren() &&\n        newSnap.isIndexed(this.index_)\n      ) {\n        // Easier to build up a snapshot, since what we're given has more than twice the elements we want\n        filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\n        // anchor to the startPost, endPost, or last element as appropriate\n        let iterator;\n        if (this.reverse_) {\n          iterator = (newSnap as ChildrenNode).getReverseIteratorFrom(\n            this.rangedFilter_.getEndPost(),\n            this.index_\n          );\n        } else {\n          iterator = (newSnap as ChildrenNode).getIteratorFrom(\n            this.rangedFilter_.getStartPost(),\n            this.index_\n          );\n        }\n        let count = 0;\n        while (iterator.hasNext() && count < this.limit_) {\n          const next = iterator.getNext();\n          let inRange;\n          if (this.reverse_) {\n            inRange =\n              this.index_.compare(this.rangedFilter_.getStartPost(), next) <= 0;\n          } else {\n            inRange =\n              this.index_.compare(next, this.rangedFilter_.getEndPost()) <= 0;\n          }\n          if (inRange) {\n            filtered = filtered.updateImmediateChild(next.name, next.node);\n            count++;\n          } else {\n            // if we have reached the end post, we cannot keep adding elemments\n            break;\n          }\n        }\n      } else {\n        // The snap contains less than twice the limit. Faster to delete from the snap than build up a new one\n        filtered = newSnap.withIndex(this.index_);\n        // Don't support priorities on queries\n        filtered = filtered.updatePriority(\n          ChildrenNode.EMPTY_NODE\n        ) as ChildrenNode;\n        let startPost;\n        let endPost;\n        let cmp;\n        let iterator;\n        if (this.reverse_) {\n          iterator = filtered.getReverseIterator(this.index_);\n          startPost = this.rangedFilter_.getEndPost();\n          endPost = this.rangedFilter_.getStartPost();\n          const indexCompare = this.index_.getCompare();\n          cmp = (a: NamedNode, b: NamedNode) => indexCompare(b, a);\n        } else {\n          iterator = filtered.getIterator(this.index_);\n          startPost = this.rangedFilter_.getStartPost();\n          endPost = this.rangedFilter_.getEndPost();\n          cmp = this.index_.getCompare();\n        }\n\n        let count = 0;\n        let foundStartPost = false;\n        while (iterator.hasNext()) {\n          const next = iterator.getNext();\n          if (!foundStartPost && cmp(startPost, next) <= 0) {\n            // start adding\n            foundStartPost = true;\n          }\n          const inRange =\n            foundStartPost && count < this.limit_ && cmp(next, endPost) <= 0;\n          if (inRange) {\n            count++;\n          } else {\n            filtered = filtered.updateImmediateChild(\n              next.name,\n              ChildrenNode.EMPTY_NODE\n            );\n          }\n        }\n      }\n    }\n    return this.rangedFilter_\n      .getIndexedFilter()\n      .updateFullNode(oldSnap, filtered, optChangeAccumulator);\n  }\n  updatePriority(oldSnap: Node, newPriority: Node): Node {\n    // Don't support priorities on queries\n    return oldSnap;\n  }\n  filtersNodes(): boolean {\n    return true;\n  }\n  getIndexedFilter(): IndexedFilter {\n    return this.rangedFilter_.getIndexedFilter();\n  }\n  getIndex(): Index {\n    return this.index_;\n  }\n\n  private fullLimitUpdateChild_(\n    snap: Node,\n    childKey: string,\n    childSnap: Node,\n    source: CompleteChildSource,\n    changeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    // TODO: rename all cache stuff etc to general snap terminology\n    let cmp;\n    if (this.reverse_) {\n      const indexCmp = this.index_.getCompare();\n      cmp = (a: NamedNode, b: NamedNode) => indexCmp(b, a);\n    } else {\n      cmp = this.index_.getCompare();\n    }\n    const oldEventCache = snap as ChildrenNode;\n    assert(oldEventCache.numChildren() === this.limit_, '');\n    const newChildNamedNode = new NamedNode(childKey, childSnap);\n    const windowBoundary = this.reverse_\n      ? oldEventCache.getFirstChild(this.index_)\n      : (oldEventCache.getLastChild(this.index_) as NamedNode);\n    const inRange = this.rangedFilter_.matches(newChildNamedNode);\n    if (oldEventCache.hasChild(childKey)) {\n      const oldChildSnap = oldEventCache.getImmediateChild(childKey);\n      let nextChild = source.getChildAfterChild(\n        this.index_,\n        windowBoundary,\n        this.reverse_\n      );\n      while (\n        nextChild != null &&\n        (nextChild.name === childKey || oldEventCache.hasChild(nextChild.name))\n      ) {\n        // There is a weird edge case where a node is updated as part of a merge in the write tree, but hasn't\n        // been applied to the limited filter yet. Ignore this next child which will be updated later in\n        // the limited filter...\n        nextChild = source.getChildAfterChild(\n          this.index_,\n          nextChild,\n          this.reverse_\n        );\n      }\n      const compareNext =\n        nextChild == null ? 1 : cmp(nextChild, newChildNamedNode);\n      const remainsInWindow =\n        inRange && !childSnap.isEmpty() && compareNext >= 0;\n      if (remainsInWindow) {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(\n            changeChildChanged(childKey, childSnap, oldChildSnap)\n          );\n        }\n        return oldEventCache.updateImmediateChild(childKey, childSnap);\n      } else {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(\n            changeChildRemoved(childKey, oldChildSnap)\n          );\n        }\n        const newEventCache = oldEventCache.updateImmediateChild(\n          childKey,\n          ChildrenNode.EMPTY_NODE\n        );\n        const nextChildInRange =\n          nextChild != null && this.rangedFilter_.matches(nextChild);\n        if (nextChildInRange) {\n          if (changeAccumulator != null) {\n            changeAccumulator.trackChildChange(\n              changeChildAdded(nextChild.name, nextChild.node)\n            );\n          }\n          return newEventCache.updateImmediateChild(\n            nextChild.name,\n            nextChild.node\n          );\n        } else {\n          return newEventCache;\n        }\n      }\n    } else if (childSnap.isEmpty()) {\n      // we're deleting a node, but it was not in the window, so ignore it\n      return snap;\n    } else if (inRange) {\n      if (cmp(windowBoundary, newChildNamedNode) >= 0) {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(\n            changeChildRemoved(windowBoundary.name, windowBoundary.node)\n          );\n          changeAccumulator.trackChildChange(\n            changeChildAdded(childKey, childSnap)\n          );\n        }\n        return oldEventCache\n          .updateImmediateChild(childKey, childSnap)\n          .updateImmediateChild(windowBoundary.name, ChildrenNode.EMPTY_NODE);\n      } else {\n        return snap;\n      }\n    } else {\n      return snap;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, stringify } from '@firebase/util';\n\nimport { Index } from '../snap/indexes/Index';\nimport { KEY_INDEX } from '../snap/indexes/KeyIndex';\nimport { PathIndex } from '../snap/indexes/PathIndex';\nimport { PRIORITY_INDEX, PriorityIndex } from '../snap/indexes/PriorityIndex';\nimport { VALUE_INDEX } from '../snap/indexes/ValueIndex';\nimport { predecessor, successor } from '../util/NextPushId';\nimport { MAX_NAME, MIN_NAME } from '../util/util';\n\nimport { IndexedFilter } from './filter/IndexedFilter';\nimport { LimitedFilter } from './filter/LimitedFilter';\nimport { NodeFilter } from './filter/NodeFilter';\nimport { RangedFilter } from './filter/RangedFilter';\n\n/**\n * Wire Protocol Constants\n */\nconst enum WIRE_PROTOCOL_CONSTANTS {\n  INDEX_START_VALUE = 'sp',\n  INDEX_START_NAME = 'sn',\n  INDEX_END_VALUE = 'ep',\n  INDEX_END_NAME = 'en',\n  LIMIT = 'l',\n  VIEW_FROM = 'vf',\n  VIEW_FROM_LEFT = 'l',\n  VIEW_FROM_RIGHT = 'r',\n  INDEX = 'i'\n}\n\n/**\n * REST Query Constants\n */\nconst enum REST_QUERY_CONSTANTS {\n  ORDER_BY = 'orderBy',\n  PRIORITY_INDEX = '$priority',\n  VALUE_INDEX = '$value',\n  KEY_INDEX = '$key',\n  START_AT = 'startAt',\n  END_AT = 'endAt',\n  LIMIT_TO_FIRST = 'limitToFirst',\n  LIMIT_TO_LAST = 'limitToLast'\n}\n\n/**\n * This class is an immutable-from-the-public-api struct containing a set of query parameters defining a\n * range to be returned for a particular location. It is assumed that validation of parameters is done at the\n * user-facing API level, so it is not done here.\n *\n * @internal\n */\nexport class QueryParams {\n  limitSet_ = false;\n  startSet_ = false;\n  startNameSet_ = false;\n  startAfterSet_ = false;\n  endSet_ = false;\n  endNameSet_ = false;\n  endBeforeSet_ = false;\n  limit_ = 0;\n  viewFrom_ = '';\n  indexStartValue_: unknown | null = null;\n  indexStartName_ = '';\n  indexEndValue_: unknown | null = null;\n  indexEndName_ = '';\n  index_: PriorityIndex = PRIORITY_INDEX;\n\n  hasStart(): boolean {\n    return this.startSet_;\n  }\n\n  hasStartAfter(): boolean {\n    return this.startAfterSet_;\n  }\n\n  hasEndBefore(): boolean {\n    return this.endBeforeSet_;\n  }\n\n  /**\n   * @returns True if it would return from left.\n   */\n  isViewFromLeft(): boolean {\n    if (this.viewFrom_ === '') {\n      // limit(), rather than limitToFirst or limitToLast was called.\n      // This means that only one of startSet_ and endSet_ is true. Use them\n      // to calculate which side of the view to anchor to. If neither is set,\n      // anchor to the end.\n      return this.startSet_;\n    } else {\n      return this.viewFrom_ === WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\n    }\n  }\n\n  /**\n   * Only valid to call if hasStart() returns true\n   */\n  getIndexStartValue(): unknown {\n    assert(this.startSet_, 'Only valid if start has been set');\n    return this.indexStartValue_;\n  }\n\n  /**\n   * Only valid to call if hasStart() returns true.\n   * Returns the starting key name for the range defined by these query parameters\n   */\n  getIndexStartName(): string {\n    assert(this.startSet_, 'Only valid if start has been set');\n    if (this.startNameSet_) {\n      return this.indexStartName_;\n    } else {\n      return MIN_NAME;\n    }\n  }\n\n  hasEnd(): boolean {\n    return this.endSet_;\n  }\n\n  /**\n   * Only valid to call if hasEnd() returns true.\n   */\n  getIndexEndValue(): unknown {\n    assert(this.endSet_, 'Only valid if end has been set');\n    return this.indexEndValue_;\n  }\n\n  /**\n   * Only valid to call if hasEnd() returns true.\n   * Returns the end key name for the range defined by these query parameters\n   */\n  getIndexEndName(): string {\n    assert(this.endSet_, 'Only valid if end has been set');\n    if (this.endNameSet_) {\n      return this.indexEndName_;\n    } else {\n      return MAX_NAME;\n    }\n  }\n\n  hasLimit(): boolean {\n    return this.limitSet_;\n  }\n\n  /**\n   * @returns True if a limit has been set and it has been explicitly anchored\n   */\n  hasAnchoredLimit(): boolean {\n    return this.limitSet_ && this.viewFrom_ !== '';\n  }\n\n  /**\n   * Only valid to call if hasLimit() returns true\n   */\n  getLimit(): number {\n    assert(this.limitSet_, 'Only valid if limit has been set');\n    return this.limit_;\n  }\n\n  getIndex(): Index {\n    return this.index_;\n  }\n\n  loadsAllData(): boolean {\n    return !(this.startSet_ || this.endSet_ || this.limitSet_);\n  }\n\n  isDefault(): boolean {\n    return this.loadsAllData() && this.index_ === PRIORITY_INDEX;\n  }\n\n  copy(): QueryParams {\n    const copy = new QueryParams();\n    copy.limitSet_ = this.limitSet_;\n    copy.limit_ = this.limit_;\n    copy.startSet_ = this.startSet_;\n    copy.indexStartValue_ = this.indexStartValue_;\n    copy.startNameSet_ = this.startNameSet_;\n    copy.indexStartName_ = this.indexStartName_;\n    copy.endSet_ = this.endSet_;\n    copy.indexEndValue_ = this.indexEndValue_;\n    copy.endNameSet_ = this.endNameSet_;\n    copy.indexEndName_ = this.indexEndName_;\n    copy.index_ = this.index_;\n    copy.viewFrom_ = this.viewFrom_;\n    return copy;\n  }\n}\n\nexport function queryParamsGetNodeFilter(queryParams: QueryParams): NodeFilter {\n  if (queryParams.loadsAllData()) {\n    return new IndexedFilter(queryParams.getIndex());\n  } else if (queryParams.hasLimit()) {\n    return new LimitedFilter(queryParams);\n  } else {\n    return new RangedFilter(queryParams);\n  }\n}\n\nexport function queryParamsLimit(\n  queryParams: QueryParams,\n  newLimit: number\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.limitSet_ = true;\n  newParams.limit_ = newLimit;\n  newParams.viewFrom_ = '';\n  return newParams;\n}\n\nexport function queryParamsLimitToFirst(\n  queryParams: QueryParams,\n  newLimit: number\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.limitSet_ = true;\n  newParams.limit_ = newLimit;\n  newParams.viewFrom_ = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\n  return newParams;\n}\n\nexport function queryParamsLimitToLast(\n  queryParams: QueryParams,\n  newLimit: number\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.limitSet_ = true;\n  newParams.limit_ = newLimit;\n  newParams.viewFrom_ = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT;\n  return newParams;\n}\n\nexport function queryParamsStartAt(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.startSet_ = true;\n  if (indexValue === undefined) {\n    indexValue = null;\n  }\n  newParams.indexStartValue_ = indexValue;\n  if (key != null) {\n    newParams.startNameSet_ = true;\n    newParams.indexStartName_ = key;\n  } else {\n    newParams.startNameSet_ = false;\n    newParams.indexStartName_ = '';\n  }\n  return newParams;\n}\n\nexport function queryParamsStartAfter(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams {\n  let params: QueryParams;\n  if (queryParams.index_ === KEY_INDEX) {\n    if (typeof indexValue === 'string') {\n      indexValue = successor(indexValue as string);\n    }\n    params = queryParamsStartAt(queryParams, indexValue, key);\n  } else {\n    let childKey: string;\n    if (key == null) {\n      childKey = MAX_NAME;\n    } else {\n      childKey = successor(key);\n    }\n    params = queryParamsStartAt(queryParams, indexValue, childKey);\n  }\n  params.startAfterSet_ = true;\n  return params;\n}\n\nexport function queryParamsEndAt(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.endSet_ = true;\n  if (indexValue === undefined) {\n    indexValue = null;\n  }\n  newParams.indexEndValue_ = indexValue;\n  if (key !== undefined) {\n    newParams.endNameSet_ = true;\n    newParams.indexEndName_ = key;\n  } else {\n    newParams.endNameSet_ = false;\n    newParams.indexEndName_ = '';\n  }\n  return newParams;\n}\n\nexport function queryParamsEndBefore(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams {\n  let childKey: string;\n  let params: QueryParams;\n  if (queryParams.index_ === KEY_INDEX) {\n    if (typeof indexValue === 'string') {\n      indexValue = predecessor(indexValue as string);\n    }\n    params = queryParamsEndAt(queryParams, indexValue, key);\n  } else {\n    if (key == null) {\n      childKey = MIN_NAME;\n    } else {\n      childKey = predecessor(key);\n    }\n    params = queryParamsEndAt(queryParams, indexValue, childKey);\n  }\n  params.endBeforeSet_ = true;\n  return params;\n}\n\nexport function queryParamsOrderBy(\n  queryParams: QueryParams,\n  index: Index\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.index_ = index;\n  return newParams;\n}\n\n/**\n * Returns a set of REST query string parameters representing this query.\n *\n * @returns query string parameters\n */\nexport function queryParamsToRestQueryStringParameters(\n  queryParams: QueryParams\n): Record<string, string | number> {\n  const qs: Record<string, string | number> = {};\n\n  if (queryParams.isDefault()) {\n    return qs;\n  }\n\n  let orderBy;\n  if (queryParams.index_ === PRIORITY_INDEX) {\n    orderBy = REST_QUERY_CONSTANTS.PRIORITY_INDEX;\n  } else if (queryParams.index_ === VALUE_INDEX) {\n    orderBy = REST_QUERY_CONSTANTS.VALUE_INDEX;\n  } else if (queryParams.index_ === KEY_INDEX) {\n    orderBy = REST_QUERY_CONSTANTS.KEY_INDEX;\n  } else {\n    assert(queryParams.index_ instanceof PathIndex, 'Unrecognized index type!');\n    orderBy = queryParams.index_.toString();\n  }\n  qs[REST_QUERY_CONSTANTS.ORDER_BY] = stringify(orderBy);\n\n  if (queryParams.startSet_) {\n    qs[REST_QUERY_CONSTANTS.START_AT] = stringify(queryParams.indexStartValue_);\n    if (queryParams.startNameSet_) {\n      qs[REST_QUERY_CONSTANTS.START_AT] +=\n        ',' + stringify(queryParams.indexStartName_);\n    }\n  }\n\n  if (queryParams.endSet_) {\n    qs[REST_QUERY_CONSTANTS.END_AT] = stringify(queryParams.indexEndValue_);\n    if (queryParams.endNameSet_) {\n      qs[REST_QUERY_CONSTANTS.END_AT] +=\n        ',' + stringify(queryParams.indexEndName_);\n    }\n  }\n\n  if (queryParams.limitSet_) {\n    if (queryParams.isViewFromLeft()) {\n      qs[REST_QUERY_CONSTANTS.LIMIT_TO_FIRST] = queryParams.limit_;\n    } else {\n      qs[REST_QUERY_CONSTANTS.LIMIT_TO_LAST] = queryParams.limit_;\n    }\n  }\n\n  return qs;\n}\n\nexport function queryParamsGetQueryObject(\n  queryParams: QueryParams\n): Record<string, unknown> {\n  const obj: Record<string, unknown> = {};\n  if (queryParams.startSet_) {\n    obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_VALUE] =\n      queryParams.indexStartValue_;\n    if (queryParams.startNameSet_) {\n      obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_NAME] =\n        queryParams.indexStartName_;\n    }\n  }\n  if (queryParams.endSet_) {\n    obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_VALUE] = queryParams.indexEndValue_;\n    if (queryParams.endNameSet_) {\n      obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_NAME] = queryParams.indexEndName_;\n    }\n  }\n  if (queryParams.limitSet_) {\n    obj[WIRE_PROTOCOL_CONSTANTS.LIMIT] = queryParams.limit_;\n    let viewFrom = queryParams.viewFrom_;\n    if (viewFrom === '') {\n      if (queryParams.isViewFromLeft()) {\n        viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\n      } else {\n        viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT;\n      }\n    }\n    obj[WIRE_PROTOCOL_CONSTANTS.VIEW_FROM] = viewFrom;\n  }\n  // For now, priority index is the default, so we only specify if it's some other index\n  if (queryParams.index_ !== PRIORITY_INDEX) {\n    obj[WIRE_PROTOCOL_CONSTANTS.INDEX] = queryParams.index_.toString();\n  }\n  return obj;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  jsonEval,\n  safeGet,\n  querystring,\n  Deferred\n} from '@firebase/util';\n\nimport { AppCheckTokenProvider } from './AppCheckTokenProvider';\nimport { AuthTokenProvider } from './AuthTokenProvider';\nimport { RepoInfo } from './RepoInfo';\nimport { ServerActions } from './ServerActions';\nimport { logWrapper, warn } from './util/util';\nimport { QueryContext } from './view/EventRegistration';\nimport { queryParamsToRestQueryStringParameters } from './view/QueryParams';\n\n/**\n * An implementation of ServerActions that communicates with the server via REST requests.\n * This is mostly useful for compatibility with crawlers, where we don't want to spin up a full\n * persistent connection (using WebSockets or long-polling)\n */\nexport class ReadonlyRestClient extends ServerActions {\n  reportStats(stats: { [k: string]: unknown }): void {\n    throw new Error('Method not implemented.');\n  }\n\n  /** @private {function(...[*])} */\n  private log_: (...args: unknown[]) => void = logWrapper('p:rest:');\n\n  /**\n   * We don't actually need to track listens, except to prevent us calling an onComplete for a listen\n   * that's been removed. :-/\n   */\n  private listens_: { [k: string]: object } = {};\n\n  static getListenId_(query: QueryContext, tag?: number | null): string {\n    if (tag !== undefined) {\n      return 'tag$' + tag;\n    } else {\n      assert(\n        query._queryParams.isDefault(),\n        \"should have a tag if it's not a default query.\"\n      );\n      return query._path.toString();\n    }\n  }\n\n  /**\n   * @param repoInfo_ - Data about the namespace we are connecting to\n   * @param onDataUpdate_ - A callback for new data from the server\n   */\n  constructor(\n    private repoInfo_: RepoInfo,\n    private onDataUpdate_: (\n      a: string,\n      b: unknown,\n      c: boolean,\n      d: number | null\n    ) => void,\n    private authTokenProvider_: AuthTokenProvider,\n    private appCheckTokenProvider_: AppCheckTokenProvider\n  ) {\n    super();\n  }\n\n  /** @inheritDoc */\n  listen(\n    query: QueryContext,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: unknown) => void\n  ) {\n    const pathString = query._path.toString();\n    this.log_('Listen called for ' + pathString + ' ' + query._queryIdentifier);\n\n    // Mark this listener so we can tell if it's removed.\n    const listenId = ReadonlyRestClient.getListenId_(query, tag);\n    const thisListen = {};\n    this.listens_[listenId] = thisListen;\n\n    const queryStringParameters = queryParamsToRestQueryStringParameters(\n      query._queryParams\n    );\n\n    this.restRequest_(\n      pathString + '.json',\n      queryStringParameters,\n      (error, result) => {\n        let data = result;\n\n        if (error === 404) {\n          data = null;\n          error = null;\n        }\n\n        if (error === null) {\n          this.onDataUpdate_(pathString, data, /*isMerge=*/ false, tag);\n        }\n\n        if (safeGet(this.listens_, listenId) === thisListen) {\n          let status;\n          if (!error) {\n            status = 'ok';\n          } else if (error === 401) {\n            status = 'permission_denied';\n          } else {\n            status = 'rest_error:' + error;\n          }\n\n          onComplete(status, null);\n        }\n      }\n    );\n  }\n\n  /** @inheritDoc */\n  unlisten(query: QueryContext, tag: number | null) {\n    const listenId = ReadonlyRestClient.getListenId_(query, tag);\n    delete this.listens_[listenId];\n  }\n\n  get(query: QueryContext): Promise<string> {\n    const queryStringParameters = queryParamsToRestQueryStringParameters(\n      query._queryParams\n    );\n\n    const pathString = query._path.toString();\n\n    const deferred = new Deferred<string>();\n\n    this.restRequest_(\n      pathString + '.json',\n      queryStringParameters,\n      (error, result) => {\n        let data = result;\n\n        if (error === 404) {\n          data = null;\n          error = null;\n        }\n\n        if (error === null) {\n          this.onDataUpdate_(\n            pathString,\n            data,\n            /*isMerge=*/ false,\n            /*tag=*/ null\n          );\n          deferred.resolve(data as string);\n        } else {\n          deferred.reject(new Error(data as string));\n        }\n      }\n    );\n    return deferred.promise;\n  }\n\n  /** @inheritDoc */\n  refreshAuthToken(token: string) {\n    // no-op since we just always call getToken.\n  }\n\n  /**\n   * Performs a REST request to the given path, with the provided query string parameters,\n   * and any auth credentials we have.\n   */\n  private restRequest_(\n    pathString: string,\n    queryStringParameters: { [k: string]: string | number } = {},\n    callback: ((a: number | null, b?: unknown) => void) | null\n  ) {\n    queryStringParameters['format'] = 'export';\n\n    return Promise.all([\n      this.authTokenProvider_.getToken(/*forceRefresh=*/ false),\n      this.appCheckTokenProvider_.getToken(/*forceRefresh=*/ false)\n    ]).then(([authToken, appCheckToken]) => {\n      if (authToken && authToken.accessToken) {\n        queryStringParameters['auth'] = authToken.accessToken;\n      }\n      if (appCheckToken && appCheckToken.token) {\n        queryStringParameters['ac'] = appCheckToken.token;\n      }\n\n      const url =\n        (this.repoInfo_.secure ? 'https://' : 'http://') +\n        this.repoInfo_.host +\n        pathString +\n        '?' +\n        'ns=' +\n        this.repoInfo_.namespace +\n        querystring(queryStringParameters);\n\n      this.log_('Sending REST request for ' + url);\n      const xhr = new XMLHttpRequest();\n      xhr.onreadystatechange = () => {\n        if (callback && xhr.readyState === 4) {\n          this.log_(\n            'REST Response for ' + url + ' received. status:',\n            xhr.status,\n            'response:',\n            xhr.responseText\n          );\n          let res = null;\n          if (xhr.status >= 200 && xhr.status < 300) {\n            try {\n              res = jsonEval(xhr.responseText);\n            } catch (e) {\n              warn(\n                'Failed to parse JSON response for ' +\n                  url +\n                  ': ' +\n                  xhr.responseText\n              );\n            }\n            callback(null, res);\n          } else {\n            // 401 and 404 are expected.\n            if (xhr.status !== 401 && xhr.status !== 404) {\n              warn(\n                'Got unsuccessful REST response for ' +\n                  url +\n                  ' Status: ' +\n                  xhr.status\n              );\n            }\n            callback(xhr.status);\n          }\n          callback = null;\n        }\n      };\n\n      xhr.open('GET', url, /*asynchronous=*/ true);\n      xhr.send();\n    });\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Node } from './snap/Node';\nimport { Path } from './util/Path';\n\n/**\n * Mutable object which basically just stores a reference to the \"latest\" immutable snapshot.\n */\nexport class SnapshotHolder {\n  private rootNode_: Node = ChildrenNode.EMPTY_NODE;\n\n  getNode(path: Path): Node {\n    return this.rootNode_.getChild(path);\n  }\n\n  updateSnapshot(path: Path, newSnapshotNode: Node) {\n    this.rootNode_ = this.rootNode_.updateChild(path, newSnapshotNode);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { Node } from './snap/Node';\nimport { Path, pathGetFront, pathIsEmpty, pathPopFront } from './util/Path';\n\n/**\n * Helper class to store a sparse set of snapshots.\n */\nexport interface SparseSnapshotTree {\n  value: Node | null;\n  readonly children: Map<string, SparseSnapshotTree>;\n}\n\nexport function newSparseSnapshotTree(): SparseSnapshotTree {\n  return {\n    value: null,\n    children: new Map()\n  };\n}\n\n/**\n * Gets the node stored at the given path if one exists.\n * Only seems to be used in tests.\n *\n * @param path - Path to look up snapshot for.\n * @returns The retrieved node, or null.\n */\nexport function sparseSnapshotTreeFind(\n  sparseSnapshotTree: SparseSnapshotTree,\n  path: Path\n): Node | null {\n  if (sparseSnapshotTree.value != null) {\n    return sparseSnapshotTree.value.getChild(path);\n  } else if (!pathIsEmpty(path) && sparseSnapshotTree.children.size > 0) {\n    const childKey = pathGetFront(path);\n    path = pathPopFront(path);\n    if (sparseSnapshotTree.children.has(childKey)) {\n      const childTree = sparseSnapshotTree.children.get(childKey);\n      return sparseSnapshotTreeFind(childTree, path);\n    } else {\n      return null;\n    }\n  } else {\n    return null;\n  }\n}\n\n/**\n * Stores the given node at the specified path. If there is already a node\n * at a shallower path, it merges the new data into that snapshot node.\n *\n * @param path - Path to look up snapshot for.\n * @param data - The new data, or null.\n */\nexport function sparseSnapshotTreeRemember(\n  sparseSnapshotTree: SparseSnapshotTree,\n  path: Path,\n  data: Node\n): void {\n  if (pathIsEmpty(path)) {\n    sparseSnapshotTree.value = data;\n    sparseSnapshotTree.children.clear();\n  } else if (sparseSnapshotTree.value !== null) {\n    sparseSnapshotTree.value = sparseSnapshotTree.value.updateChild(path, data);\n  } else {\n    const childKey = pathGetFront(path);\n    if (!sparseSnapshotTree.children.has(childKey)) {\n      sparseSnapshotTree.children.set(childKey, newSparseSnapshotTree());\n    }\n\n    const child = sparseSnapshotTree.children.get(childKey);\n    path = pathPopFront(path);\n    sparseSnapshotTreeRemember(child, path, data);\n  }\n}\n\n/**\n * Purge the data at path from the cache.\n *\n * @param path - Path to look up snapshot for.\n * @returns True if this node should now be removed.\n */\nexport function sparseSnapshotTreeForget(\n  sparseSnapshotTree: SparseSnapshotTree,\n  path: Path\n): boolean {\n  if (pathIsEmpty(path)) {\n    sparseSnapshotTree.value = null;\n    sparseSnapshotTree.children.clear();\n    return true;\n  } else {\n    if (sparseSnapshotTree.value !== null) {\n      if (sparseSnapshotTree.value.isLeafNode()) {\n        // We're trying to forget a node that doesn't exist\n        return false;\n      } else {\n        const value = sparseSnapshotTree.value;\n        sparseSnapshotTree.value = null;\n\n        value.forEachChild(PRIORITY_INDEX, (key, tree) => {\n          sparseSnapshotTreeRemember(sparseSnapshotTree, new Path(key), tree);\n        });\n\n        return sparseSnapshotTreeForget(sparseSnapshotTree, path);\n      }\n    } else if (sparseSnapshotTree.children.size > 0) {\n      const childKey = pathGetFront(path);\n      path = pathPopFront(path);\n      if (sparseSnapshotTree.children.has(childKey)) {\n        const safeToRemove = sparseSnapshotTreeForget(\n          sparseSnapshotTree.children.get(childKey),\n          path\n        );\n        if (safeToRemove) {\n          sparseSnapshotTree.children.delete(childKey);\n        }\n      }\n\n      return sparseSnapshotTree.children.size === 0;\n    } else {\n      return true;\n    }\n  }\n}\n\n/**\n * Recursively iterates through all of the stored tree and calls the\n * callback on each one.\n *\n * @param prefixPath - Path to look up node for.\n * @param func - The function to invoke for each tree.\n */\nexport function sparseSnapshotTreeForEachTree(\n  sparseSnapshotTree: SparseSnapshotTree,\n  prefixPath: Path,\n  func: (a: Path, b: Node) => unknown\n): void {\n  if (sparseSnapshotTree.value !== null) {\n    func(prefixPath, sparseSnapshotTree.value);\n  } else {\n    sparseSnapshotTreeForEachChild(sparseSnapshotTree, (key, tree) => {\n      const path = new Path(prefixPath.toString() + '/' + key);\n      sparseSnapshotTreeForEachTree(tree, path, func);\n    });\n  }\n}\n\n/**\n * Iterates through each immediate child and triggers the callback.\n * Only seems to be used in tests.\n *\n * @param func - The function to invoke for each child.\n */\nexport function sparseSnapshotTreeForEachChild(\n  sparseSnapshotTree: SparseSnapshotTree,\n  func: (a: string, b: SparseSnapshotTree) => void\n): void {\n  sparseSnapshotTree.children.forEach((tree, key) => {\n    func(key, tree);\n  });\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { each } from '../util/util';\n\nimport { StatsCollection } from './StatsCollection';\n\n/**\n * Returns the delta from the previous call to get stats.\n *\n * @param collection_ - The collection to \"listen\" to.\n */\nexport class StatsListener {\n  private last_: { [k: string]: number } | null = null;\n\n  constructor(private collection_: StatsCollection) {}\n\n  get(): { [k: string]: number } {\n    const newStats = this.collection_.get();\n\n    const delta = { ...newStats };\n    if (this.last_) {\n      each(this.last_, (stat: string, value: number) => {\n        delta[stat] = delta[stat] - value;\n      });\n    }\n    this.last_ = newStats;\n\n    return delta;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains } from '@firebase/util';\n\nimport { ServerActions } from '../ServerActions';\nimport { setTimeoutNonBlocking, each } from '../util/util';\n\nimport { StatsCollection } from './StatsCollection';\nimport { StatsListener } from './StatsListener';\n\n// Assuming some apps may have a short amount of time on page, and a bulk of firebase operations probably\n// happen on page load, we try to report our first set of stats pretty quickly, but we wait at least 10\n// seconds to try to ensure the Firebase connection is established / settled.\nconst FIRST_STATS_MIN_TIME = 10 * 1000;\nconst FIRST_STATS_MAX_TIME = 30 * 1000;\n\n// We'll continue to report stats on average every 5 minutes.\nconst REPORT_STATS_INTERVAL = 5 * 60 * 1000;\n\nexport class StatsReporter {\n  private statsListener_: StatsListener;\n  statsToReport_: { [k: string]: boolean } = {};\n\n  constructor(collection: StatsCollection, private server_: ServerActions) {\n    this.statsListener_ = new StatsListener(collection);\n\n    const timeout =\n      FIRST_STATS_MIN_TIME +\n      (FIRST_STATS_MAX_TIME - FIRST_STATS_MIN_TIME) * Math.random();\n    setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(timeout));\n  }\n\n  private reportStats_() {\n    const stats = this.statsListener_.get();\n    const reportedStats: typeof stats = {};\n    let haveStatsToReport = false;\n\n    each(stats, (stat: string, value: number) => {\n      if (value > 0 && contains(this.statsToReport_, stat)) {\n        reportedStats[stat] = value;\n        haveStatsToReport = true;\n      }\n    });\n\n    if (haveStatsToReport) {\n      this.server_.reportStats(reportedStats);\n    }\n\n    // queue our next run.\n    setTimeoutNonBlocking(\n      this.reportStats_.bind(this),\n      Math.floor(Math.random() * 2 * REPORT_STATS_INTERVAL)\n    );\n  }\n}\n\nexport function statsReporterIncludeStat(\n  reporter: StatsReporter,\n  stat: string\n) {\n  reporter.statsToReport_[stat] = true;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path } from '../util/Path';\n\n/**\n *\n * @enum\n */\nexport enum OperationType {\n  OVERWRITE,\n  MERGE,\n  ACK_USER_WRITE,\n  LISTEN_COMPLETE\n}\n\n/**\n * @interface\n */\nexport interface Operation {\n  source: OperationSource;\n\n  type: OperationType;\n\n  path: Path;\n\n  operationForChild(childName: string): Operation | null;\n}\n\nexport interface OperationSource {\n  fromUser: boolean;\n  fromServer: boolean;\n  queryId: string | null;\n  tagged: boolean;\n}\n\nexport function newOperationSourceUser(): OperationSource {\n  return {\n    fromUser: true,\n    fromServer: false,\n    queryId: null,\n    tagged: false\n  };\n}\n\nexport function newOperationSourceServer(): OperationSource {\n  return {\n    fromUser: false,\n    fromServer: true,\n    queryId: null,\n    tagged: false\n  };\n}\n\nexport function newOperationSourceServerTaggedQuery(\n  queryId: string\n): OperationSource {\n  return {\n    fromUser: false,\n    fromServer: true,\n    queryId,\n    tagged: true\n  };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ImmutableTree } from '../util/ImmutableTree';\nimport {\n  newEmptyPath,\n  Path,\n  pathGetFront,\n  pathIsEmpty,\n  pathPopFront\n} from '../util/Path';\n\nimport { newOperationSourceUser, Operation, OperationType } from './Operation';\n\nexport class AckUserWrite implements Operation {\n  /** @inheritDoc */\n  type = OperationType.ACK_USER_WRITE;\n\n  /** @inheritDoc */\n  source = newOperationSourceUser();\n\n  /**\n   * @param affectedTree - A tree containing true for each affected path. Affected paths can't overlap.\n   */\n  constructor(\n    /** @inheritDoc */ public path: Path,\n    /** @inheritDoc */ public affectedTree: ImmutableTree<boolean>,\n    /** @inheritDoc */ public revert: boolean\n  ) {}\n  operationForChild(childName: string): AckUserWrite {\n    if (!pathIsEmpty(this.path)) {\n      assert(\n        pathGetFront(this.path) === childName,\n        'operationForChild called for unrelated child.'\n      );\n      return new AckUserWrite(\n        pathPopFront(this.path),\n        this.affectedTree,\n        this.revert\n      );\n    } else if (this.affectedTree.value != null) {\n      assert(\n        this.affectedTree.children.isEmpty(),\n        'affectedTree should not have overlapping affected paths.'\n      );\n      // All child locations are affected as well; just return same operation.\n      return this;\n    } else {\n      const childTree = this.affectedTree.subtree(new Path(childName));\n      return new AckUserWrite(newEmptyPath(), childTree, this.revert);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { newEmptyPath, Path, pathIsEmpty, pathPopFront } from '../util/Path';\n\nimport { Operation, OperationSource, OperationType } from './Operation';\n\nexport class ListenComplete implements Operation {\n  /** @inheritDoc */\n  type = OperationType.LISTEN_COMPLETE;\n\n  constructor(public source: OperationSource, public path: Path) {}\n\n  operationForChild(childName: string): ListenComplete {\n    if (pathIsEmpty(this.path)) {\n      return new ListenComplete(this.source, newEmptyPath());\n    } else {\n      return new ListenComplete(this.source, pathPopFront(this.path));\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\nimport { newEmptyPath, Path, pathIsEmpty, pathPopFront } from '../util/Path';\n\nimport { Operation, OperationSource, OperationType } from './Operation';\n\nexport class Overwrite implements Operation {\n  /** @inheritDoc */\n  type = OperationType.OVERWRITE;\n\n  constructor(\n    public source: OperationSource,\n    public path: Path,\n    public snap: Node\n  ) {}\n\n  operationForChild(childName: string): Overwrite {\n    if (pathIsEmpty(this.path)) {\n      return new Overwrite(\n        this.source,\n        newEmptyPath(),\n        this.snap.getImmediateChild(childName)\n      );\n    } else {\n      return new Overwrite(this.source, pathPopFront(this.path), this.snap);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Node } from '../snap/Node';\nimport { ImmutableTree } from '../util/ImmutableTree';\nimport {\n  newEmptyPath,\n  Path,\n  pathGetFront,\n  pathIsEmpty,\n  pathPopFront\n} from '../util/Path';\n\nimport { Operation, OperationSource, OperationType } from './Operation';\nimport { Overwrite } from './Overwrite';\n\nexport class Merge implements Operation {\n  /** @inheritDoc */\n  type = OperationType.MERGE;\n\n  constructor(\n    /** @inheritDoc */ public source: OperationSource,\n    /** @inheritDoc */ public path: Path,\n    /** @inheritDoc */ public children: ImmutableTree<Node>\n  ) {}\n  operationForChild(childName: string): Operation {\n    if (pathIsEmpty(this.path)) {\n      const childTree = this.children.subtree(new Path(childName));\n      if (childTree.isEmpty()) {\n        // This child is unaffected\n        return null;\n      } else if (childTree.value) {\n        // We have a snapshot for the child in question.  This becomes an overwrite of the child.\n        return new Overwrite(this.source, newEmptyPath(), childTree.value);\n      } else {\n        // This is a merge at a deeper level\n        return new Merge(this.source, newEmptyPath(), childTree);\n      }\n    } else {\n      assert(\n        pathGetFront(this.path) === childName,\n        \"Can't get a merge for a child not on the path of the operation\"\n      );\n      return new Merge(this.source, pathPopFront(this.path), this.children);\n    }\n  }\n  toString(): string {\n    return (\n      'Operation(' +\n      this.path +\n      ': ' +\n      this.source.toString() +\n      ' merge: ' +\n      this.children.toString() +\n      ')'\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\nimport { Path, pathGetFront, pathIsEmpty } from '../util/Path';\n\n/**\n * A cache node only stores complete children. Additionally it holds a flag whether the node can be considered fully\n * initialized in the sense that we know at one point in time this represented a valid state of the world, e.g.\n * initialized with data from the server, or a complete overwrite by the client. The filtered flag also tracks\n * whether a node potentially had children removed due to a filter.\n */\nexport class CacheNode {\n  constructor(\n    private node_: Node,\n    private fullyInitialized_: boolean,\n    private filtered_: boolean\n  ) {}\n\n  /**\n   * Returns whether this node was fully initialized with either server data or a complete overwrite by the client\n   */\n  isFullyInitialized(): boolean {\n    return this.fullyInitialized_;\n  }\n\n  /**\n   * Returns whether this node is potentially missing children due to a filter applied to the node\n   */\n  isFiltered(): boolean {\n    return this.filtered_;\n  }\n\n  isCompleteForPath(path: Path): boolean {\n    if (pathIsEmpty(path)) {\n      return this.isFullyInitialized() && !this.filtered_;\n    }\n\n    const childKey = pathGetFront(path);\n    return this.isCompleteForChild(childKey);\n  }\n\n  isCompleteForChild(key: string): boolean {\n    return (\n      (this.isFullyInitialized() && !this.filtered_) || this.node_.hasChild(key)\n    );\n  }\n\n  getNode(): Node {\n    return this.node_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assertionError } from '@firebase/util';\n\nimport { Index } from '../snap/indexes/Index';\nimport { NamedNode, Node } from '../snap/Node';\n\nimport { Change, ChangeType, changeChildMoved } from './Change';\nimport { Event } from './Event';\nimport { EventRegistration, QueryContext } from './EventRegistration';\n\n/**\n * An EventGenerator is used to convert \"raw\" changes (Change) as computed by the\n * CacheDiffer into actual events (Event) that can be raised.  See generateEventsForChanges()\n * for details.\n *\n */\nexport class EventGenerator {\n  index_: Index;\n\n  constructor(public query_: QueryContext) {\n    this.index_ = this.query_._queryParams.getIndex();\n  }\n}\n\n/**\n * Given a set of raw changes (no moved events and prevName not specified yet), and a set of\n * EventRegistrations that should be notified of these changes, generate the actual events to be raised.\n *\n * Notes:\n *  - child_moved events will be synthesized at this time for any child_changed events that affect\n *    our index.\n *  - prevName will be calculated based on the index ordering.\n */\nexport function eventGeneratorGenerateEventsForChanges(\n  eventGenerator: EventGenerator,\n  changes: Change[],\n  eventCache: Node,\n  eventRegistrations: EventRegistration[]\n): Event[] {\n  const events: Event[] = [];\n  const moves: Change[] = [];\n\n  changes.forEach(change => {\n    if (\n      change.type === ChangeType.CHILD_CHANGED &&\n      eventGenerator.index_.indexedValueChanged(\n        change.oldSnap as Node,\n        change.snapshotNode\n      )\n    ) {\n      moves.push(changeChildMoved(change.childName, change.snapshotNode));\n    }\n  });\n\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.CHILD_REMOVED,\n    changes,\n    eventRegistrations,\n    eventCache\n  );\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.CHILD_ADDED,\n    changes,\n    eventRegistrations,\n    eventCache\n  );\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.CHILD_MOVED,\n    moves,\n    eventRegistrations,\n    eventCache\n  );\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.CHILD_CHANGED,\n    changes,\n    eventRegistrations,\n    eventCache\n  );\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.VALUE,\n    changes,\n    eventRegistrations,\n    eventCache\n  );\n\n  return events;\n}\n\n/**\n * Given changes of a single change type, generate the corresponding events.\n */\nfunction eventGeneratorGenerateEventsForType(\n  eventGenerator: EventGenerator,\n  events: Event[],\n  eventType: string,\n  changes: Change[],\n  registrations: EventRegistration[],\n  eventCache: Node\n) {\n  const filteredChanges = changes.filter(change => change.type === eventType);\n\n  filteredChanges.sort((a, b) =>\n    eventGeneratorCompareChanges(eventGenerator, a, b)\n  );\n  filteredChanges.forEach(change => {\n    const materializedChange = eventGeneratorMaterializeSingleChange(\n      eventGenerator,\n      change,\n      eventCache\n    );\n    registrations.forEach(registration => {\n      if (registration.respondsTo(change.type)) {\n        events.push(\n          registration.createEvent(materializedChange, eventGenerator.query_)\n        );\n      }\n    });\n  });\n}\n\nfunction eventGeneratorMaterializeSingleChange(\n  eventGenerator: EventGenerator,\n  change: Change,\n  eventCache: Node\n): Change {\n  if (change.type === 'value' || change.type === 'child_removed') {\n    return change;\n  } else {\n    change.prevName = eventCache.getPredecessorChildName(\n      change.childName,\n      change.snapshotNode,\n      eventGenerator.index_\n    );\n    return change;\n  }\n}\n\nfunction eventGeneratorCompareChanges(\n  eventGenerator: EventGenerator,\n  a: Change,\n  b: Change\n) {\n  if (a.childName == null || b.childName == null) {\n    throw assertionError('Should only compare child_ events.');\n  }\n  const aWrapped = new NamedNode(a.childName, a.snapshotNode);\n  const bWrapped = new NamedNode(b.childName, b.snapshotNode);\n  return eventGenerator.index_.compare(aWrapped, bWrapped);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\n\nimport { CacheNode } from './CacheNode';\n\n/**\n * Stores the data we have cached for a view.\n *\n * serverSnap is the cached server data, eventSnap is the cached event data (server data plus any local writes).\n */\nexport interface ViewCache {\n  readonly eventCache: CacheNode;\n  readonly serverCache: CacheNode;\n}\n\nexport function newViewCache(\n  eventCache: CacheNode,\n  serverCache: CacheNode\n): ViewCache {\n  return { eventCache, serverCache };\n}\n\nexport function viewCacheUpdateEventSnap(\n  viewCache: ViewCache,\n  eventSnap: Node,\n  complete: boolean,\n  filtered: boolean\n): ViewCache {\n  return newViewCache(\n    new CacheNode(eventSnap, complete, filtered),\n    viewCache.serverCache\n  );\n}\n\nexport function viewCacheUpdateServerSnap(\n  viewCache: ViewCache,\n  serverSnap: Node,\n  complete: boolean,\n  filtered: boolean\n): ViewCache {\n  return newViewCache(\n    viewCache.eventCache,\n    new CacheNode(serverSnap, complete, filtered)\n  );\n}\n\nexport function viewCacheGetCompleteEventSnap(\n  viewCache: ViewCache\n): Node | null {\n  return viewCache.eventCache.isFullyInitialized()\n    ? viewCache.eventCache.getNode()\n    : null;\n}\n\nexport function viewCacheGetCompleteServerSnap(\n  viewCache: ViewCache\n): Node | null {\n  return viewCache.serverCache.isFullyInitialized()\n    ? viewCache.serverCache.getNode()\n    : null;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  newEmptyPath,\n  Path,\n  pathChild,\n  pathGetFront,\n  pathIsEmpty,\n  pathPopFront\n} from './Path';\nimport { SortedMap } from './SortedMap';\nimport { each, stringCompare } from './util';\n\nlet emptyChildrenSingleton: SortedMap<string, ImmutableTree<null>>;\n\n/**\n * Singleton empty children collection.\n *\n */\nconst EmptyChildren = (): SortedMap<string, ImmutableTree<null>> => {\n  if (!emptyChildrenSingleton) {\n    emptyChildrenSingleton = new SortedMap<string, ImmutableTree<null>>(\n      stringCompare\n    );\n  }\n  return emptyChildrenSingleton;\n};\n\n/**\n * A tree with immutable elements.\n */\nexport class ImmutableTree<T> {\n  static fromObject<T>(obj: { [k: string]: T }): ImmutableTree<T> {\n    let tree: ImmutableTree<T> = new ImmutableTree<T>(null);\n    each(obj, (childPath: string, childSnap: T) => {\n      tree = tree.set(new Path(childPath), childSnap);\n    });\n    return tree;\n  }\n\n  constructor(\n    public readonly value: T | null,\n    public readonly children: SortedMap<\n      string,\n      ImmutableTree<T>\n    > = EmptyChildren()\n  ) {}\n\n  /**\n   * True if the value is empty and there are no children\n   */\n  isEmpty(): boolean {\n    return this.value === null && this.children.isEmpty();\n  }\n\n  /**\n   * Given a path and predicate, return the first node and the path to that node\n   * where the predicate returns true.\n   *\n   * TODO Do a perf test -- If we're creating a bunch of `{path: value:}`\n   * objects on the way back out, it may be better to pass down a pathSoFar obj.\n   *\n   * @param relativePath - The remainder of the path\n   * @param predicate - The predicate to satisfy to return a node\n   */\n  findRootMostMatchingPathAndValue(\n    relativePath: Path,\n    predicate: (a: T) => boolean\n  ): { path: Path; value: T } | null {\n    if (this.value != null && predicate(this.value)) {\n      return { path: newEmptyPath(), value: this.value };\n    } else {\n      if (pathIsEmpty(relativePath)) {\n        return null;\n      } else {\n        const front = pathGetFront(relativePath);\n        const child = this.children.get(front);\n        if (child !== null) {\n          const childExistingPathAndValue =\n            child.findRootMostMatchingPathAndValue(\n              pathPopFront(relativePath),\n              predicate\n            );\n          if (childExistingPathAndValue != null) {\n            const fullPath = pathChild(\n              new Path(front),\n              childExistingPathAndValue.path\n            );\n            return { path: fullPath, value: childExistingPathAndValue.value };\n          } else {\n            return null;\n          }\n        } else {\n          return null;\n        }\n      }\n    }\n  }\n\n  /**\n   * Find, if it exists, the shortest subpath of the given path that points a defined\n   * value in the tree\n   */\n  findRootMostValueAndPath(\n    relativePath: Path\n  ): { path: Path; value: T } | null {\n    return this.findRootMostMatchingPathAndValue(relativePath, () => true);\n  }\n\n  /**\n   * @returns The subtree at the given path\n   */\n  subtree(relativePath: Path): ImmutableTree<T> {\n    if (pathIsEmpty(relativePath)) {\n      return this;\n    } else {\n      const front = pathGetFront(relativePath);\n      const childTree = this.children.get(front);\n      if (childTree !== null) {\n        return childTree.subtree(pathPopFront(relativePath));\n      } else {\n        return new ImmutableTree<T>(null);\n      }\n    }\n  }\n\n  /**\n   * Sets a value at the specified path.\n   *\n   * @param relativePath - Path to set value at.\n   * @param toSet - Value to set.\n   * @returns Resulting tree.\n   */\n  set(relativePath: Path, toSet: T | null): ImmutableTree<T> {\n    if (pathIsEmpty(relativePath)) {\n      return new ImmutableTree(toSet, this.children);\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front) || new ImmutableTree<T>(null);\n      const newChild = child.set(pathPopFront(relativePath), toSet);\n      const newChildren = this.children.insert(front, newChild);\n      return new ImmutableTree(this.value, newChildren);\n    }\n  }\n\n  /**\n   * Removes the value at the specified path.\n   *\n   * @param relativePath - Path to value to remove.\n   * @returns Resulting tree.\n   */\n  remove(relativePath: Path): ImmutableTree<T> {\n    if (pathIsEmpty(relativePath)) {\n      if (this.children.isEmpty()) {\n        return new ImmutableTree<T>(null);\n      } else {\n        return new ImmutableTree(null, this.children);\n      }\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front);\n      if (child) {\n        const newChild = child.remove(pathPopFront(relativePath));\n        let newChildren;\n        if (newChild.isEmpty()) {\n          newChildren = this.children.remove(front);\n        } else {\n          newChildren = this.children.insert(front, newChild);\n        }\n        if (this.value === null && newChildren.isEmpty()) {\n          return new ImmutableTree<T>(null);\n        } else {\n          return new ImmutableTree(this.value, newChildren);\n        }\n      } else {\n        return this;\n      }\n    }\n  }\n\n  /**\n   * Gets a value from the tree.\n   *\n   * @param relativePath - Path to get value for.\n   * @returns Value at path, or null.\n   */\n  get(relativePath: Path): T | null {\n    if (pathIsEmpty(relativePath)) {\n      return this.value;\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front);\n      if (child) {\n        return child.get(pathPopFront(relativePath));\n      } else {\n        return null;\n      }\n    }\n  }\n\n  /**\n   * Replace the subtree at the specified path with the given new tree.\n   *\n   * @param relativePath - Path to replace subtree for.\n   * @param newTree - New tree.\n   * @returns Resulting tree.\n   */\n  setTree(relativePath: Path, newTree: ImmutableTree<T>): ImmutableTree<T> {\n    if (pathIsEmpty(relativePath)) {\n      return newTree;\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front) || new ImmutableTree<T>(null);\n      const newChild = child.setTree(pathPopFront(relativePath), newTree);\n      let newChildren;\n      if (newChild.isEmpty()) {\n        newChildren = this.children.remove(front);\n      } else {\n        newChildren = this.children.insert(front, newChild);\n      }\n      return new ImmutableTree(this.value, newChildren);\n    }\n  }\n\n  /**\n   * Performs a depth first fold on this tree. Transforms a tree into a single\n   * value, given a function that operates on the path to a node, an optional\n   * current value, and a map of child names to folded subtrees\n   */\n  fold<V>(fn: (path: Path, value: T, children: { [k: string]: V }) => V): V {\n    return this.fold_(newEmptyPath(), fn);\n  }\n\n  /**\n   * Recursive helper for public-facing fold() method\n   */\n  private fold_<V>(\n    pathSoFar: Path,\n    fn: (path: Path, value: T | null, children: { [k: string]: V }) => V\n  ): V {\n    const accum: { [k: string]: V } = {};\n    this.children.inorderTraversal(\n      (childKey: string, childTree: ImmutableTree<T>) => {\n        accum[childKey] = childTree.fold_(pathChild(pathSoFar, childKey), fn);\n      }\n    );\n    return fn(pathSoFar, this.value, accum);\n  }\n\n  /**\n   * Find the first matching value on the given path. Return the result of applying f to it.\n   */\n  findOnPath<V>(path: Path, f: (path: Path, value: T) => V | null): V | null {\n    return this.findOnPath_(path, newEmptyPath(), f);\n  }\n\n  private findOnPath_<V>(\n    pathToFollow: Path,\n    pathSoFar: Path,\n    f: (path: Path, value: T) => V | null\n  ): V | null {\n    const result = this.value ? f(pathSoFar, this.value) : false;\n    if (result) {\n      return result;\n    } else {\n      if (pathIsEmpty(pathToFollow)) {\n        return null;\n      } else {\n        const front = pathGetFront(pathToFollow)!;\n        const nextChild = this.children.get(front);\n        if (nextChild) {\n          return nextChild.findOnPath_(\n            pathPopFront(pathToFollow),\n            pathChild(pathSoFar, front),\n            f\n          );\n        } else {\n          return null;\n        }\n      }\n    }\n  }\n\n  foreachOnPath(\n    path: Path,\n    f: (path: Path, value: T) => void\n  ): ImmutableTree<T> {\n    return this.foreachOnPath_(path, newEmptyPath(), f);\n  }\n\n  private foreachOnPath_(\n    pathToFollow: Path,\n    currentRelativePath: Path,\n    f: (path: Path, value: T) => void\n  ): ImmutableTree<T> {\n    if (pathIsEmpty(pathToFollow)) {\n      return this;\n    } else {\n      if (this.value) {\n        f(currentRelativePath, this.value);\n      }\n      const front = pathGetFront(pathToFollow);\n      const nextChild = this.children.get(front);\n      if (nextChild) {\n        return nextChild.foreachOnPath_(\n          pathPopFront(pathToFollow),\n          pathChild(currentRelativePath, front),\n          f\n        );\n      } else {\n        return new ImmutableTree<T>(null);\n      }\n    }\n  }\n\n  /**\n   * Calls the given function for each node in the tree that has a value.\n   *\n   * @param f - A function to be called with the path from the root of the tree to\n   * a node, and the value at that node. Called in depth-first order.\n   */\n  foreach(f: (path: Path, value: T) => void) {\n    this.foreach_(newEmptyPath(), f);\n  }\n\n  private foreach_(\n    currentRelativePath: Path,\n    f: (path: Path, value: T) => void\n  ) {\n    this.children.inorderTraversal((childName, childTree) => {\n      childTree.foreach_(pathChild(currentRelativePath, childName), f);\n    });\n    if (this.value) {\n      f(currentRelativePath, this.value);\n    }\n  }\n\n  foreachChild(f: (name: string, value: T) => void) {\n    this.children.inorderTraversal(\n      (childName: string, childTree: ImmutableTree<T>) => {\n        if (childTree.value) {\n          f(childName, childTree.value);\n        }\n      }\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { NamedNode, Node } from './snap/Node';\nimport { ImmutableTree } from './util/ImmutableTree';\nimport {\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathChild,\n  pathIsEmpty\n} from './util/Path';\nimport { each } from './util/util';\n\n/**\n * This class holds a collection of writes that can be applied to nodes in unison. It abstracts away the logic with\n * dealing with priority writes and multiple nested writes. At any given path there is only allowed to be one write\n * modifying that path. Any write to an existing path or shadowing an existing path will modify that existing write\n * to reflect the write added.\n */\nexport class CompoundWrite {\n  constructor(public writeTree_: ImmutableTree<Node>) {}\n\n  static empty(): CompoundWrite {\n    return new CompoundWrite(new ImmutableTree(null));\n  }\n}\n\nexport function compoundWriteAddWrite(\n  compoundWrite: CompoundWrite,\n  path: Path,\n  node: Node\n): CompoundWrite {\n  if (pathIsEmpty(path)) {\n    return new CompoundWrite(new ImmutableTree(node));\n  } else {\n    const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\n    if (rootmost != null) {\n      const rootMostPath = rootmost.path;\n      let value = rootmost.value;\n      const relativePath = newRelativePath(rootMostPath, path);\n      value = value.updateChild(relativePath, node);\n      return new CompoundWrite(\n        compoundWrite.writeTree_.set(rootMostPath, value)\n      );\n    } else {\n      const subtree = new ImmutableTree(node);\n      const newWriteTree = compoundWrite.writeTree_.setTree(path, subtree);\n      return new CompoundWrite(newWriteTree);\n    }\n  }\n}\n\nexport function compoundWriteAddWrites(\n  compoundWrite: CompoundWrite,\n  path: Path,\n  updates: { [name: string]: Node }\n): CompoundWrite {\n  let newWrite = compoundWrite;\n  each(updates, (childKey: string, node: Node) => {\n    newWrite = compoundWriteAddWrite(newWrite, pathChild(path, childKey), node);\n  });\n  return newWrite;\n}\n\n/**\n * Will remove a write at the given path and deeper paths. This will <em>not</em> modify a write at a higher\n * location, which must be removed by calling this method with that path.\n *\n * @param compoundWrite - The CompoundWrite to remove.\n * @param path - The path at which a write and all deeper writes should be removed\n * @returns The new CompoundWrite with the removed path\n */\nexport function compoundWriteRemoveWrite(\n  compoundWrite: CompoundWrite,\n  path: Path\n): CompoundWrite {\n  if (pathIsEmpty(path)) {\n    return CompoundWrite.empty();\n  } else {\n    const newWriteTree = compoundWrite.writeTree_.setTree(\n      path,\n      new ImmutableTree<Node>(null)\n    );\n    return new CompoundWrite(newWriteTree);\n  }\n}\n\n/**\n * Returns whether this CompoundWrite will fully overwrite a node at a given location and can therefore be\n * considered \"complete\".\n *\n * @param compoundWrite - The CompoundWrite to check.\n * @param path - The path to check for\n * @returns Whether there is a complete write at that path\n */\nexport function compoundWriteHasCompleteWrite(\n  compoundWrite: CompoundWrite,\n  path: Path\n): boolean {\n  return compoundWriteGetCompleteNode(compoundWrite, path) != null;\n}\n\n/**\n * Returns a node for a path if and only if the node is a \"complete\" overwrite at that path. This will not aggregate\n * writes from deeper paths, but will return child nodes from a more shallow path.\n *\n * @param compoundWrite - The CompoundWrite to get the node from.\n * @param path - The path to get a complete write\n * @returns The node if complete at that path, or null otherwise.\n */\nexport function compoundWriteGetCompleteNode(\n  compoundWrite: CompoundWrite,\n  path: Path\n): Node | null {\n  const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\n  if (rootmost != null) {\n    return compoundWrite.writeTree_\n      .get(rootmost.path)\n      .getChild(newRelativePath(rootmost.path, path));\n  } else {\n    return null;\n  }\n}\n\n/**\n * Returns all children that are guaranteed to be a complete overwrite.\n *\n * @param compoundWrite - The CompoundWrite to get children from.\n * @returns A list of all complete children.\n */\nexport function compoundWriteGetCompleteChildren(\n  compoundWrite: CompoundWrite\n): NamedNode[] {\n  const children: NamedNode[] = [];\n  const node = compoundWrite.writeTree_.value;\n  if (node != null) {\n    // If it's a leaf node, it has no children; so nothing to do.\n    if (!node.isLeafNode()) {\n      (node as ChildrenNode).forEachChild(\n        PRIORITY_INDEX,\n        (childName, childNode) => {\n          children.push(new NamedNode(childName, childNode));\n        }\n      );\n    }\n  } else {\n    compoundWrite.writeTree_.children.inorderTraversal(\n      (childName, childTree) => {\n        if (childTree.value != null) {\n          children.push(new NamedNode(childName, childTree.value));\n        }\n      }\n    );\n  }\n  return children;\n}\n\nexport function compoundWriteChildCompoundWrite(\n  compoundWrite: CompoundWrite,\n  path: Path\n): CompoundWrite {\n  if (pathIsEmpty(path)) {\n    return compoundWrite;\n  } else {\n    const shadowingNode = compoundWriteGetCompleteNode(compoundWrite, path);\n    if (shadowingNode != null) {\n      return new CompoundWrite(new ImmutableTree(shadowingNode));\n    } else {\n      return new CompoundWrite(compoundWrite.writeTree_.subtree(path));\n    }\n  }\n}\n\n/**\n * Returns true if this CompoundWrite is empty and therefore does not modify any nodes.\n * @returns Whether this CompoundWrite is empty\n */\nexport function compoundWriteIsEmpty(compoundWrite: CompoundWrite): boolean {\n  return compoundWrite.writeTree_.isEmpty();\n}\n\n/**\n * Applies this CompoundWrite to a node. The node is returned with all writes from this CompoundWrite applied to the\n * node\n * @param node - The node to apply this CompoundWrite to\n * @returns The node with all writes applied\n */\nexport function compoundWriteApply(\n  compoundWrite: CompoundWrite,\n  node: Node\n): Node {\n  return applySubtreeWrite(newEmptyPath(), compoundWrite.writeTree_, node);\n}\n\nfunction applySubtreeWrite(\n  relativePath: Path,\n  writeTree: ImmutableTree<Node>,\n  node: Node\n): Node {\n  if (writeTree.value != null) {\n    // Since there a write is always a leaf, we're done here\n    return node.updateChild(relativePath, writeTree.value);\n  } else {\n    let priorityWrite = null;\n    writeTree.children.inorderTraversal((childKey, childTree) => {\n      if (childKey === '.priority') {\n        // Apply priorities at the end so we don't update priorities for either empty nodes or forget\n        // to apply priorities to empty nodes that are later filled\n        assert(\n          childTree.value !== null,\n          'Priority writes must always be leaf nodes'\n        );\n        priorityWrite = childTree.value;\n      } else {\n        node = applySubtreeWrite(\n          pathChild(relativePath, childKey),\n          childTree,\n          node\n        );\n      }\n    });\n    // If there was a priority write, we only apply it if the node is not empty\n    if (!node.getChild(relativePath).isEmpty() && priorityWrite !== null) {\n      node = node.updateChild(\n        pathChild(relativePath, '.priority'),\n        priorityWrite\n      );\n    }\n    return node;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, assertionError, safeGet } from '@firebase/util';\n\nimport {\n  CompoundWrite,\n  compoundWriteAddWrite,\n  compoundWriteAddWrites,\n  compoundWriteApply,\n  compoundWriteChildCompoundWrite,\n  compoundWriteGetCompleteChildren,\n  compoundWriteGetCompleteNode,\n  compoundWriteHasCompleteWrite,\n  compoundWriteIsEmpty,\n  compoundWriteRemoveWrite\n} from './CompoundWrite';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Index } from './snap/indexes/Index';\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { NamedNode, Node } from './snap/Node';\nimport {\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathChild,\n  pathContains,\n  pathGetFront,\n  pathIsEmpty,\n  pathPopFront\n} from './util/Path';\nimport { each } from './util/util';\nimport { CacheNode } from './view/CacheNode';\n\n/**\n * Defines a single user-initiated write operation. May be the result of a set(), transaction(), or update() call. In\n * the case of a set() or transaction, snap wil be non-null.  In the case of an update(), children will be non-null.\n */\nexport interface WriteRecord {\n  writeId: number;\n  path: Path;\n  snap?: Node | null;\n  children?: { [k: string]: Node } | null;\n  visible: boolean;\n}\n\n/**\n * Create a new WriteTreeRef for the given path. For use with a new sync point at the given path.\n *\n */\nexport function writeTreeChildWrites(\n  writeTree: WriteTree,\n  path: Path\n): WriteTreeRef {\n  return newWriteTreeRef(path, writeTree);\n}\n\n/**\n * Record a new overwrite from user code.\n *\n * @param visible - This is set to false by some transactions. It should be excluded from event caches\n */\nexport function writeTreeAddOverwrite(\n  writeTree: WriteTree,\n  path: Path,\n  snap: Node,\n  writeId: number,\n  visible?: boolean\n) {\n  assert(\n    writeId > writeTree.lastWriteId,\n    'Stacking an older write on top of newer ones'\n  );\n  if (visible === undefined) {\n    visible = true;\n  }\n  writeTree.allWrites.push({\n    path,\n    snap,\n    writeId,\n    visible\n  });\n\n  if (visible) {\n    writeTree.visibleWrites = compoundWriteAddWrite(\n      writeTree.visibleWrites,\n      path,\n      snap\n    );\n  }\n  writeTree.lastWriteId = writeId;\n}\n\n/**\n * Record a new merge from user code.\n */\nexport function writeTreeAddMerge(\n  writeTree: WriteTree,\n  path: Path,\n  changedChildren: { [k: string]: Node },\n  writeId: number\n) {\n  assert(\n    writeId > writeTree.lastWriteId,\n    'Stacking an older merge on top of newer ones'\n  );\n  writeTree.allWrites.push({\n    path,\n    children: changedChildren,\n    writeId,\n    visible: true\n  });\n\n  writeTree.visibleWrites = compoundWriteAddWrites(\n    writeTree.visibleWrites,\n    path,\n    changedChildren\n  );\n  writeTree.lastWriteId = writeId;\n}\n\nexport function writeTreeGetWrite(\n  writeTree: WriteTree,\n  writeId: number\n): WriteRecord | null {\n  for (let i = 0; i < writeTree.allWrites.length; i++) {\n    const record = writeTree.allWrites[i];\n    if (record.writeId === writeId) {\n      return record;\n    }\n  }\n  return null;\n}\n\n/**\n * Remove a write (either an overwrite or merge) that has been successfully acknowledge by the server. Recalculates\n * the tree if necessary.  We return true if it may have been visible, meaning views need to reevaluate.\n *\n * @returns true if the write may have been visible (meaning we'll need to reevaluate / raise\n * events as a result).\n */\nexport function writeTreeRemoveWrite(\n  writeTree: WriteTree,\n  writeId: number\n): boolean {\n  // Note: disabling this check. It could be a transaction that preempted another transaction, and thus was applied\n  // out of order.\n  //const validClear = revert || this.allWrites_.length === 0 || writeId <= this.allWrites_[0].writeId;\n  //assert(validClear, \"Either we don't have this write, or it's the first one in the queue\");\n\n  const idx = writeTree.allWrites.findIndex(s => {\n    return s.writeId === writeId;\n  });\n  assert(idx >= 0, 'removeWrite called with nonexistent writeId.');\n  const writeToRemove = writeTree.allWrites[idx];\n  writeTree.allWrites.splice(idx, 1);\n\n  let removedWriteWasVisible = writeToRemove.visible;\n  let removedWriteOverlapsWithOtherWrites = false;\n\n  let i = writeTree.allWrites.length - 1;\n\n  while (removedWriteWasVisible && i >= 0) {\n    const currentWrite = writeTree.allWrites[i];\n    if (currentWrite.visible) {\n      if (\n        i >= idx &&\n        writeTreeRecordContainsPath_(currentWrite, writeToRemove.path)\n      ) {\n        // The removed write was completely shadowed by a subsequent write.\n        removedWriteWasVisible = false;\n      } else if (pathContains(writeToRemove.path, currentWrite.path)) {\n        // Either we're covering some writes or they're covering part of us (depending on which came first).\n        removedWriteOverlapsWithOtherWrites = true;\n      }\n    }\n    i--;\n  }\n\n  if (!removedWriteWasVisible) {\n    return false;\n  } else if (removedWriteOverlapsWithOtherWrites) {\n    // There's some shadowing going on. Just rebuild the visible writes from scratch.\n    writeTreeResetTree_(writeTree);\n    return true;\n  } else {\n    // There's no shadowing.  We can safely just remove the write(s) from visibleWrites.\n    if (writeToRemove.snap) {\n      writeTree.visibleWrites = compoundWriteRemoveWrite(\n        writeTree.visibleWrites,\n        writeToRemove.path\n      );\n    } else {\n      const children = writeToRemove.children;\n      each(children, (childName: string) => {\n        writeTree.visibleWrites = compoundWriteRemoveWrite(\n          writeTree.visibleWrites,\n          pathChild(writeToRemove.path, childName)\n        );\n      });\n    }\n    return true;\n  }\n}\n\nfunction writeTreeRecordContainsPath_(\n  writeRecord: WriteRecord,\n  path: Path\n): boolean {\n  if (writeRecord.snap) {\n    return pathContains(writeRecord.path, path);\n  } else {\n    for (const childName in writeRecord.children) {\n      if (\n        writeRecord.children.hasOwnProperty(childName) &&\n        pathContains(pathChild(writeRecord.path, childName), path)\n      ) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\n\n/**\n * Re-layer the writes and merges into a tree so we can efficiently calculate event snapshots\n */\nfunction writeTreeResetTree_(writeTree: WriteTree) {\n  writeTree.visibleWrites = writeTreeLayerTree_(\n    writeTree.allWrites,\n    writeTreeDefaultFilter_,\n    newEmptyPath()\n  );\n  if (writeTree.allWrites.length > 0) {\n    writeTree.lastWriteId =\n      writeTree.allWrites[writeTree.allWrites.length - 1].writeId;\n  } else {\n    writeTree.lastWriteId = -1;\n  }\n}\n\n/**\n * The default filter used when constructing the tree. Keep everything that's visible.\n */\nfunction writeTreeDefaultFilter_(write: WriteRecord) {\n  return write.visible;\n}\n\n/**\n * Static method. Given an array of WriteRecords, a filter for which ones to include, and a path, construct the tree of\n * event data at that path.\n */\nfunction writeTreeLayerTree_(\n  writes: WriteRecord[],\n  filter: (w: WriteRecord) => boolean,\n  treeRoot: Path\n): CompoundWrite {\n  let compoundWrite = CompoundWrite.empty();\n  for (let i = 0; i < writes.length; ++i) {\n    const write = writes[i];\n    // Theory, a later set will either:\n    // a) abort a relevant transaction, so no need to worry about excluding it from calculating that transaction\n    // b) not be relevant to a transaction (separate branch), so again will not affect the data for that transaction\n    if (filter(write)) {\n      const writePath = write.path;\n      let relativePath: Path;\n      if (write.snap) {\n        if (pathContains(treeRoot, writePath)) {\n          relativePath = newRelativePath(treeRoot, writePath);\n          compoundWrite = compoundWriteAddWrite(\n            compoundWrite,\n            relativePath,\n            write.snap\n          );\n        } else if (pathContains(writePath, treeRoot)) {\n          relativePath = newRelativePath(writePath, treeRoot);\n          compoundWrite = compoundWriteAddWrite(\n            compoundWrite,\n            newEmptyPath(),\n            write.snap.getChild(relativePath)\n          );\n        } else {\n          // There is no overlap between root path and write path, ignore write\n        }\n      } else if (write.children) {\n        if (pathContains(treeRoot, writePath)) {\n          relativePath = newRelativePath(treeRoot, writePath);\n          compoundWrite = compoundWriteAddWrites(\n            compoundWrite,\n            relativePath,\n            write.children\n          );\n        } else if (pathContains(writePath, treeRoot)) {\n          relativePath = newRelativePath(writePath, treeRoot);\n          if (pathIsEmpty(relativePath)) {\n            compoundWrite = compoundWriteAddWrites(\n              compoundWrite,\n              newEmptyPath(),\n              write.children\n            );\n          } else {\n            const child = safeGet(write.children, pathGetFront(relativePath));\n            if (child) {\n              // There exists a child in this node that matches the root path\n              const deepNode = child.getChild(pathPopFront(relativePath));\n              compoundWrite = compoundWriteAddWrite(\n                compoundWrite,\n                newEmptyPath(),\n                deepNode\n              );\n            }\n          }\n        } else {\n          // There is no overlap between root path and write path, ignore write\n        }\n      } else {\n        throw assertionError('WriteRecord should have .snap or .children');\n      }\n    }\n  }\n  return compoundWrite;\n}\n\n/**\n * Return a complete snapshot for the given path if there's visible write data at that path, else null.\n * No server data is considered.\n *\n */\nexport function writeTreeGetCompleteWriteData(\n  writeTree: WriteTree,\n  path: Path\n): Node | null {\n  return compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\n}\n\n/**\n * Given optional, underlying server data, and an optional set of constraints (exclude some sets, include hidden\n * writes), attempt to calculate a complete snapshot for the given path\n *\n * @param writeIdsToExclude - An optional set to be excluded\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\n */\nexport function writeTreeCalcCompleteEventCache(\n  writeTree: WriteTree,\n  treePath: Path,\n  completeServerCache: Node | null,\n  writeIdsToExclude?: number[],\n  includeHiddenWrites?: boolean\n): Node | null {\n  if (!writeIdsToExclude && !includeHiddenWrites) {\n    const shadowingNode = compoundWriteGetCompleteNode(\n      writeTree.visibleWrites,\n      treePath\n    );\n    if (shadowingNode != null) {\n      return shadowingNode;\n    } else {\n      const subMerge = compoundWriteChildCompoundWrite(\n        writeTree.visibleWrites,\n        treePath\n      );\n      if (compoundWriteIsEmpty(subMerge)) {\n        return completeServerCache;\n      } else if (\n        completeServerCache == null &&\n        !compoundWriteHasCompleteWrite(subMerge, newEmptyPath())\n      ) {\n        // We wouldn't have a complete snapshot, since there's no underlying data and no complete shadow\n        return null;\n      } else {\n        const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n        return compoundWriteApply(subMerge, layeredCache);\n      }\n    }\n  } else {\n    const merge = compoundWriteChildCompoundWrite(\n      writeTree.visibleWrites,\n      treePath\n    );\n    if (!includeHiddenWrites && compoundWriteIsEmpty(merge)) {\n      return completeServerCache;\n    } else {\n      // If the server cache is null, and we don't have a complete cache, we need to return null\n      if (\n        !includeHiddenWrites &&\n        completeServerCache == null &&\n        !compoundWriteHasCompleteWrite(merge, newEmptyPath())\n      ) {\n        return null;\n      } else {\n        const filter = function (write: WriteRecord) {\n          return (\n            (write.visible || includeHiddenWrites) &&\n            (!writeIdsToExclude ||\n              !~writeIdsToExclude.indexOf(write.writeId)) &&\n            (pathContains(write.path, treePath) ||\n              pathContains(treePath, write.path))\n          );\n        };\n        const mergeAtPath = writeTreeLayerTree_(\n          writeTree.allWrites,\n          filter,\n          treePath\n        );\n        const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n        return compoundWriteApply(mergeAtPath, layeredCache);\n      }\n    }\n  }\n}\n\n/**\n * With optional, underlying server data, attempt to return a children node of children that we have complete data for.\n * Used when creating new views, to pre-fill their complete event children snapshot.\n */\nexport function writeTreeCalcCompleteEventChildren(\n  writeTree: WriteTree,\n  treePath: Path,\n  completeServerChildren: ChildrenNode | null\n) {\n  let completeChildren = ChildrenNode.EMPTY_NODE as Node;\n  const topLevelSet = compoundWriteGetCompleteNode(\n    writeTree.visibleWrites,\n    treePath\n  );\n  if (topLevelSet) {\n    if (!topLevelSet.isLeafNode()) {\n      // we're shadowing everything. Return the children.\n      topLevelSet.forEachChild(PRIORITY_INDEX, (childName, childSnap) => {\n        completeChildren = completeChildren.updateImmediateChild(\n          childName,\n          childSnap\n        );\n      });\n    }\n    return completeChildren;\n  } else if (completeServerChildren) {\n    // Layer any children we have on top of this\n    // We know we don't have a top-level set, so just enumerate existing children\n    const merge = compoundWriteChildCompoundWrite(\n      writeTree.visibleWrites,\n      treePath\n    );\n    completeServerChildren.forEachChild(\n      PRIORITY_INDEX,\n      (childName, childNode) => {\n        const node = compoundWriteApply(\n          compoundWriteChildCompoundWrite(merge, new Path(childName)),\n          childNode\n        );\n        completeChildren = completeChildren.updateImmediateChild(\n          childName,\n          node\n        );\n      }\n    );\n    // Add any complete children we have from the set\n    compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\n      completeChildren = completeChildren.updateImmediateChild(\n        namedNode.name,\n        namedNode.node\n      );\n    });\n    return completeChildren;\n  } else {\n    // We don't have anything to layer on top of. Layer on any children we have\n    // Note that we can return an empty snap if we have a defined delete\n    const merge = compoundWriteChildCompoundWrite(\n      writeTree.visibleWrites,\n      treePath\n    );\n    compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\n      completeChildren = completeChildren.updateImmediateChild(\n        namedNode.name,\n        namedNode.node\n      );\n    });\n    return completeChildren;\n  }\n}\n\n/**\n * Given that the underlying server data has updated, determine what, if anything, needs to be\n * applied to the event cache.\n *\n * Possibilities:\n *\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\n *\n * 2. Some write is completely shadowing. No events to be raised\n *\n * 3. Is partially shadowed. Events\n *\n * Either existingEventSnap or existingServerSnap must exist\n */\nexport function writeTreeCalcEventCacheAfterServerOverwrite(\n  writeTree: WriteTree,\n  treePath: Path,\n  childPath: Path,\n  existingEventSnap: Node | null,\n  existingServerSnap: Node | null\n): Node | null {\n  assert(\n    existingEventSnap || existingServerSnap,\n    'Either existingEventSnap or existingServerSnap must exist'\n  );\n  const path = pathChild(treePath, childPath);\n  if (compoundWriteHasCompleteWrite(writeTree.visibleWrites, path)) {\n    // At this point we can probably guarantee that we're in case 2, meaning no events\n    // May need to check visibility while doing the findRootMostValueAndPath call\n    return null;\n  } else {\n    // No complete shadowing. We're either partially shadowing or not shadowing at all.\n    const childMerge = compoundWriteChildCompoundWrite(\n      writeTree.visibleWrites,\n      path\n    );\n    if (compoundWriteIsEmpty(childMerge)) {\n      // We're not shadowing at all. Case 1\n      return existingServerSnap.getChild(childPath);\n    } else {\n      // This could be more efficient if the serverNode + updates doesn't change the eventSnap\n      // However this is tricky to find out, since user updates don't necessary change the server\n      // snap, e.g. priority updates on empty nodes, or deep deletes. Another special case is if the server\n      // adds nodes, but doesn't change any existing writes. It is therefore not enough to\n      // only check if the updates change the serverNode.\n      // Maybe check if the merge tree contains these special cases and only do a full overwrite in that case?\n      return compoundWriteApply(\n        childMerge,\n        existingServerSnap.getChild(childPath)\n      );\n    }\n  }\n}\n\n/**\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\n * complete child for this ChildKey.\n */\nexport function writeTreeCalcCompleteChild(\n  writeTree: WriteTree,\n  treePath: Path,\n  childKey: string,\n  existingServerSnap: CacheNode\n): Node | null {\n  const path = pathChild(treePath, childKey);\n  const shadowingNode = compoundWriteGetCompleteNode(\n    writeTree.visibleWrites,\n    path\n  );\n  if (shadowingNode != null) {\n    return shadowingNode;\n  } else {\n    if (existingServerSnap.isCompleteForChild(childKey)) {\n      const childMerge = compoundWriteChildCompoundWrite(\n        writeTree.visibleWrites,\n        path\n      );\n      return compoundWriteApply(\n        childMerge,\n        existingServerSnap.getNode().getImmediateChild(childKey)\n      );\n    } else {\n      return null;\n    }\n  }\n}\n\n/**\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\n * a higher path, this will return the child of that write relative to the write and this path.\n * Returns null if there is no write at this path.\n */\nexport function writeTreeShadowingWrite(\n  writeTree: WriteTree,\n  path: Path\n): Node | null {\n  return compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\n}\n\n/**\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\n * the window, but may now be in the window.\n */\nexport function writeTreeCalcIndexedSlice(\n  writeTree: WriteTree,\n  treePath: Path,\n  completeServerData: Node | null,\n  startPost: NamedNode,\n  count: number,\n  reverse: boolean,\n  index: Index\n): NamedNode[] {\n  let toIterate: Node;\n  const merge = compoundWriteChildCompoundWrite(\n    writeTree.visibleWrites,\n    treePath\n  );\n  const shadowingNode = compoundWriteGetCompleteNode(merge, newEmptyPath());\n  if (shadowingNode != null) {\n    toIterate = shadowingNode;\n  } else if (completeServerData != null) {\n    toIterate = compoundWriteApply(merge, completeServerData);\n  } else {\n    // no children to iterate on\n    return [];\n  }\n  toIterate = toIterate.withIndex(index);\n  if (!toIterate.isEmpty() && !toIterate.isLeafNode()) {\n    const nodes = [];\n    const cmp = index.getCompare();\n    const iter = reverse\n      ? (toIterate as ChildrenNode).getReverseIteratorFrom(startPost, index)\n      : (toIterate as ChildrenNode).getIteratorFrom(startPost, index);\n    let next = iter.getNext();\n    while (next && nodes.length < count) {\n      if (cmp(next, startPost) !== 0) {\n        nodes.push(next);\n      }\n      next = iter.getNext();\n    }\n    return nodes;\n  } else {\n    return [];\n  }\n}\n\nexport function newWriteTree(): WriteTree {\n  return {\n    visibleWrites: CompoundWrite.empty(),\n    allWrites: [],\n    lastWriteId: -1\n  };\n}\n\n/**\n * WriteTree tracks all pending user-initiated writes and has methods to calculate the result of merging them\n * with underlying server data (to create \"event cache\" data).  Pending writes are added with addOverwrite()\n * and addMerge(), and removed with removeWrite().\n */\nexport interface WriteTree {\n  /**\n   * A tree tracking the result of applying all visible writes.  This does not include transactions with\n   * applyLocally=false or writes that are completely shadowed by other writes.\n   */\n  visibleWrites: CompoundWrite;\n\n  /**\n   * A list of all pending writes, regardless of visibility and shadowed-ness.  Used to calculate arbitrary\n   * sets of the changed data, such as hidden writes (from transactions) or changes with certain writes excluded (also\n   * used by transactions).\n   */\n  allWrites: WriteRecord[];\n\n  lastWriteId: number;\n}\n\n/**\n * If possible, returns a complete event cache, using the underlying server data if possible. In addition, can be used\n * to get a cache that includes hidden writes, and excludes arbitrary writes. Note that customizing the returned node\n * can lead to a more expensive calculation.\n *\n * @param writeIdsToExclude - Optional writes to exclude.\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\n */\nexport function writeTreeRefCalcCompleteEventCache(\n  writeTreeRef: WriteTreeRef,\n  completeServerCache: Node | null,\n  writeIdsToExclude?: number[],\n  includeHiddenWrites?: boolean\n): Node | null {\n  return writeTreeCalcCompleteEventCache(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    completeServerCache,\n    writeIdsToExclude,\n    includeHiddenWrites\n  );\n}\n\n/**\n * If possible, returns a children node containing all of the complete children we have data for. The returned data is a\n * mix of the given server data and write data.\n *\n */\nexport function writeTreeRefCalcCompleteEventChildren(\n  writeTreeRef: WriteTreeRef,\n  completeServerChildren: ChildrenNode | null\n): ChildrenNode {\n  return writeTreeCalcCompleteEventChildren(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    completeServerChildren\n  ) as ChildrenNode;\n}\n\n/**\n * Given that either the underlying server data has updated or the outstanding writes have updated, determine what,\n * if anything, needs to be applied to the event cache.\n *\n * Possibilities:\n *\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\n *\n * 2. Some write is completely shadowing. No events to be raised\n *\n * 3. Is partially shadowed. Events should be raised\n *\n * Either existingEventSnap or existingServerSnap must exist, this is validated via an assert\n *\n *\n */\nexport function writeTreeRefCalcEventCacheAfterServerOverwrite(\n  writeTreeRef: WriteTreeRef,\n  path: Path,\n  existingEventSnap: Node | null,\n  existingServerSnap: Node | null\n): Node | null {\n  return writeTreeCalcEventCacheAfterServerOverwrite(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    path,\n    existingEventSnap,\n    existingServerSnap\n  );\n}\n\n/**\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\n * a higher path, this will return the child of that write relative to the write and this path.\n * Returns null if there is no write at this path.\n *\n */\nexport function writeTreeRefShadowingWrite(\n  writeTreeRef: WriteTreeRef,\n  path: Path\n): Node | null {\n  return writeTreeShadowingWrite(\n    writeTreeRef.writeTree,\n    pathChild(writeTreeRef.treePath, path)\n  );\n}\n\n/**\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\n * the window, but may now be in the window\n */\nexport function writeTreeRefCalcIndexedSlice(\n  writeTreeRef: WriteTreeRef,\n  completeServerData: Node | null,\n  startPost: NamedNode,\n  count: number,\n  reverse: boolean,\n  index: Index\n): NamedNode[] {\n  return writeTreeCalcIndexedSlice(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    completeServerData,\n    startPost,\n    count,\n    reverse,\n    index\n  );\n}\n\n/**\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\n * complete child for this ChildKey.\n */\nexport function writeTreeRefCalcCompleteChild(\n  writeTreeRef: WriteTreeRef,\n  childKey: string,\n  existingServerCache: CacheNode\n): Node | null {\n  return writeTreeCalcCompleteChild(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    childKey,\n    existingServerCache\n  );\n}\n\n/**\n * Return a WriteTreeRef for a child.\n */\nexport function writeTreeRefChild(\n  writeTreeRef: WriteTreeRef,\n  childName: string\n): WriteTreeRef {\n  return newWriteTreeRef(\n    pathChild(writeTreeRef.treePath, childName),\n    writeTreeRef.writeTree\n  );\n}\n\nexport function newWriteTreeRef(\n  path: Path,\n  writeTree: WriteTree\n): WriteTreeRef {\n  return {\n    treePath: path,\n    writeTree\n  };\n}\n\n/**\n * A WriteTreeRef wraps a WriteTree and a path, for convenient access to a particular subtree.  All of the methods\n * just proxy to the underlying WriteTree.\n *\n */\nexport interface WriteTreeRef {\n  /**\n   * The path to this particular write tree ref. Used for calling methods on writeTree_ while exposing a simpler\n   * interface to callers.\n   */\n  readonly treePath: Path;\n\n  /**\n   * * A reference to the actual tree of write data. All methods are pass-through to the tree, but with the appropriate\n   * path prefixed.\n   *\n   * This lets us make cheap references to points in the tree for sync points without having to copy and maintain all of\n   * the data.\n   */\n  readonly writeTree: WriteTree;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, assertionError } from '@firebase/util';\n\nimport {\n  Change,\n  ChangeType,\n  changeChildAdded,\n  changeChildChanged,\n  changeChildRemoved\n} from './Change';\n\nexport class ChildChangeAccumulator {\n  private readonly changeMap: Map<string, Change> = new Map();\n\n  trackChildChange(change: Change) {\n    const type = change.type;\n    const childKey = change.childName!;\n    assert(\n      type === ChangeType.CHILD_ADDED ||\n        type === ChangeType.CHILD_CHANGED ||\n        type === ChangeType.CHILD_REMOVED,\n      'Only child changes supported for tracking'\n    );\n    assert(\n      childKey !== '.priority',\n      'Only non-priority child changes can be tracked.'\n    );\n    const oldChange = this.changeMap.get(childKey);\n    if (oldChange) {\n      const oldType = oldChange.type;\n      if (\n        type === ChangeType.CHILD_ADDED &&\n        oldType === ChangeType.CHILD_REMOVED\n      ) {\n        this.changeMap.set(\n          childKey,\n          changeChildChanged(\n            childKey,\n            change.snapshotNode,\n            oldChange.snapshotNode\n          )\n        );\n      } else if (\n        type === ChangeType.CHILD_REMOVED &&\n        oldType === ChangeType.CHILD_ADDED\n      ) {\n        this.changeMap.delete(childKey);\n      } else if (\n        type === ChangeType.CHILD_REMOVED &&\n        oldType === ChangeType.CHILD_CHANGED\n      ) {\n        this.changeMap.set(\n          childKey,\n          changeChildRemoved(childKey, oldChange.oldSnap)\n        );\n      } else if (\n        type === ChangeType.CHILD_CHANGED &&\n        oldType === ChangeType.CHILD_ADDED\n      ) {\n        this.changeMap.set(\n          childKey,\n          changeChildAdded(childKey, change.snapshotNode)\n        );\n      } else if (\n        type === ChangeType.CHILD_CHANGED &&\n        oldType === ChangeType.CHILD_CHANGED\n      ) {\n        this.changeMap.set(\n          childKey,\n          changeChildChanged(childKey, change.snapshotNode, oldChange.oldSnap)\n        );\n      } else {\n        throw assertionError(\n          'Illegal combination of changes: ' +\n            change +\n            ' occurred after ' +\n            oldChange\n        );\n      }\n    } else {\n      this.changeMap.set(childKey, change);\n    }\n  }\n\n  getChanges(): Change[] {\n    return Array.from(this.changeMap.values());\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Index } from '../snap/indexes/Index';\nimport { NamedNode, Node } from '../snap/Node';\nimport {\n  WriteTreeRef,\n  writeTreeRefCalcCompleteChild,\n  writeTreeRefCalcIndexedSlice\n} from '../WriteTree';\n\nimport { CacheNode } from './CacheNode';\nimport { ViewCache, viewCacheGetCompleteServerSnap } from './ViewCache';\n\n/**\n * Since updates to filtered nodes might require nodes to be pulled in from \"outside\" the node, this interface\n * can help to get complete children that can be pulled in.\n * A class implementing this interface takes potentially multiple sources (e.g. user writes, server data from\n * other views etc.) to try it's best to get a complete child that might be useful in pulling into the view.\n *\n * @interface\n */\nexport interface CompleteChildSource {\n  getCompleteChild(childKey: string): Node | null;\n\n  getChildAfterChild(\n    index: Index,\n    child: NamedNode,\n    reverse: boolean\n  ): NamedNode | null;\n}\n\n/**\n * An implementation of CompleteChildSource that never returns any additional children\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport class NoCompleteChildSource_ implements CompleteChildSource {\n  getCompleteChild(childKey?: string): Node | null {\n    return null;\n  }\n  getChildAfterChild(\n    index?: Index,\n    child?: NamedNode,\n    reverse?: boolean\n  ): NamedNode | null {\n    return null;\n  }\n}\n\n/**\n * Singleton instance.\n */\nexport const NO_COMPLETE_CHILD_SOURCE = new NoCompleteChildSource_();\n\n/**\n * An implementation of CompleteChildSource that uses a WriteTree in addition to any other server data or\n * old event caches available to calculate complete children.\n */\nexport class WriteTreeCompleteChildSource implements CompleteChildSource {\n  constructor(\n    private writes_: WriteTreeRef,\n    private viewCache_: ViewCache,\n    private optCompleteServerCache_: Node | null = null\n  ) {}\n  getCompleteChild(childKey: string): Node | null {\n    const node = this.viewCache_.eventCache;\n    if (node.isCompleteForChild(childKey)) {\n      return node.getNode().getImmediateChild(childKey);\n    } else {\n      const serverNode =\n        this.optCompleteServerCache_ != null\n          ? new CacheNode(this.optCompleteServerCache_, true, false)\n          : this.viewCache_.serverCache;\n      return writeTreeRefCalcCompleteChild(this.writes_, childKey, serverNode);\n    }\n  }\n  getChildAfterChild(\n    index: Index,\n    child: NamedNode,\n    reverse: boolean\n  ): NamedNode | null {\n    const completeServerData =\n      this.optCompleteServerCache_ != null\n        ? this.optCompleteServerCache_\n        : viewCacheGetCompleteServerSnap(this.viewCache_);\n    const nodes = writeTreeRefCalcIndexedSlice(\n      this.writes_,\n      completeServerData,\n      child,\n      1,\n      reverse,\n      index\n    );\n    if (nodes.length === 0) {\n      return null;\n    } else {\n      return nodes[0];\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, assertionError } from '@firebase/util';\n\nimport { AckUserWrite } from '../operation/AckUserWrite';\nimport { Merge } from '../operation/Merge';\nimport { Operation, OperationType } from '../operation/Operation';\nimport { Overwrite } from '../operation/Overwrite';\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { KEY_INDEX } from '../snap/indexes/KeyIndex';\nimport { Node } from '../snap/Node';\nimport { ImmutableTree } from '../util/ImmutableTree';\nimport {\n  newEmptyPath,\n  Path,\n  pathChild,\n  pathGetBack,\n  pathGetFront,\n  pathGetLength,\n  pathIsEmpty,\n  pathParent,\n  pathPopFront\n} from '../util/Path';\nimport {\n  WriteTreeRef,\n  writeTreeRefCalcCompleteChild,\n  writeTreeRefCalcCompleteEventCache,\n  writeTreeRefCalcCompleteEventChildren,\n  writeTreeRefCalcEventCacheAfterServerOverwrite,\n  writeTreeRefShadowingWrite\n} from '../WriteTree';\n\nimport { Change, changeValue } from './Change';\nimport { ChildChangeAccumulator } from './ChildChangeAccumulator';\nimport {\n  CompleteChildSource,\n  NO_COMPLETE_CHILD_SOURCE,\n  WriteTreeCompleteChildSource\n} from './CompleteChildSource';\nimport { NodeFilter } from './filter/NodeFilter';\nimport {\n  ViewCache,\n  viewCacheGetCompleteEventSnap,\n  viewCacheGetCompleteServerSnap,\n  viewCacheUpdateEventSnap,\n  viewCacheUpdateServerSnap\n} from './ViewCache';\n\nexport interface ProcessorResult {\n  readonly viewCache: ViewCache;\n  readonly changes: Change[];\n}\n\nexport interface ViewProcessor {\n  readonly filter: NodeFilter;\n}\n\nexport function newViewProcessor(filter: NodeFilter): ViewProcessor {\n  return { filter };\n}\n\nexport function viewProcessorAssertIndexed(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache\n): void {\n  assert(\n    viewCache.eventCache.getNode().isIndexed(viewProcessor.filter.getIndex()),\n    'Event snap not indexed'\n  );\n  assert(\n    viewCache.serverCache.getNode().isIndexed(viewProcessor.filter.getIndex()),\n    'Server snap not indexed'\n  );\n}\n\nexport function viewProcessorApplyOperation(\n  viewProcessor: ViewProcessor,\n  oldViewCache: ViewCache,\n  operation: Operation,\n  writesCache: WriteTreeRef,\n  completeCache: Node | null\n): ProcessorResult {\n  const accumulator = new ChildChangeAccumulator();\n  let newViewCache, filterServerNode;\n  if (operation.type === OperationType.OVERWRITE) {\n    const overwrite = operation as Overwrite;\n    if (overwrite.source.fromUser) {\n      newViewCache = viewProcessorApplyUserOverwrite(\n        viewProcessor,\n        oldViewCache,\n        overwrite.path,\n        overwrite.snap,\n        writesCache,\n        completeCache,\n        accumulator\n      );\n    } else {\n      assert(overwrite.source.fromServer, 'Unknown source.');\n      // We filter the node if it's a tagged update or the node has been previously filtered  and the\n      // update is not at the root in which case it is ok (and necessary) to mark the node unfiltered\n      // again\n      filterServerNode =\n        overwrite.source.tagged ||\n        (oldViewCache.serverCache.isFiltered() && !pathIsEmpty(overwrite.path));\n      newViewCache = viewProcessorApplyServerOverwrite(\n        viewProcessor,\n        oldViewCache,\n        overwrite.path,\n        overwrite.snap,\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  } else if (operation.type === OperationType.MERGE) {\n    const merge = operation as Merge;\n    if (merge.source.fromUser) {\n      newViewCache = viewProcessorApplyUserMerge(\n        viewProcessor,\n        oldViewCache,\n        merge.path,\n        merge.children,\n        writesCache,\n        completeCache,\n        accumulator\n      );\n    } else {\n      assert(merge.source.fromServer, 'Unknown source.');\n      // We filter the node if it's a tagged update or the node has been previously filtered\n      filterServerNode =\n        merge.source.tagged || oldViewCache.serverCache.isFiltered();\n      newViewCache = viewProcessorApplyServerMerge(\n        viewProcessor,\n        oldViewCache,\n        merge.path,\n        merge.children,\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  } else if (operation.type === OperationType.ACK_USER_WRITE) {\n    const ackUserWrite = operation as AckUserWrite;\n    if (!ackUserWrite.revert) {\n      newViewCache = viewProcessorAckUserWrite(\n        viewProcessor,\n        oldViewCache,\n        ackUserWrite.path,\n        ackUserWrite.affectedTree,\n        writesCache,\n        completeCache,\n        accumulator\n      );\n    } else {\n      newViewCache = viewProcessorRevertUserWrite(\n        viewProcessor,\n        oldViewCache,\n        ackUserWrite.path,\n        writesCache,\n        completeCache,\n        accumulator\n      );\n    }\n  } else if (operation.type === OperationType.LISTEN_COMPLETE) {\n    newViewCache = viewProcessorListenComplete(\n      viewProcessor,\n      oldViewCache,\n      operation.path,\n      writesCache,\n      accumulator\n    );\n  } else {\n    throw assertionError('Unknown operation type: ' + operation.type);\n  }\n  const changes = accumulator.getChanges();\n  viewProcessorMaybeAddValueEvent(oldViewCache, newViewCache, changes);\n  return { viewCache: newViewCache, changes };\n}\n\nfunction viewProcessorMaybeAddValueEvent(\n  oldViewCache: ViewCache,\n  newViewCache: ViewCache,\n  accumulator: Change[]\n): void {\n  const eventSnap = newViewCache.eventCache;\n  if (eventSnap.isFullyInitialized()) {\n    const isLeafOrEmpty =\n      eventSnap.getNode().isLeafNode() || eventSnap.getNode().isEmpty();\n    const oldCompleteSnap = viewCacheGetCompleteEventSnap(oldViewCache);\n    if (\n      accumulator.length > 0 ||\n      !oldViewCache.eventCache.isFullyInitialized() ||\n      (isLeafOrEmpty && !eventSnap.getNode().equals(oldCompleteSnap)) ||\n      !eventSnap.getNode().getPriority().equals(oldCompleteSnap.getPriority())\n    ) {\n      accumulator.push(\n        changeValue(viewCacheGetCompleteEventSnap(newViewCache))\n      );\n    }\n  }\n}\n\nfunction viewProcessorGenerateEventCacheAfterServerEvent(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  changePath: Path,\n  writesCache: WriteTreeRef,\n  source: CompleteChildSource,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  const oldEventSnap = viewCache.eventCache;\n  if (writeTreeRefShadowingWrite(writesCache, changePath) != null) {\n    // we have a shadowing write, ignore changes\n    return viewCache;\n  } else {\n    let newEventCache, serverNode;\n    if (pathIsEmpty(changePath)) {\n      // TODO: figure out how this plays with \"sliding ack windows\"\n      assert(\n        viewCache.serverCache.isFullyInitialized(),\n        'If change path is empty, we must have complete server data'\n      );\n      if (viewCache.serverCache.isFiltered()) {\n        // We need to special case this, because we need to only apply writes to complete children, or\n        // we might end up raising events for incomplete children. If the server data is filtered deep\n        // writes cannot be guaranteed to be complete\n        const serverCache = viewCacheGetCompleteServerSnap(viewCache);\n        const completeChildren =\n          serverCache instanceof ChildrenNode\n            ? serverCache\n            : ChildrenNode.EMPTY_NODE;\n        const completeEventChildren = writeTreeRefCalcCompleteEventChildren(\n          writesCache,\n          completeChildren\n        );\n        newEventCache = viewProcessor.filter.updateFullNode(\n          viewCache.eventCache.getNode(),\n          completeEventChildren,\n          accumulator\n        );\n      } else {\n        const completeNode = writeTreeRefCalcCompleteEventCache(\n          writesCache,\n          viewCacheGetCompleteServerSnap(viewCache)\n        );\n        newEventCache = viewProcessor.filter.updateFullNode(\n          viewCache.eventCache.getNode(),\n          completeNode,\n          accumulator\n        );\n      }\n    } else {\n      const childKey = pathGetFront(changePath);\n      if (childKey === '.priority') {\n        assert(\n          pathGetLength(changePath) === 1,\n          \"Can't have a priority with additional path components\"\n        );\n        const oldEventNode = oldEventSnap.getNode();\n        serverNode = viewCache.serverCache.getNode();\n        // we might have overwrites for this priority\n        const updatedPriority = writeTreeRefCalcEventCacheAfterServerOverwrite(\n          writesCache,\n          changePath,\n          oldEventNode,\n          serverNode\n        );\n        if (updatedPriority != null) {\n          newEventCache = viewProcessor.filter.updatePriority(\n            oldEventNode,\n            updatedPriority\n          );\n        } else {\n          // priority didn't change, keep old node\n          newEventCache = oldEventSnap.getNode();\n        }\n      } else {\n        const childChangePath = pathPopFront(changePath);\n        // update child\n        let newEventChild;\n        if (oldEventSnap.isCompleteForChild(childKey)) {\n          serverNode = viewCache.serverCache.getNode();\n          const eventChildUpdate =\n            writeTreeRefCalcEventCacheAfterServerOverwrite(\n              writesCache,\n              changePath,\n              oldEventSnap.getNode(),\n              serverNode\n            );\n          if (eventChildUpdate != null) {\n            newEventChild = oldEventSnap\n              .getNode()\n              .getImmediateChild(childKey)\n              .updateChild(childChangePath, eventChildUpdate);\n          } else {\n            // Nothing changed, just keep the old child\n            newEventChild = oldEventSnap.getNode().getImmediateChild(childKey);\n          }\n        } else {\n          newEventChild = writeTreeRefCalcCompleteChild(\n            writesCache,\n            childKey,\n            viewCache.serverCache\n          );\n        }\n        if (newEventChild != null) {\n          newEventCache = viewProcessor.filter.updateChild(\n            oldEventSnap.getNode(),\n            childKey,\n            newEventChild,\n            childChangePath,\n            source,\n            accumulator\n          );\n        } else {\n          // no complete child available or no change\n          newEventCache = oldEventSnap.getNode();\n        }\n      }\n    }\n    return viewCacheUpdateEventSnap(\n      viewCache,\n      newEventCache,\n      oldEventSnap.isFullyInitialized() || pathIsEmpty(changePath),\n      viewProcessor.filter.filtersNodes()\n    );\n  }\n}\n\nfunction viewProcessorApplyServerOverwrite(\n  viewProcessor: ViewProcessor,\n  oldViewCache: ViewCache,\n  changePath: Path,\n  changedSnap: Node,\n  writesCache: WriteTreeRef,\n  completeCache: Node | null,\n  filterServerNode: boolean,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  const oldServerSnap = oldViewCache.serverCache;\n  let newServerCache;\n  const serverFilter = filterServerNode\n    ? viewProcessor.filter\n    : viewProcessor.filter.getIndexedFilter();\n  if (pathIsEmpty(changePath)) {\n    newServerCache = serverFilter.updateFullNode(\n      oldServerSnap.getNode(),\n      changedSnap,\n      null\n    );\n  } else if (serverFilter.filtersNodes() && !oldServerSnap.isFiltered()) {\n    // we want to filter the server node, but we didn't filter the server node yet, so simulate a full update\n    const newServerNode = oldServerSnap\n      .getNode()\n      .updateChild(changePath, changedSnap);\n    newServerCache = serverFilter.updateFullNode(\n      oldServerSnap.getNode(),\n      newServerNode,\n      null\n    );\n  } else {\n    const childKey = pathGetFront(changePath);\n    if (\n      !oldServerSnap.isCompleteForPath(changePath) &&\n      pathGetLength(changePath) > 1\n    ) {\n      // We don't update incomplete nodes with updates intended for other listeners\n      return oldViewCache;\n    }\n    const childChangePath = pathPopFront(changePath);\n    const childNode = oldServerSnap.getNode().getImmediateChild(childKey);\n    const newChildNode = childNode.updateChild(childChangePath, changedSnap);\n    if (childKey === '.priority') {\n      newServerCache = serverFilter.updatePriority(\n        oldServerSnap.getNode(),\n        newChildNode\n      );\n    } else {\n      newServerCache = serverFilter.updateChild(\n        oldServerSnap.getNode(),\n        childKey,\n        newChildNode,\n        childChangePath,\n        NO_COMPLETE_CHILD_SOURCE,\n        null\n      );\n    }\n  }\n  const newViewCache = viewCacheUpdateServerSnap(\n    oldViewCache,\n    newServerCache,\n    oldServerSnap.isFullyInitialized() || pathIsEmpty(changePath),\n    serverFilter.filtersNodes()\n  );\n  const source = new WriteTreeCompleteChildSource(\n    writesCache,\n    newViewCache,\n    completeCache\n  );\n  return viewProcessorGenerateEventCacheAfterServerEvent(\n    viewProcessor,\n    newViewCache,\n    changePath,\n    writesCache,\n    source,\n    accumulator\n  );\n}\n\nfunction viewProcessorApplyUserOverwrite(\n  viewProcessor: ViewProcessor,\n  oldViewCache: ViewCache,\n  changePath: Path,\n  changedSnap: Node,\n  writesCache: WriteTreeRef,\n  completeCache: Node | null,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  const oldEventSnap = oldViewCache.eventCache;\n  let newViewCache, newEventCache;\n  const source = new WriteTreeCompleteChildSource(\n    writesCache,\n    oldViewCache,\n    completeCache\n  );\n  if (pathIsEmpty(changePath)) {\n    newEventCache = viewProcessor.filter.updateFullNode(\n      oldViewCache.eventCache.getNode(),\n      changedSnap,\n      accumulator\n    );\n    newViewCache = viewCacheUpdateEventSnap(\n      oldViewCache,\n      newEventCache,\n      true,\n      viewProcessor.filter.filtersNodes()\n    );\n  } else {\n    const childKey = pathGetFront(changePath);\n    if (childKey === '.priority') {\n      newEventCache = viewProcessor.filter.updatePriority(\n        oldViewCache.eventCache.getNode(),\n        changedSnap\n      );\n      newViewCache = viewCacheUpdateEventSnap(\n        oldViewCache,\n        newEventCache,\n        oldEventSnap.isFullyInitialized(),\n        oldEventSnap.isFiltered()\n      );\n    } else {\n      const childChangePath = pathPopFront(changePath);\n      const oldChild = oldEventSnap.getNode().getImmediateChild(childKey);\n      let newChild;\n      if (pathIsEmpty(childChangePath)) {\n        // Child overwrite, we can replace the child\n        newChild = changedSnap;\n      } else {\n        const childNode = source.getCompleteChild(childKey);\n        if (childNode != null) {\n          if (\n            pathGetBack(childChangePath) === '.priority' &&\n            childNode.getChild(pathParent(childChangePath)).isEmpty()\n          ) {\n            // This is a priority update on an empty node. If this node exists on the server, the\n            // server will send down the priority in the update, so ignore for now\n            newChild = childNode;\n          } else {\n            newChild = childNode.updateChild(childChangePath, changedSnap);\n          }\n        } else {\n          // There is no complete child node available\n          newChild = ChildrenNode.EMPTY_NODE;\n        }\n      }\n      if (!oldChild.equals(newChild)) {\n        const newEventSnap = viewProcessor.filter.updateChild(\n          oldEventSnap.getNode(),\n          childKey,\n          newChild,\n          childChangePath,\n          source,\n          accumulator\n        );\n        newViewCache = viewCacheUpdateEventSnap(\n          oldViewCache,\n          newEventSnap,\n          oldEventSnap.isFullyInitialized(),\n          viewProcessor.filter.filtersNodes()\n        );\n      } else {\n        newViewCache = oldViewCache;\n      }\n    }\n  }\n  return newViewCache;\n}\n\nfunction viewProcessorCacheHasChild(\n  viewCache: ViewCache,\n  childKey: string\n): boolean {\n  return viewCache.eventCache.isCompleteForChild(childKey);\n}\n\nfunction viewProcessorApplyUserMerge(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  path: Path,\n  changedChildren: ImmutableTree<Node>,\n  writesCache: WriteTreeRef,\n  serverCache: Node | null,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  // HACK: In the case of a limit query, there may be some changes that bump things out of the\n  // window leaving room for new items.  It's important we process these changes first, so we\n  // iterate the changes twice, first processing any that affect items currently in view.\n  // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n  // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n  // not the other.\n  let curViewCache = viewCache;\n  changedChildren.foreach((relativePath, childNode) => {\n    const writePath = pathChild(path, relativePath);\n    if (viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\n      curViewCache = viewProcessorApplyUserOverwrite(\n        viewProcessor,\n        curViewCache,\n        writePath,\n        childNode,\n        writesCache,\n        serverCache,\n        accumulator\n      );\n    }\n  });\n\n  changedChildren.foreach((relativePath, childNode) => {\n    const writePath = pathChild(path, relativePath);\n    if (!viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\n      curViewCache = viewProcessorApplyUserOverwrite(\n        viewProcessor,\n        curViewCache,\n        writePath,\n        childNode,\n        writesCache,\n        serverCache,\n        accumulator\n      );\n    }\n  });\n\n  return curViewCache;\n}\n\nfunction viewProcessorApplyMerge(\n  viewProcessor: ViewProcessor,\n  node: Node,\n  merge: ImmutableTree<Node>\n): Node {\n  merge.foreach((relativePath, childNode) => {\n    node = node.updateChild(relativePath, childNode);\n  });\n  return node;\n}\n\nfunction viewProcessorApplyServerMerge(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  path: Path,\n  changedChildren: ImmutableTree<Node>,\n  writesCache: WriteTreeRef,\n  serverCache: Node | null,\n  filterServerNode: boolean,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  // If we don't have a cache yet, this merge was intended for a previously listen in the same location. Ignore it and\n  // wait for the complete data update coming soon.\n  if (\n    viewCache.serverCache.getNode().isEmpty() &&\n    !viewCache.serverCache.isFullyInitialized()\n  ) {\n    return viewCache;\n  }\n\n  // HACK: In the case of a limit query, there may be some changes that bump things out of the\n  // window leaving room for new items.  It's important we process these changes first, so we\n  // iterate the changes twice, first processing any that affect items currently in view.\n  // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n  // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n  // not the other.\n  let curViewCache = viewCache;\n  let viewMergeTree;\n  if (pathIsEmpty(path)) {\n    viewMergeTree = changedChildren;\n  } else {\n    viewMergeTree = new ImmutableTree<Node>(null).setTree(\n      path,\n      changedChildren\n    );\n  }\n  const serverNode = viewCache.serverCache.getNode();\n  viewMergeTree.children.inorderTraversal((childKey, childTree) => {\n    if (serverNode.hasChild(childKey)) {\n      const serverChild = viewCache.serverCache\n        .getNode()\n        .getImmediateChild(childKey);\n      const newChild = viewProcessorApplyMerge(\n        viewProcessor,\n        serverChild,\n        childTree\n      );\n      curViewCache = viewProcessorApplyServerOverwrite(\n        viewProcessor,\n        curViewCache,\n        new Path(childKey),\n        newChild,\n        writesCache,\n        serverCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  });\n  viewMergeTree.children.inorderTraversal((childKey, childMergeTree) => {\n    const isUnknownDeepMerge =\n      !viewCache.serverCache.isCompleteForChild(childKey) &&\n      childMergeTree.value === undefined;\n    if (!serverNode.hasChild(childKey) && !isUnknownDeepMerge) {\n      const serverChild = viewCache.serverCache\n        .getNode()\n        .getImmediateChild(childKey);\n      const newChild = viewProcessorApplyMerge(\n        viewProcessor,\n        serverChild,\n        childMergeTree\n      );\n      curViewCache = viewProcessorApplyServerOverwrite(\n        viewProcessor,\n        curViewCache,\n        new Path(childKey),\n        newChild,\n        writesCache,\n        serverCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  });\n\n  return curViewCache;\n}\n\nfunction viewProcessorAckUserWrite(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  ackPath: Path,\n  affectedTree: ImmutableTree<boolean>,\n  writesCache: WriteTreeRef,\n  completeCache: Node | null,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  if (writeTreeRefShadowingWrite(writesCache, ackPath) != null) {\n    return viewCache;\n  }\n\n  // Only filter server node if it is currently filtered\n  const filterServerNode = viewCache.serverCache.isFiltered();\n\n  // Essentially we'll just get our existing server cache for the affected paths and re-apply it as a server update\n  // now that it won't be shadowed.\n  const serverCache = viewCache.serverCache;\n  if (affectedTree.value != null) {\n    // This is an overwrite.\n    if (\n      (pathIsEmpty(ackPath) && serverCache.isFullyInitialized()) ||\n      serverCache.isCompleteForPath(ackPath)\n    ) {\n      return viewProcessorApplyServerOverwrite(\n        viewProcessor,\n        viewCache,\n        ackPath,\n        serverCache.getNode().getChild(ackPath),\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    } else if (pathIsEmpty(ackPath)) {\n      // This is a goofy edge case where we are acking data at this location but don't have full data.  We\n      // should just re-apply whatever we have in our cache as a merge.\n      let changedChildren = new ImmutableTree<Node>(null);\n      serverCache.getNode().forEachChild(KEY_INDEX, (name, node) => {\n        changedChildren = changedChildren.set(new Path(name), node);\n      });\n      return viewProcessorApplyServerMerge(\n        viewProcessor,\n        viewCache,\n        ackPath,\n        changedChildren,\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    } else {\n      return viewCache;\n    }\n  } else {\n    // This is a merge.\n    let changedChildren = new ImmutableTree<Node>(null);\n    affectedTree.foreach((mergePath, value) => {\n      const serverCachePath = pathChild(ackPath, mergePath);\n      if (serverCache.isCompleteForPath(serverCachePath)) {\n        changedChildren = changedChildren.set(\n          mergePath,\n          serverCache.getNode().getChild(serverCachePath)\n        );\n      }\n    });\n    return viewProcessorApplyServerMerge(\n      viewProcessor,\n      viewCache,\n      ackPath,\n      changedChildren,\n      writesCache,\n      completeCache,\n      filterServerNode,\n      accumulator\n    );\n  }\n}\n\nfunction viewProcessorListenComplete(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  path: Path,\n  writesCache: WriteTreeRef,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  const oldServerNode = viewCache.serverCache;\n  const newViewCache = viewCacheUpdateServerSnap(\n    viewCache,\n    oldServerNode.getNode(),\n    oldServerNode.isFullyInitialized() || pathIsEmpty(path),\n    oldServerNode.isFiltered()\n  );\n  return viewProcessorGenerateEventCacheAfterServerEvent(\n    viewProcessor,\n    newViewCache,\n    path,\n    writesCache,\n    NO_COMPLETE_CHILD_SOURCE,\n    accumulator\n  );\n}\n\nfunction viewProcessorRevertUserWrite(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  path: Path,\n  writesCache: WriteTreeRef,\n  completeServerCache: Node | null,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  let complete;\n  if (writeTreeRefShadowingWrite(writesCache, path) != null) {\n    return viewCache;\n  } else {\n    const source = new WriteTreeCompleteChildSource(\n      writesCache,\n      viewCache,\n      completeServerCache\n    );\n    const oldEventCache = viewCache.eventCache.getNode();\n    let newEventCache;\n    if (pathIsEmpty(path) || pathGetFront(path) === '.priority') {\n      let newNode;\n      if (viewCache.serverCache.isFullyInitialized()) {\n        newNode = writeTreeRefCalcCompleteEventCache(\n          writesCache,\n          viewCacheGetCompleteServerSnap(viewCache)\n        );\n      } else {\n        const serverChildren = viewCache.serverCache.getNode();\n        assert(\n          serverChildren instanceof ChildrenNode,\n          'serverChildren would be complete if leaf node'\n        );\n        newNode = writeTreeRefCalcCompleteEventChildren(\n          writesCache,\n          serverChildren as ChildrenNode\n        );\n      }\n      newNode = newNode as Node;\n      newEventCache = viewProcessor.filter.updateFullNode(\n        oldEventCache,\n        newNode,\n        accumulator\n      );\n    } else {\n      const childKey = pathGetFront(path);\n      let newChild = writeTreeRefCalcCompleteChild(\n        writesCache,\n        childKey,\n        viewCache.serverCache\n      );\n      if (\n        newChild == null &&\n        viewCache.serverCache.isCompleteForChild(childKey)\n      ) {\n        newChild = oldEventCache.getImmediateChild(childKey);\n      }\n      if (newChild != null) {\n        newEventCache = viewProcessor.filter.updateChild(\n          oldEventCache,\n          childKey,\n          newChild,\n          pathPopFront(path),\n          source,\n          accumulator\n        );\n      } else if (viewCache.eventCache.getNode().hasChild(childKey)) {\n        // No complete child available, delete the existing one, if any\n        newEventCache = viewProcessor.filter.updateChild(\n          oldEventCache,\n          childKey,\n          ChildrenNode.EMPTY_NODE,\n          pathPopFront(path),\n          source,\n          accumulator\n        );\n      } else {\n        newEventCache = oldEventCache;\n      }\n      if (\n        newEventCache.isEmpty() &&\n        viewCache.serverCache.isFullyInitialized()\n      ) {\n        // We might have reverted all child writes. Maybe the old event was a leaf node\n        complete = writeTreeRefCalcCompleteEventCache(\n          writesCache,\n          viewCacheGetCompleteServerSnap(viewCache)\n        );\n        if (complete.isLeafNode()) {\n          newEventCache = viewProcessor.filter.updateFullNode(\n            newEventCache,\n            complete,\n            accumulator\n          );\n        }\n      }\n    }\n    complete =\n      viewCache.serverCache.isFullyInitialized() ||\n      writeTreeRefShadowingWrite(writesCache, newEmptyPath()) != null;\n    return viewCacheUpdateEventSnap(\n      viewCache,\n      newEventCache,\n      complete,\n      viewProcessor.filter.filtersNodes()\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Operation, OperationType } from '../operation/Operation';\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { PRIORITY_INDEX } from '../snap/indexes/PriorityIndex';\nimport { Node } from '../snap/Node';\nimport { Path, pathGetFront, pathIsEmpty } from '../util/Path';\nimport { WriteTreeRef } from '../WriteTree';\n\nimport { CacheNode } from './CacheNode';\nimport { Change, changeChildAdded, changeValue } from './Change';\nimport { CancelEvent, Event } from './Event';\nimport {\n  EventGenerator,\n  eventGeneratorGenerateEventsForChanges\n} from './EventGenerator';\nimport { EventRegistration, QueryContext } from './EventRegistration';\nimport { IndexedFilter } from './filter/IndexedFilter';\nimport { queryParamsGetNodeFilter } from './QueryParams';\nimport {\n  newViewCache,\n  ViewCache,\n  viewCacheGetCompleteEventSnap,\n  viewCacheGetCompleteServerSnap\n} from './ViewCache';\nimport {\n  newViewProcessor,\n  ViewProcessor,\n  viewProcessorApplyOperation,\n  viewProcessorAssertIndexed\n} from './ViewProcessor';\n\n/**\n * A view represents a specific location and query that has 1 or more event registrations.\n *\n * It does several things:\n *  - Maintains the list of event registrations for this location/query.\n *  - Maintains a cache of the data visible for this location/query.\n *  - Applies new operations (via applyOperation), updates the cache, and based on the event\n *    registrations returns the set of events to be raised.\n */\nexport class View {\n  processor_: ViewProcessor;\n  viewCache_: ViewCache;\n  eventRegistrations_: EventRegistration[] = [];\n  eventGenerator_: EventGenerator;\n\n  constructor(private query_: QueryContext, initialViewCache: ViewCache) {\n    const params = this.query_._queryParams;\n\n    const indexFilter = new IndexedFilter(params.getIndex());\n    const filter = queryParamsGetNodeFilter(params);\n\n    this.processor_ = newViewProcessor(filter);\n\n    const initialServerCache = initialViewCache.serverCache;\n    const initialEventCache = initialViewCache.eventCache;\n\n    // Don't filter server node with other filter than index, wait for tagged listen\n    const serverSnap = indexFilter.updateFullNode(\n      ChildrenNode.EMPTY_NODE,\n      initialServerCache.getNode(),\n      null\n    );\n    const eventSnap = filter.updateFullNode(\n      ChildrenNode.EMPTY_NODE,\n      initialEventCache.getNode(),\n      null\n    );\n    const newServerCache = new CacheNode(\n      serverSnap,\n      initialServerCache.isFullyInitialized(),\n      indexFilter.filtersNodes()\n    );\n    const newEventCache = new CacheNode(\n      eventSnap,\n      initialEventCache.isFullyInitialized(),\n      filter.filtersNodes()\n    );\n\n    this.viewCache_ = newViewCache(newEventCache, newServerCache);\n    this.eventGenerator_ = new EventGenerator(this.query_);\n  }\n\n  get query(): QueryContext {\n    return this.query_;\n  }\n}\n\nexport function viewGetServerCache(view: View): Node | null {\n  return view.viewCache_.serverCache.getNode();\n}\n\nexport function viewGetCompleteNode(view: View): Node | null {\n  return viewCacheGetCompleteEventSnap(view.viewCache_);\n}\n\nexport function viewGetCompleteServerCache(\n  view: View,\n  path: Path\n): Node | null {\n  const cache = viewCacheGetCompleteServerSnap(view.viewCache_);\n  if (cache) {\n    // If this isn't a \"loadsAllData\" view, then cache isn't actually a complete cache and\n    // we need to see if it contains the child we're interested in.\n    if (\n      view.query._queryParams.loadsAllData() ||\n      (!pathIsEmpty(path) &&\n        !cache.getImmediateChild(pathGetFront(path)).isEmpty())\n    ) {\n      return cache.getChild(path);\n    }\n  }\n  return null;\n}\n\nexport function viewIsEmpty(view: View): boolean {\n  return view.eventRegistrations_.length === 0;\n}\n\nexport function viewAddEventRegistration(\n  view: View,\n  eventRegistration: EventRegistration\n) {\n  view.eventRegistrations_.push(eventRegistration);\n}\n\n/**\n * @param eventRegistration - If null, remove all callbacks.\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\n * @returns Cancel events, if cancelError was provided.\n */\nexport function viewRemoveEventRegistration(\n  view: View,\n  eventRegistration: EventRegistration | null,\n  cancelError?: Error\n): Event[] {\n  const cancelEvents: CancelEvent[] = [];\n  if (cancelError) {\n    assert(\n      eventRegistration == null,\n      'A cancel should cancel all event registrations.'\n    );\n    const path = view.query._path;\n    view.eventRegistrations_.forEach(registration => {\n      const maybeEvent = registration.createCancelEvent(cancelError, path);\n      if (maybeEvent) {\n        cancelEvents.push(maybeEvent);\n      }\n    });\n  }\n\n  if (eventRegistration) {\n    let remaining = [];\n    for (let i = 0; i < view.eventRegistrations_.length; ++i) {\n      const existing = view.eventRegistrations_[i];\n      if (!existing.matches(eventRegistration)) {\n        remaining.push(existing);\n      } else if (eventRegistration.hasAnyCallback()) {\n        // We're removing just this one\n        remaining = remaining.concat(view.eventRegistrations_.slice(i + 1));\n        break;\n      }\n    }\n    view.eventRegistrations_ = remaining;\n  } else {\n    view.eventRegistrations_ = [];\n  }\n  return cancelEvents;\n}\n\n/**\n * Applies the given Operation, updates our cache, and returns the appropriate events.\n */\nexport function viewApplyOperation(\n  view: View,\n  operation: Operation,\n  writesCache: WriteTreeRef,\n  completeServerCache: Node | null\n): Event[] {\n  if (\n    operation.type === OperationType.MERGE &&\n    operation.source.queryId !== null\n  ) {\n    assert(\n      viewCacheGetCompleteServerSnap(view.viewCache_),\n      'We should always have a full cache before handling merges'\n    );\n    assert(\n      viewCacheGetCompleteEventSnap(view.viewCache_),\n      'Missing event cache, even though we have a server cache'\n    );\n  }\n\n  const oldViewCache = view.viewCache_;\n  const result = viewProcessorApplyOperation(\n    view.processor_,\n    oldViewCache,\n    operation,\n    writesCache,\n    completeServerCache\n  );\n  viewProcessorAssertIndexed(view.processor_, result.viewCache);\n\n  assert(\n    result.viewCache.serverCache.isFullyInitialized() ||\n      !oldViewCache.serverCache.isFullyInitialized(),\n    'Once a server snap is complete, it should never go back'\n  );\n\n  view.viewCache_ = result.viewCache;\n\n  return viewGenerateEventsForChanges_(\n    view,\n    result.changes,\n    result.viewCache.eventCache.getNode(),\n    null\n  );\n}\n\nexport function viewGetInitialEvents(\n  view: View,\n  registration: EventRegistration\n): Event[] {\n  const eventSnap = view.viewCache_.eventCache;\n  const initialChanges: Change[] = [];\n  if (!eventSnap.getNode().isLeafNode()) {\n    const eventNode = eventSnap.getNode() as ChildrenNode;\n    eventNode.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n      initialChanges.push(changeChildAdded(key, childNode));\n    });\n  }\n  if (eventSnap.isFullyInitialized()) {\n    initialChanges.push(changeValue(eventSnap.getNode()));\n  }\n  return viewGenerateEventsForChanges_(\n    view,\n    initialChanges,\n    eventSnap.getNode(),\n    registration\n  );\n}\n\nfunction viewGenerateEventsForChanges_(\n  view: View,\n  changes: Change[],\n  eventCache: Node,\n  eventRegistration?: EventRegistration\n): Event[] {\n  const registrations = eventRegistration\n    ? [eventRegistration]\n    : view.eventRegistrations_;\n  return eventGeneratorGenerateEventsForChanges(\n    view.eventGenerator_,\n    changes,\n    eventCache,\n    registrations\n  );\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ReferenceConstructor } from '../api/Reference';\n\nimport { Operation } from './operation/Operation';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Node } from './snap/Node';\nimport { Path } from './util/Path';\nimport { CacheNode } from './view/CacheNode';\nimport { Event } from './view/Event';\nimport { EventRegistration, QueryContext } from './view/EventRegistration';\nimport {\n  View,\n  viewAddEventRegistration,\n  viewApplyOperation,\n  viewGetCompleteServerCache,\n  viewGetInitialEvents,\n  viewIsEmpty,\n  viewRemoveEventRegistration\n} from './view/View';\nimport { newViewCache } from './view/ViewCache';\nimport {\n  WriteTreeRef,\n  writeTreeRefCalcCompleteEventCache,\n  writeTreeRefCalcCompleteEventChildren\n} from './WriteTree';\n\nlet referenceConstructor: ReferenceConstructor;\n\n/**\n * SyncPoint represents a single location in a SyncTree with 1 or more event registrations, meaning we need to\n * maintain 1 or more Views at this location to cache server data and raise appropriate events for server changes\n * and user writes (set, transaction, update).\n *\n * It's responsible for:\n *  - Maintaining the set of 1 or more views necessary at this location (a SyncPoint with 0 views should be removed).\n *  - Proxying user / server operations to the views as appropriate (i.e. applyServerOverwrite,\n *    applyUserOverwrite, etc.)\n */\nexport class SyncPoint {\n  /**\n   * The Views being tracked at this location in the tree, stored as a map where the key is a\n   * queryId and the value is the View for that query.\n   *\n   * NOTE: This list will be quite small (usually 1, but perhaps 2 or 3; any more is an odd use case).\n   */\n  readonly views: Map<string, View> = new Map();\n}\n\nexport function syncPointSetReferenceConstructor(\n  val: ReferenceConstructor\n): void {\n  assert(\n    !referenceConstructor,\n    '__referenceConstructor has already been defined'\n  );\n  referenceConstructor = val;\n}\n\nfunction syncPointGetReferenceConstructor(): ReferenceConstructor {\n  assert(referenceConstructor, 'Reference.ts has not been loaded');\n  return referenceConstructor;\n}\n\nexport function syncPointIsEmpty(syncPoint: SyncPoint): boolean {\n  return syncPoint.views.size === 0;\n}\n\nexport function syncPointApplyOperation(\n  syncPoint: SyncPoint,\n  operation: Operation,\n  writesCache: WriteTreeRef,\n  optCompleteServerCache: Node | null\n): Event[] {\n  const queryId = operation.source.queryId;\n  if (queryId !== null) {\n    const view = syncPoint.views.get(queryId);\n    assert(view != null, 'SyncTree gave us an op for an invalid query.');\n    return viewApplyOperation(\n      view,\n      operation,\n      writesCache,\n      optCompleteServerCache\n    );\n  } else {\n    let events: Event[] = [];\n\n    for (const view of syncPoint.views.values()) {\n      events = events.concat(\n        viewApplyOperation(view, operation, writesCache, optCompleteServerCache)\n      );\n    }\n\n    return events;\n  }\n}\n\n/**\n * Get a view for the specified query.\n *\n * @param query - The query to return a view for\n * @param writesCache\n * @param serverCache\n * @param serverCacheComplete\n * @returns Events to raise.\n */\nexport function syncPointGetView(\n  syncPoint: SyncPoint,\n  query: QueryContext,\n  writesCache: WriteTreeRef,\n  serverCache: Node | null,\n  serverCacheComplete: boolean\n): View {\n  const queryId = query._queryIdentifier;\n  const view = syncPoint.views.get(queryId);\n  if (!view) {\n    // TODO: make writesCache take flag for complete server node\n    let eventCache = writeTreeRefCalcCompleteEventCache(\n      writesCache,\n      serverCacheComplete ? serverCache : null\n    );\n    let eventCacheComplete = false;\n    if (eventCache) {\n      eventCacheComplete = true;\n    } else if (serverCache instanceof ChildrenNode) {\n      eventCache = writeTreeRefCalcCompleteEventChildren(\n        writesCache,\n        serverCache\n      );\n      eventCacheComplete = false;\n    } else {\n      eventCache = ChildrenNode.EMPTY_NODE;\n      eventCacheComplete = false;\n    }\n    const viewCache = newViewCache(\n      new CacheNode(eventCache, eventCacheComplete, false),\n      new CacheNode(serverCache, serverCacheComplete, false)\n    );\n    return new View(query, viewCache);\n  }\n  return view;\n}\n\n/**\n * Add an event callback for the specified query.\n *\n * @param query\n * @param eventRegistration\n * @param writesCache\n * @param serverCache - Complete server cache, if we have it.\n * @param serverCacheComplete\n * @returns Events to raise.\n */\nexport function syncPointAddEventRegistration(\n  syncPoint: SyncPoint,\n  query: QueryContext,\n  eventRegistration: EventRegistration,\n  writesCache: WriteTreeRef,\n  serverCache: Node | null,\n  serverCacheComplete: boolean\n): Event[] {\n  const view = syncPointGetView(\n    syncPoint,\n    query,\n    writesCache,\n    serverCache,\n    serverCacheComplete\n  );\n  if (!syncPoint.views.has(query._queryIdentifier)) {\n    syncPoint.views.set(query._queryIdentifier, view);\n  }\n  // This is guaranteed to exist now, we just created anything that was missing\n  viewAddEventRegistration(view, eventRegistration);\n  return viewGetInitialEvents(view, eventRegistration);\n}\n\n/**\n * Remove event callback(s).  Return cancelEvents if a cancelError is specified.\n *\n * If query is the default query, we'll check all views for the specified eventRegistration.\n * If eventRegistration is null, we'll remove all callbacks for the specified view(s).\n *\n * @param eventRegistration - If null, remove all callbacks.\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\n * @returns removed queries and any cancel events\n */\nexport function syncPointRemoveEventRegistration(\n  syncPoint: SyncPoint,\n  query: QueryContext,\n  eventRegistration: EventRegistration | null,\n  cancelError?: Error\n): { removed: QueryContext[]; events: Event[] } {\n  const queryId = query._queryIdentifier;\n  const removed: QueryContext[] = [];\n  let cancelEvents: Event[] = [];\n  const hadCompleteView = syncPointHasCompleteView(syncPoint);\n  if (queryId === 'default') {\n    // When you do ref.off(...), we search all views for the registration to remove.\n    for (const [viewQueryId, view] of syncPoint.views.entries()) {\n      cancelEvents = cancelEvents.concat(\n        viewRemoveEventRegistration(view, eventRegistration, cancelError)\n      );\n      if (viewIsEmpty(view)) {\n        syncPoint.views.delete(viewQueryId);\n\n        // We'll deal with complete views later.\n        if (!view.query._queryParams.loadsAllData()) {\n          removed.push(view.query);\n        }\n      }\n    }\n  } else {\n    // remove the callback from the specific view.\n    const view = syncPoint.views.get(queryId);\n    if (view) {\n      cancelEvents = cancelEvents.concat(\n        viewRemoveEventRegistration(view, eventRegistration, cancelError)\n      );\n      if (viewIsEmpty(view)) {\n        syncPoint.views.delete(queryId);\n\n        // We'll deal with complete views later.\n        if (!view.query._queryParams.loadsAllData()) {\n          removed.push(view.query);\n        }\n      }\n    }\n  }\n\n  if (hadCompleteView && !syncPointHasCompleteView(syncPoint)) {\n    // We removed our last complete view.\n    removed.push(\n      new (syncPointGetReferenceConstructor())(query._repo, query._path)\n    );\n  }\n\n  return { removed, events: cancelEvents };\n}\n\nexport function syncPointGetQueryViews(syncPoint: SyncPoint): View[] {\n  const result = [];\n  for (const view of syncPoint.views.values()) {\n    if (!view.query._queryParams.loadsAllData()) {\n      result.push(view);\n    }\n  }\n  return result;\n}\n\n/**\n * @param path - The path to the desired complete snapshot\n * @returns A complete cache, if it exists\n */\nexport function syncPointGetCompleteServerCache(\n  syncPoint: SyncPoint,\n  path: Path\n): Node | null {\n  let serverCache: Node | null = null;\n  for (const view of syncPoint.views.values()) {\n    serverCache = serverCache || viewGetCompleteServerCache(view, path);\n  }\n  return serverCache;\n}\n\nexport function syncPointViewForQuery(\n  syncPoint: SyncPoint,\n  query: QueryContext\n): View | null {\n  const params = query._queryParams;\n  if (params.loadsAllData()) {\n    return syncPointGetCompleteView(syncPoint);\n  } else {\n    const queryId = query._queryIdentifier;\n    return syncPoint.views.get(queryId);\n  }\n}\n\nexport function syncPointViewExistsForQuery(\n  syncPoint: SyncPoint,\n  query: QueryContext\n): boolean {\n  return syncPointViewForQuery(syncPoint, query) != null;\n}\n\nexport function syncPointHasCompleteView(syncPoint: SyncPoint): boolean {\n  return syncPointGetCompleteView(syncPoint) != null;\n}\n\nexport function syncPointGetCompleteView(syncPoint: SyncPoint): View | null {\n  for (const view of syncPoint.views.values()) {\n    if (view.query._queryParams.loadsAllData()) {\n      return view;\n    }\n  }\n  return null;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ReferenceConstructor } from '../api/Reference';\n\nimport { AckUserWrite } from './operation/AckUserWrite';\nimport { ListenComplete } from './operation/ListenComplete';\nimport { Merge } from './operation/Merge';\nimport {\n  newOperationSourceServer,\n  newOperationSourceServerTaggedQuery,\n  newOperationSourceUser,\n  Operation\n} from './operation/Operation';\nimport { Overwrite } from './operation/Overwrite';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Node } from './snap/Node';\nimport {\n  SyncPoint,\n  syncPointAddEventRegistration,\n  syncPointApplyOperation,\n  syncPointGetCompleteServerCache,\n  syncPointGetCompleteView,\n  syncPointGetQueryViews,\n  syncPointGetView,\n  syncPointHasCompleteView,\n  syncPointIsEmpty,\n  syncPointRemoveEventRegistration,\n  syncPointViewExistsForQuery,\n  syncPointViewForQuery\n} from './SyncPoint';\nimport { ImmutableTree } from './util/ImmutableTree';\nimport {\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathGetFront,\n  pathIsEmpty\n} from './util/Path';\nimport { each, errorForServerCode } from './util/util';\nimport { CacheNode } from './view/CacheNode';\nimport { Event } from './view/Event';\nimport { EventRegistration, QueryContext } from './view/EventRegistration';\nimport { View, viewGetCompleteNode, viewGetServerCache } from './view/View';\nimport {\n  newWriteTree,\n  WriteTree,\n  writeTreeAddMerge,\n  writeTreeAddOverwrite,\n  writeTreeCalcCompleteEventCache,\n  writeTreeChildWrites,\n  writeTreeGetWrite,\n  WriteTreeRef,\n  writeTreeRefChild,\n  writeTreeRemoveWrite\n} from './WriteTree';\n\nlet referenceConstructor: ReferenceConstructor;\n\nexport function syncTreeSetReferenceConstructor(\n  val: ReferenceConstructor\n): void {\n  assert(\n    !referenceConstructor,\n    '__referenceConstructor has already been defined'\n  );\n  referenceConstructor = val;\n}\n\nfunction syncTreeGetReferenceConstructor(): ReferenceConstructor {\n  assert(referenceConstructor, 'Reference.ts has not been loaded');\n  return referenceConstructor;\n}\n\nexport interface ListenProvider {\n  startListening(\n    query: QueryContext,\n    tag: number | null,\n    hashFn: () => string,\n    onComplete: (a: string, b?: unknown) => Event[]\n  ): Event[];\n\n  stopListening(a: QueryContext, b: number | null): void;\n}\n\n/**\n * Static tracker for next query tag.\n */\nlet syncTreeNextQueryTag_ = 1;\n\n/**\n * SyncTree is the central class for managing event callback registration, data caching, views\n * (query processing), and event generation.  There are typically two SyncTree instances for\n * each Repo, one for the normal Firebase data, and one for the .info data.\n *\n * It has a number of responsibilities, including:\n *  - Tracking all user event callbacks (registered via addEventRegistration() and removeEventRegistration()).\n *  - Applying and caching data changes for user set(), transaction(), and update() calls\n *    (applyUserOverwrite(), applyUserMerge()).\n *  - Applying and caching data changes for server data changes (applyServerOverwrite(),\n *    applyServerMerge()).\n *  - Generating user-facing events for server and user changes (all of the apply* methods\n *    return the set of events that need to be raised as a result).\n *  - Maintaining the appropriate set of server listens to ensure we are always subscribed\n *    to the correct set of paths and queries to satisfy the current set of user event\n *    callbacks (listens are started/stopped using the provided listenProvider).\n *\n * NOTE: Although SyncTree tracks event callbacks and calculates events to raise, the actual\n * events are returned to the caller rather than raised synchronously.\n *\n */\nexport class SyncTree {\n  /**\n   * Tree of SyncPoints.  There's a SyncPoint at any location that has 1 or more views.\n   */\n  syncPointTree_: ImmutableTree<SyncPoint> = new ImmutableTree<SyncPoint>(null);\n\n  /**\n   * A tree of all pending user writes (user-initiated set()'s, transaction()'s, update()'s, etc.).\n   */\n  pendingWriteTree_: WriteTree = newWriteTree();\n\n  readonly tagToQueryMap: Map<number, string> = new Map();\n  readonly queryToTagMap: Map<string, number> = new Map();\n\n  /**\n   * @param listenProvider_ - Used by SyncTree to start / stop listening\n   *   to server data.\n   */\n  constructor(public listenProvider_: ListenProvider) {}\n}\n\n/**\n * Apply the data changes for a user-generated set() or transaction() call.\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyUserOverwrite(\n  syncTree: SyncTree,\n  path: Path,\n  newData: Node,\n  writeId: number,\n  visible?: boolean\n): Event[] {\n  // Record pending write.\n  writeTreeAddOverwrite(\n    syncTree.pendingWriteTree_,\n    path,\n    newData,\n    writeId,\n    visible\n  );\n\n  if (!visible) {\n    return [];\n  } else {\n    return syncTreeApplyOperationToSyncPoints_(\n      syncTree,\n      new Overwrite(newOperationSourceUser(), path, newData)\n    );\n  }\n}\n\n/**\n * Apply the data from a user-generated update() call\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyUserMerge(\n  syncTree: SyncTree,\n  path: Path,\n  changedChildren: { [k: string]: Node },\n  writeId: number\n): Event[] {\n  // Record pending merge.\n  writeTreeAddMerge(syncTree.pendingWriteTree_, path, changedChildren, writeId);\n\n  const changeTree = ImmutableTree.fromObject(changedChildren);\n\n  return syncTreeApplyOperationToSyncPoints_(\n    syncTree,\n    new Merge(newOperationSourceUser(), path, changeTree)\n  );\n}\n\n/**\n * Acknowledge a pending user write that was previously registered with applyUserOverwrite() or applyUserMerge().\n *\n * @param revert - True if the given write failed and needs to be reverted\n * @returns Events to raise.\n */\nexport function syncTreeAckUserWrite(\n  syncTree: SyncTree,\n  writeId: number,\n  revert: boolean = false\n) {\n  const write = writeTreeGetWrite(syncTree.pendingWriteTree_, writeId);\n  const needToReevaluate = writeTreeRemoveWrite(\n    syncTree.pendingWriteTree_,\n    writeId\n  );\n  if (!needToReevaluate) {\n    return [];\n  } else {\n    let affectedTree = new ImmutableTree<boolean>(null);\n    if (write.snap != null) {\n      // overwrite\n      affectedTree = affectedTree.set(newEmptyPath(), true);\n    } else {\n      each(write.children, (pathString: string) => {\n        affectedTree = affectedTree.set(new Path(pathString), true);\n      });\n    }\n    return syncTreeApplyOperationToSyncPoints_(\n      syncTree,\n      new AckUserWrite(write.path, affectedTree, revert)\n    );\n  }\n}\n\n/**\n * Apply new server data for the specified path..\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyServerOverwrite(\n  syncTree: SyncTree,\n  path: Path,\n  newData: Node\n): Event[] {\n  return syncTreeApplyOperationToSyncPoints_(\n    syncTree,\n    new Overwrite(newOperationSourceServer(), path, newData)\n  );\n}\n\n/**\n * Apply new server data to be merged in at the specified path.\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyServerMerge(\n  syncTree: SyncTree,\n  path: Path,\n  changedChildren: { [k: string]: Node }\n): Event[] {\n  const changeTree = ImmutableTree.fromObject(changedChildren);\n\n  return syncTreeApplyOperationToSyncPoints_(\n    syncTree,\n    new Merge(newOperationSourceServer(), path, changeTree)\n  );\n}\n\n/**\n * Apply a listen complete for a query\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyListenComplete(\n  syncTree: SyncTree,\n  path: Path\n): Event[] {\n  return syncTreeApplyOperationToSyncPoints_(\n    syncTree,\n    new ListenComplete(newOperationSourceServer(), path)\n  );\n}\n\n/**\n * Apply a listen complete for a tagged query\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyTaggedListenComplete(\n  syncTree: SyncTree,\n  path: Path,\n  tag: number\n): Event[] {\n  const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n  if (queryKey) {\n    const r = syncTreeParseQueryKey_(queryKey);\n    const queryPath = r.path,\n      queryId = r.queryId;\n    const relativePath = newRelativePath(queryPath, path);\n    const op = new ListenComplete(\n      newOperationSourceServerTaggedQuery(queryId),\n      relativePath\n    );\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n  } else {\n    // We've already removed the query. No big deal, ignore the update\n    return [];\n  }\n}\n\n/**\n * Remove event callback(s).\n *\n * If query is the default query, we'll check all queries for the specified eventRegistration.\n * If eventRegistration is null, we'll remove all callbacks for the specified query/queries.\n *\n * @param eventRegistration - If null, all callbacks are removed.\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\n * @returns Cancel events, if cancelError was provided.\n */\nexport function syncTreeRemoveEventRegistration(\n  syncTree: SyncTree,\n  query: QueryContext,\n  eventRegistration: EventRegistration | null,\n  cancelError?: Error\n): Event[] {\n  // Find the syncPoint first. Then deal with whether or not it has matching listeners\n  const path = query._path;\n  const maybeSyncPoint = syncTree.syncPointTree_.get(path);\n  let cancelEvents: Event[] = [];\n  // A removal on a default query affects all queries at that location. A removal on an indexed query, even one without\n  // other query constraints, does *not* affect all queries at that location. So this check must be for 'default', and\n  // not loadsAllData().\n  if (\n    maybeSyncPoint &&\n    (query._queryIdentifier === 'default' ||\n      syncPointViewExistsForQuery(maybeSyncPoint, query))\n  ) {\n    const removedAndEvents = syncPointRemoveEventRegistration(\n      maybeSyncPoint,\n      query,\n      eventRegistration,\n      cancelError\n    );\n    if (syncPointIsEmpty(maybeSyncPoint)) {\n      syncTree.syncPointTree_ = syncTree.syncPointTree_.remove(path);\n    }\n    const removed = removedAndEvents.removed;\n    cancelEvents = removedAndEvents.events;\n    // We may have just removed one of many listeners and can short-circuit this whole process\n    // We may also not have removed a default listener, in which case all of the descendant listeners should already be\n    // properly set up.\n    //\n    // Since indexed queries can shadow if they don't have other query constraints, check for loadsAllData(), instead of\n    // queryId === 'default'\n    const removingDefault =\n      -1 !==\n      removed.findIndex(query => {\n        return query._queryParams.loadsAllData();\n      });\n    const covered = syncTree.syncPointTree_.findOnPath(\n      path,\n      (relativePath, parentSyncPoint) =>\n        syncPointHasCompleteView(parentSyncPoint)\n    );\n\n    if (removingDefault && !covered) {\n      const subtree = syncTree.syncPointTree_.subtree(path);\n      // There are potentially child listeners. Determine what if any listens we need to send before executing the\n      // removal\n      if (!subtree.isEmpty()) {\n        // We need to fold over our subtree and collect the listeners to send\n        const newViews = syncTreeCollectDistinctViewsForSubTree_(subtree);\n\n        // Ok, we've collected all the listens we need. Set them up.\n        for (let i = 0; i < newViews.length; ++i) {\n          const view = newViews[i],\n            newQuery = view.query;\n          const listener = syncTreeCreateListenerForView_(syncTree, view);\n          syncTree.listenProvider_.startListening(\n            syncTreeQueryForListening_(newQuery),\n            syncTreeTagForQuery_(syncTree, newQuery),\n            listener.hashFn,\n            listener.onComplete\n          );\n        }\n      } else {\n        // There's nothing below us, so nothing we need to start listening on\n      }\n    }\n    // If we removed anything and we're not covered by a higher up listen, we need to stop listening on this query\n    // The above block has us covered in terms of making sure we're set up on listens lower in the tree.\n    // Also, note that if we have a cancelError, it's already been removed at the provider level.\n    if (!covered && removed.length > 0 && !cancelError) {\n      // If we removed a default, then we weren't listening on any of the other queries here. Just cancel the one\n      // default. Otherwise, we need to iterate through and cancel each individual query\n      if (removingDefault) {\n        // We don't tag default listeners\n        const defaultTag: number | null = null;\n        syncTree.listenProvider_.stopListening(\n          syncTreeQueryForListening_(query),\n          defaultTag\n        );\n      } else {\n        removed.forEach((queryToRemove: QueryContext) => {\n          const tagToRemove = syncTree.queryToTagMap.get(\n            syncTreeMakeQueryKey_(queryToRemove)\n          );\n          syncTree.listenProvider_.stopListening(\n            syncTreeQueryForListening_(queryToRemove),\n            tagToRemove\n          );\n        });\n      }\n    }\n    // Now, clear all of the tags we're tracking for the removed listens\n    syncTreeRemoveTags_(syncTree, removed);\n  } else {\n    // No-op, this listener must've been already removed\n  }\n  return cancelEvents;\n}\n\n/**\n * Apply new server data for the specified tagged query.\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyTaggedQueryOverwrite(\n  syncTree: SyncTree,\n  path: Path,\n  snap: Node,\n  tag: number\n): Event[] {\n  const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n  if (queryKey != null) {\n    const r = syncTreeParseQueryKey_(queryKey);\n    const queryPath = r.path,\n      queryId = r.queryId;\n    const relativePath = newRelativePath(queryPath, path);\n    const op = new Overwrite(\n      newOperationSourceServerTaggedQuery(queryId),\n      relativePath,\n      snap\n    );\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n  } else {\n    // Query must have been removed already\n    return [];\n  }\n}\n\n/**\n * Apply server data to be merged in for the specified tagged query.\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyTaggedQueryMerge(\n  syncTree: SyncTree,\n  path: Path,\n  changedChildren: { [k: string]: Node },\n  tag: number\n): Event[] {\n  const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n  if (queryKey) {\n    const r = syncTreeParseQueryKey_(queryKey);\n    const queryPath = r.path,\n      queryId = r.queryId;\n    const relativePath = newRelativePath(queryPath, path);\n    const changeTree = ImmutableTree.fromObject(changedChildren);\n    const op = new Merge(\n      newOperationSourceServerTaggedQuery(queryId),\n      relativePath,\n      changeTree\n    );\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n  } else {\n    // We've already removed the query. No big deal, ignore the update\n    return [];\n  }\n}\n\n/**\n * Add an event callback for the specified query.\n *\n * @returns Events to raise.\n */\nexport function syncTreeAddEventRegistration(\n  syncTree: SyncTree,\n  query: QueryContext,\n  eventRegistration: EventRegistration\n): Event[] {\n  const path = query._path;\n\n  let serverCache: Node | null = null;\n  let foundAncestorDefaultView = false;\n  // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\n  // Consider optimizing this once there's a better understanding of what actual behavior will be.\n  syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\n    const relativePath = newRelativePath(pathToSyncPoint, path);\n    serverCache =\n      serverCache || syncPointGetCompleteServerCache(sp, relativePath);\n    foundAncestorDefaultView =\n      foundAncestorDefaultView || syncPointHasCompleteView(sp);\n  });\n  let syncPoint = syncTree.syncPointTree_.get(path);\n  if (!syncPoint) {\n    syncPoint = new SyncPoint();\n    syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\n  } else {\n    foundAncestorDefaultView =\n      foundAncestorDefaultView || syncPointHasCompleteView(syncPoint);\n    serverCache =\n      serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n  }\n\n  let serverCacheComplete;\n  if (serverCache != null) {\n    serverCacheComplete = true;\n  } else {\n    serverCacheComplete = false;\n    serverCache = ChildrenNode.EMPTY_NODE;\n    const subtree = syncTree.syncPointTree_.subtree(path);\n    subtree.foreachChild((childName, childSyncPoint) => {\n      const completeCache = syncPointGetCompleteServerCache(\n        childSyncPoint,\n        newEmptyPath()\n      );\n      if (completeCache) {\n        serverCache = serverCache.updateImmediateChild(\n          childName,\n          completeCache\n        );\n      }\n    });\n  }\n\n  const viewAlreadyExists = syncPointViewExistsForQuery(syncPoint, query);\n  if (!viewAlreadyExists && !query._queryParams.loadsAllData()) {\n    // We need to track a tag for this query\n    const queryKey = syncTreeMakeQueryKey_(query);\n    assert(\n      !syncTree.queryToTagMap.has(queryKey),\n      'View does not exist, but we have a tag'\n    );\n    const tag = syncTreeGetNextQueryTag_();\n    syncTree.queryToTagMap.set(queryKey, tag);\n    syncTree.tagToQueryMap.set(tag, queryKey);\n  }\n  const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, path);\n  let events = syncPointAddEventRegistration(\n    syncPoint,\n    query,\n    eventRegistration,\n    writesCache,\n    serverCache,\n    serverCacheComplete\n  );\n  if (!viewAlreadyExists && !foundAncestorDefaultView) {\n    const view = syncPointViewForQuery(syncPoint, query);\n    events = events.concat(syncTreeSetupListener_(syncTree, query, view));\n  }\n  return events;\n}\n\n/**\n * Returns a complete cache, if we have one, of the data at a particular path. If the location does not have a\n * listener above it, we will get a false \"null\". This shouldn't be a problem because transactions will always\n * have a listener above, and atomic operations would correctly show a jitter of <increment value> ->\n *     <incremented total> as the write is applied locally and then acknowledged at the server.\n *\n * Note: this method will *include* hidden writes from transaction with applyLocally set to false.\n *\n * @param path - The path to the data we want\n * @param writeIdsToExclude - A specific set to be excluded\n */\nexport function syncTreeCalcCompleteEventCache(\n  syncTree: SyncTree,\n  path: Path,\n  writeIdsToExclude?: number[]\n): Node {\n  const includeHiddenSets = true;\n  const writeTree = syncTree.pendingWriteTree_;\n  const serverCache = syncTree.syncPointTree_.findOnPath(\n    path,\n    (pathSoFar, syncPoint) => {\n      const relativePath = newRelativePath(pathSoFar, path);\n      const serverCache = syncPointGetCompleteServerCache(\n        syncPoint,\n        relativePath\n      );\n      if (serverCache) {\n        return serverCache;\n      }\n    }\n  );\n  return writeTreeCalcCompleteEventCache(\n    writeTree,\n    path,\n    serverCache,\n    writeIdsToExclude,\n    includeHiddenSets\n  );\n}\n\nexport function syncTreeGetServerValue(\n  syncTree: SyncTree,\n  query: QueryContext\n): Node | null {\n  const path = query._path;\n  let serverCache: Node | null = null;\n  // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\n  // Consider optimizing this once there's a better understanding of what actual behavior will be.\n  syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\n    const relativePath = newRelativePath(pathToSyncPoint, path);\n    serverCache =\n      serverCache || syncPointGetCompleteServerCache(sp, relativePath);\n  });\n  let syncPoint = syncTree.syncPointTree_.get(path);\n  if (!syncPoint) {\n    syncPoint = new SyncPoint();\n    syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\n  } else {\n    serverCache =\n      serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n  }\n  const serverCacheComplete = serverCache != null;\n  const serverCacheNode: CacheNode | null = serverCacheComplete\n    ? new CacheNode(serverCache, true, false)\n    : null;\n  const writesCache: WriteTreeRef | null = writeTreeChildWrites(\n    syncTree.pendingWriteTree_,\n    query._path\n  );\n  const view: View = syncPointGetView(\n    syncPoint,\n    query,\n    writesCache,\n    serverCacheComplete ? serverCacheNode.getNode() : ChildrenNode.EMPTY_NODE,\n    serverCacheComplete\n  );\n  return viewGetCompleteNode(view);\n}\n\n/**\n * A helper method that visits all descendant and ancestor SyncPoints, applying the operation.\n *\n * NOTES:\n * - Descendant SyncPoints will be visited first (since we raise events depth-first).\n *\n * - We call applyOperation() on each SyncPoint passing three things:\n *   1. A version of the Operation that has been made relative to the SyncPoint location.\n *   2. A WriteTreeRef of any writes we have cached at the SyncPoint location.\n *   3. A snapshot Node with cached server data, if we have it.\n *\n * - We concatenate all of the events returned by each SyncPoint and return the result.\n */\nfunction syncTreeApplyOperationToSyncPoints_(\n  syncTree: SyncTree,\n  operation: Operation\n): Event[] {\n  return syncTreeApplyOperationHelper_(\n    operation,\n    syncTree.syncPointTree_,\n    /*serverCache=*/ null,\n    writeTreeChildWrites(syncTree.pendingWriteTree_, newEmptyPath())\n  );\n}\n\n/**\n * Recursive helper for applyOperationToSyncPoints_\n */\nfunction syncTreeApplyOperationHelper_(\n  operation: Operation,\n  syncPointTree: ImmutableTree<SyncPoint>,\n  serverCache: Node | null,\n  writesCache: WriteTreeRef\n): Event[] {\n  if (pathIsEmpty(operation.path)) {\n    return syncTreeApplyOperationDescendantsHelper_(\n      operation,\n      syncPointTree,\n      serverCache,\n      writesCache\n    );\n  } else {\n    const syncPoint = syncPointTree.get(newEmptyPath());\n\n    // If we don't have cached server data, see if we can get it from this SyncPoint.\n    if (serverCache == null && syncPoint != null) {\n      serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n    }\n\n    let events: Event[] = [];\n    const childName = pathGetFront(operation.path);\n    const childOperation = operation.operationForChild(childName);\n    const childTree = syncPointTree.children.get(childName);\n    if (childTree && childOperation) {\n      const childServerCache = serverCache\n        ? serverCache.getImmediateChild(childName)\n        : null;\n      const childWritesCache = writeTreeRefChild(writesCache, childName);\n      events = events.concat(\n        syncTreeApplyOperationHelper_(\n          childOperation,\n          childTree,\n          childServerCache,\n          childWritesCache\n        )\n      );\n    }\n\n    if (syncPoint) {\n      events = events.concat(\n        syncPointApplyOperation(syncPoint, operation, writesCache, serverCache)\n      );\n    }\n\n    return events;\n  }\n}\n\n/**\n * Recursive helper for applyOperationToSyncPoints_\n */\nfunction syncTreeApplyOperationDescendantsHelper_(\n  operation: Operation,\n  syncPointTree: ImmutableTree<SyncPoint>,\n  serverCache: Node | null,\n  writesCache: WriteTreeRef\n): Event[] {\n  const syncPoint = syncPointTree.get(newEmptyPath());\n\n  // If we don't have cached server data, see if we can get it from this SyncPoint.\n  if (serverCache == null && syncPoint != null) {\n    serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n  }\n\n  let events: Event[] = [];\n  syncPointTree.children.inorderTraversal((childName, childTree) => {\n    const childServerCache = serverCache\n      ? serverCache.getImmediateChild(childName)\n      : null;\n    const childWritesCache = writeTreeRefChild(writesCache, childName);\n    const childOperation = operation.operationForChild(childName);\n    if (childOperation) {\n      events = events.concat(\n        syncTreeApplyOperationDescendantsHelper_(\n          childOperation,\n          childTree,\n          childServerCache,\n          childWritesCache\n        )\n      );\n    }\n  });\n\n  if (syncPoint) {\n    events = events.concat(\n      syncPointApplyOperation(syncPoint, operation, writesCache, serverCache)\n    );\n  }\n\n  return events;\n}\n\nfunction syncTreeCreateListenerForView_(\n  syncTree: SyncTree,\n  view: View\n): { hashFn(): string; onComplete(a: string, b?: unknown): Event[] } {\n  const query = view.query;\n  const tag = syncTreeTagForQuery_(syncTree, query);\n\n  return {\n    hashFn: () => {\n      const cache = viewGetServerCache(view) || ChildrenNode.EMPTY_NODE;\n      return cache.hash();\n    },\n    onComplete: (status: string): Event[] => {\n      if (status === 'ok') {\n        if (tag) {\n          return syncTreeApplyTaggedListenComplete(syncTree, query._path, tag);\n        } else {\n          return syncTreeApplyListenComplete(syncTree, query._path);\n        }\n      } else {\n        // If a listen failed, kill all of the listeners here, not just the one that triggered the error.\n        // Note that this may need to be scoped to just this listener if we change permissions on filtered children\n        const error = errorForServerCode(status, query);\n        return syncTreeRemoveEventRegistration(\n          syncTree,\n          query,\n          /*eventRegistration*/ null,\n          error\n        );\n      }\n    }\n  };\n}\n\n/**\n * Return the tag associated with the given query.\n */\nfunction syncTreeTagForQuery_(\n  syncTree: SyncTree,\n  query: QueryContext\n): number | null {\n  const queryKey = syncTreeMakeQueryKey_(query);\n  return syncTree.queryToTagMap.get(queryKey);\n}\n\n/**\n * Given a query, computes a \"queryKey\" suitable for use in our queryToTagMap_.\n */\nfunction syncTreeMakeQueryKey_(query: QueryContext): string {\n  return query._path.toString() + '$' + query._queryIdentifier;\n}\n\n/**\n * Return the query associated with the given tag, if we have one\n */\nfunction syncTreeQueryKeyForTag_(\n  syncTree: SyncTree,\n  tag: number\n): string | null {\n  return syncTree.tagToQueryMap.get(tag);\n}\n\n/**\n * Given a queryKey (created by makeQueryKey), parse it back into a path and queryId.\n */\nfunction syncTreeParseQueryKey_(queryKey: string): {\n  queryId: string;\n  path: Path;\n} {\n  const splitIndex = queryKey.indexOf('$');\n  assert(\n    splitIndex !== -1 && splitIndex < queryKey.length - 1,\n    'Bad queryKey.'\n  );\n  return {\n    queryId: queryKey.substr(splitIndex + 1),\n    path: new Path(queryKey.substr(0, splitIndex))\n  };\n}\n\n/**\n * A helper method to apply tagged operations\n */\nfunction syncTreeApplyTaggedOperation_(\n  syncTree: SyncTree,\n  queryPath: Path,\n  operation: Operation\n): Event[] {\n  const syncPoint = syncTree.syncPointTree_.get(queryPath);\n  assert(syncPoint, \"Missing sync point for query tag that we're tracking\");\n  const writesCache = writeTreeChildWrites(\n    syncTree.pendingWriteTree_,\n    queryPath\n  );\n  return syncPointApplyOperation(syncPoint, operation, writesCache, null);\n}\n\n/**\n * This collapses multiple unfiltered views into a single view, since we only need a single\n * listener for them.\n */\nfunction syncTreeCollectDistinctViewsForSubTree_(\n  subtree: ImmutableTree<SyncPoint>\n): View[] {\n  return subtree.fold<View[]>((relativePath, maybeChildSyncPoint, childMap) => {\n    if (maybeChildSyncPoint && syncPointHasCompleteView(maybeChildSyncPoint)) {\n      const completeView = syncPointGetCompleteView(maybeChildSyncPoint);\n      return [completeView];\n    } else {\n      // No complete view here, flatten any deeper listens into an array\n      let views: View[] = [];\n      if (maybeChildSyncPoint) {\n        views = syncPointGetQueryViews(maybeChildSyncPoint);\n      }\n      each(childMap, (_key: string, childViews: View[]) => {\n        views = views.concat(childViews);\n      });\n      return views;\n    }\n  });\n}\n\n/**\n * Normalizes a query to a query we send the server for listening\n *\n * @returns The normalized query\n */\nfunction syncTreeQueryForListening_(query: QueryContext): QueryContext {\n  if (query._queryParams.loadsAllData() && !query._queryParams.isDefault()) {\n    // We treat queries that load all data as default queries\n    // Cast is necessary because ref() technically returns Firebase which is actually fb.api.Firebase which inherits\n    // from Query\n    return new (syncTreeGetReferenceConstructor())(query._repo, query._path);\n  } else {\n    return query;\n  }\n}\n\nfunction syncTreeRemoveTags_(syncTree: SyncTree, queries: QueryContext[]) {\n  for (let j = 0; j < queries.length; ++j) {\n    const removedQuery = queries[j];\n    if (!removedQuery._queryParams.loadsAllData()) {\n      // We should have a tag for this\n      const removedQueryKey = syncTreeMakeQueryKey_(removedQuery);\n      const removedQueryTag = syncTree.queryToTagMap.get(removedQueryKey);\n      syncTree.queryToTagMap.delete(removedQueryKey);\n      syncTree.tagToQueryMap.delete(removedQueryTag);\n    }\n  }\n}\n\n/**\n * Static accessor for query tags.\n */\nfunction syncTreeGetNextQueryTag_(): number {\n  return syncTreeNextQueryTag_++;\n}\n\n/**\n * For a given new listen, manage the de-duplication of outstanding subscriptions.\n *\n * @returns This method can return events to support synchronous data sources\n */\nfunction syncTreeSetupListener_(\n  syncTree: SyncTree,\n  query: QueryContext,\n  view: View\n): Event[] {\n  const path = query._path;\n  const tag = syncTreeTagForQuery_(syncTree, query);\n  const listener = syncTreeCreateListenerForView_(syncTree, view);\n\n  const events = syncTree.listenProvider_.startListening(\n    syncTreeQueryForListening_(query),\n    tag,\n    listener.hashFn,\n    listener.onComplete\n  );\n\n  const subtree = syncTree.syncPointTree_.subtree(path);\n  // The root of this subtree has our query. We're here because we definitely need to send a listen for that, but we\n  // may need to shadow other listens as well.\n  if (tag) {\n    assert(\n      !syncPointHasCompleteView(subtree.value),\n      \"If we're adding a query, it shouldn't be shadowed\"\n    );\n  } else {\n    // Shadow everything at or below this location, this is a default listener.\n    const queriesToStop = subtree.fold<QueryContext[]>(\n      (relativePath, maybeChildSyncPoint, childMap) => {\n        if (\n          !pathIsEmpty(relativePath) &&\n          maybeChildSyncPoint &&\n          syncPointHasCompleteView(maybeChildSyncPoint)\n        ) {\n          return [syncPointGetCompleteView(maybeChildSyncPoint).query];\n        } else {\n          // No default listener here, flatten any deeper queries into an array\n          let queries: QueryContext[] = [];\n          if (maybeChildSyncPoint) {\n            queries = queries.concat(\n              syncPointGetQueryViews(maybeChildSyncPoint).map(\n                view => view.query\n              )\n            );\n          }\n          each(childMap, (_key: string, childQueries: QueryContext[]) => {\n            queries = queries.concat(childQueries);\n          });\n          return queries;\n        }\n      }\n    );\n    for (let i = 0; i < queriesToStop.length; ++i) {\n      const queryToStop = queriesToStop[i];\n      syncTree.listenProvider_.stopListening(\n        syncTreeQueryForListening_(queryToStop),\n        syncTreeTagForQuery_(syncTree, queryToStop)\n      );\n    }\n  }\n  return events;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { PRIORITY_INDEX } from '../snap/indexes/PriorityIndex';\nimport { LeafNode } from '../snap/LeafNode';\nimport { Node } from '../snap/Node';\nimport { nodeFromJSON } from '../snap/nodeFromJSON';\nimport { SyncTree, syncTreeCalcCompleteEventCache } from '../SyncTree';\n\nimport { Indexable } from './misc';\nimport { Path, pathChild } from './Path';\n\n/* It's critical for performance that we do not calculate actual values from a SyncTree\n * unless and until the value is needed. Because we expose both a SyncTree and Node\n * version of deferred value resolution, we ned a wrapper class that will let us share\n * code.\n *\n * @see https://github.com/firebase/firebase-js-sdk/issues/2487\n */\ninterface ValueProvider {\n  getImmediateChild(childName: string): ValueProvider;\n  node(): Node;\n}\n\nclass ExistingValueProvider implements ValueProvider {\n  constructor(readonly node_: Node) {}\n\n  getImmediateChild(childName: string): ValueProvider {\n    const child = this.node_.getImmediateChild(childName);\n    return new ExistingValueProvider(child);\n  }\n\n  node(): Node {\n    return this.node_;\n  }\n}\n\nclass DeferredValueProvider implements ValueProvider {\n  private syncTree_: SyncTree;\n  private path_: Path;\n\n  constructor(syncTree: SyncTree, path: Path) {\n    this.syncTree_ = syncTree;\n    this.path_ = path;\n  }\n\n  getImmediateChild(childName: string): ValueProvider {\n    const childPath = pathChild(this.path_, childName);\n    return new DeferredValueProvider(this.syncTree_, childPath);\n  }\n\n  node(): Node {\n    return syncTreeCalcCompleteEventCache(this.syncTree_, this.path_);\n  }\n}\n\n/**\n * Generate placeholders for deferred values.\n */\nexport const generateWithValues = function (\n  values: {\n    [k: string]: unknown;\n  } | null\n): { [k: string]: unknown } {\n  values = values || {};\n  values['timestamp'] = values['timestamp'] || new Date().getTime();\n  return values;\n};\n\n/**\n * Value to use when firing local events. When writing server values, fire\n * local events with an approximate value, otherwise return value as-is.\n */\nexport const resolveDeferredLeafValue = function (\n  value: { [k: string]: unknown } | string | number | boolean,\n  existingVal: ValueProvider,\n  serverValues: { [k: string]: unknown }\n): string | number | boolean {\n  if (!value || typeof value !== 'object') {\n    return value as string | number | boolean;\n  }\n  assert('.sv' in value, 'Unexpected leaf node or priority contents');\n\n  if (typeof value['.sv'] === 'string') {\n    return resolveScalarDeferredValue(value['.sv'], existingVal, serverValues);\n  } else if (typeof value['.sv'] === 'object') {\n    return resolveComplexDeferredValue(value['.sv'], existingVal, serverValues);\n  } else {\n    assert(false, 'Unexpected server value: ' + JSON.stringify(value, null, 2));\n  }\n};\n\nconst resolveScalarDeferredValue = function (\n  op: string,\n  existing: ValueProvider,\n  serverValues: { [k: string]: unknown }\n): string | number | boolean {\n  switch (op) {\n    case 'timestamp':\n      return serverValues['timestamp'] as string | number | boolean;\n    default:\n      assert(false, 'Unexpected server value: ' + op);\n  }\n};\n\nconst resolveComplexDeferredValue = function (\n  op: object,\n  existing: ValueProvider,\n  unused: { [k: string]: unknown }\n): string | number | boolean {\n  if (!op.hasOwnProperty('increment')) {\n    assert(false, 'Unexpected server value: ' + JSON.stringify(op, null, 2));\n  }\n  const delta = op['increment'];\n  if (typeof delta !== 'number') {\n    assert(false, 'Unexpected increment value: ' + delta);\n  }\n\n  const existingNode = existing.node();\n  assert(\n    existingNode !== null && typeof existingNode !== 'undefined',\n    'Expected ChildrenNode.EMPTY_NODE for nulls'\n  );\n\n  // Incrementing a non-number sets the value to the incremented amount\n  if (!existingNode.isLeafNode()) {\n    return delta;\n  }\n\n  const leaf = existingNode as LeafNode;\n  const existingVal = leaf.getValue();\n  if (typeof existingVal !== 'number') {\n    return delta;\n  }\n\n  // No need to do over/underflow arithmetic here because JS only handles floats under the covers\n  return existingVal + delta;\n};\n\n/**\n * Recursively replace all deferred values and priorities in the tree with the\n * specified generated replacement values.\n * @param path - path to which write is relative\n * @param node - new data written at path\n * @param syncTree - current data\n */\nexport const resolveDeferredValueTree = function (\n  path: Path,\n  node: Node,\n  syncTree: SyncTree,\n  serverValues: Indexable\n): Node {\n  return resolveDeferredValue(\n    node,\n    new DeferredValueProvider(syncTree, path),\n    serverValues\n  );\n};\n\n/**\n * Recursively replace all deferred values and priorities in the node with the\n * specified generated replacement values.  If there are no server values in the node,\n * it'll be returned as-is.\n */\nexport const resolveDeferredValueSnapshot = function (\n  node: Node,\n  existing: Node,\n  serverValues: Indexable\n): Node {\n  return resolveDeferredValue(\n    node,\n    new ExistingValueProvider(existing),\n    serverValues\n  );\n};\n\nfunction resolveDeferredValue(\n  node: Node,\n  existingVal: ValueProvider,\n  serverValues: Indexable\n): Node {\n  const rawPri = node.getPriority().val() as\n    | Indexable\n    | boolean\n    | null\n    | number\n    | string;\n  const priority = resolveDeferredLeafValue(\n    rawPri,\n    existingVal.getImmediateChild('.priority'),\n    serverValues\n  );\n  let newNode: Node;\n\n  if (node.isLeafNode()) {\n    const leafNode = node as LeafNode;\n    const value = resolveDeferredLeafValue(\n      leafNode.getValue(),\n      existingVal,\n      serverValues\n    );\n    if (\n      value !== leafNode.getValue() ||\n      priority !== leafNode.getPriority().val()\n    ) {\n      return new LeafNode(value, nodeFromJSON(priority));\n    } else {\n      return node;\n    }\n  } else {\n    const childrenNode = node as ChildrenNode;\n    newNode = childrenNode;\n    if (priority !== childrenNode.getPriority().val()) {\n      newNode = newNode.updatePriority(new LeafNode(priority));\n    }\n    childrenNode.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\n      const newChildNode = resolveDeferredValue(\n        childNode,\n        existingVal.getImmediateChild(childName),\n        serverValues\n      );\n      if (newChildNode !== childNode) {\n        newNode = newNode.updateImmediateChild(childName, newChildNode);\n      }\n    });\n    return newNode;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains, safeGet } from '@firebase/util';\n\nimport { Path, pathGetFront, pathPopFront } from './Path';\nimport { each } from './util';\n\n/**\n * Node in a Tree.\n */\nexport interface TreeNode<T> {\n  // TODO: Consider making accessors that create children and value lazily or\n  // separate Internal / Leaf 'types'.\n  children: Record<string, TreeNode<T>>;\n  childCount: number;\n  value?: T;\n}\n\n/**\n * A light-weight tree, traversable by path.  Nodes can have both values and children.\n * Nodes are not enumerated (by forEachChild) unless they have a value or non-empty\n * children.\n */\nexport class Tree<T> {\n  /**\n   * @param name - Optional name of the node.\n   * @param parent - Optional parent node.\n   * @param node - Optional node to wrap.\n   */\n  constructor(\n    readonly name: string = '',\n    readonly parent: Tree<T> | null = null,\n    public node: TreeNode<T> = { children: {}, childCount: 0 }\n  ) {}\n}\n\n/**\n * Returns a sub-Tree for the given path.\n *\n * @param pathObj - Path to look up.\n * @returns Tree for path.\n */\nexport function treeSubTree<T>(tree: Tree<T>, pathObj: string | Path): Tree<T> {\n  // TODO: Require pathObj to be Path?\n  let path = pathObj instanceof Path ? pathObj : new Path(pathObj);\n  let child = tree,\n    next = pathGetFront(path);\n  while (next !== null) {\n    const childNode = safeGet(child.node.children, next) || {\n      children: {},\n      childCount: 0\n    };\n    child = new Tree<T>(next, child, childNode);\n    path = pathPopFront(path);\n    next = pathGetFront(path);\n  }\n\n  return child;\n}\n\n/**\n * Returns the data associated with this tree node.\n *\n * @returns The data or null if no data exists.\n */\nexport function treeGetValue<T>(tree: Tree<T>): T | undefined {\n  return tree.node.value;\n}\n\n/**\n * Sets data to this tree node.\n *\n * @param value - Value to set.\n */\nexport function treeSetValue<T>(tree: Tree<T>, value: T | undefined): void {\n  tree.node.value = value;\n  treeUpdateParents(tree);\n}\n\n/**\n * @returns Whether the tree has any children.\n */\nexport function treeHasChildren<T>(tree: Tree<T>): boolean {\n  return tree.node.childCount > 0;\n}\n\n/**\n * @returns Whethe rthe tree is empty (no value or children).\n */\nexport function treeIsEmpty<T>(tree: Tree<T>): boolean {\n  return treeGetValue(tree) === undefined && !treeHasChildren(tree);\n}\n\n/**\n * Calls action for each child of this tree node.\n *\n * @param action - Action to be called for each child.\n */\nexport function treeForEachChild<T>(\n  tree: Tree<T>,\n  action: (tree: Tree<T>) => void\n): void {\n  each(tree.node.children, (child: string, childTree: TreeNode<T>) => {\n    action(new Tree<T>(child, tree, childTree));\n  });\n}\n\n/**\n * Does a depth-first traversal of this node's descendants, calling action for each one.\n *\n * @param action - Action to be called for each child.\n * @param includeSelf - Whether to call action on this node as well. Defaults to\n *   false.\n * @param childrenFirst - Whether to call action on children before calling it on\n *   parent.\n */\nexport function treeForEachDescendant<T>(\n  tree: Tree<T>,\n  action: (tree: Tree<T>) => void,\n  includeSelf?: boolean,\n  childrenFirst?: boolean\n): void {\n  if (includeSelf && !childrenFirst) {\n    action(tree);\n  }\n\n  treeForEachChild(tree, child => {\n    treeForEachDescendant(child, action, true, childrenFirst);\n  });\n\n  if (includeSelf && childrenFirst) {\n    action(tree);\n  }\n}\n\n/**\n * Calls action on each ancestor node.\n *\n * @param action - Action to be called on each parent; return\n *   true to abort.\n * @param includeSelf - Whether to call action on this node as well.\n * @returns true if the action callback returned true.\n */\nexport function treeForEachAncestor<T>(\n  tree: Tree<T>,\n  action: (tree: Tree<T>) => unknown,\n  includeSelf?: boolean\n): boolean {\n  let node = includeSelf ? tree : tree.parent;\n  while (node !== null) {\n    if (action(node)) {\n      return true;\n    }\n    node = node.parent;\n  }\n  return false;\n}\n\n/**\n * Does a depth-first traversal of this node's descendants.  When a descendant with a value\n * is found, action is called on it and traversal does not continue inside the node.\n * Action is *not* called on this node.\n *\n * @param action - Action to be called for each child.\n */\nexport function treeForEachImmediateDescendantWithValue<T>(\n  tree: Tree<T>,\n  action: (tree: Tree<T>) => void\n): void {\n  treeForEachChild(tree, child => {\n    if (treeGetValue(child) !== undefined) {\n      action(child);\n    } else {\n      treeForEachImmediateDescendantWithValue(child, action);\n    }\n  });\n}\n\n/**\n * @returns The path of this tree node, as a Path.\n */\nexport function treeGetPath<T>(tree: Tree<T>) {\n  return new Path(\n    tree.parent === null\n      ? tree.name\n      : treeGetPath(tree.parent) + '/' + tree.name\n  );\n}\n\n/**\n * Adds or removes this child from its parent based on whether it's empty or not.\n */\nfunction treeUpdateParents<T>(tree: Tree<T>) {\n  if (tree.parent !== null) {\n    treeUpdateChild(tree.parent, tree.name, tree);\n  }\n}\n\n/**\n * Adds or removes the passed child to this tree node, depending on whether it's empty.\n *\n * @param childName - The name of the child to update.\n * @param child - The child to update.\n */\nfunction treeUpdateChild<T>(tree: Tree<T>, childName: string, child: Tree<T>) {\n  const childEmpty = treeIsEmpty(child);\n  const childExists = contains(tree.node.children, childName);\n  if (childEmpty && childExists) {\n    delete tree.node.children[childName];\n    tree.node.childCount--;\n    treeUpdateParents(tree);\n  } else if (!childEmpty && !childExists) {\n    tree.node.children[childName] = child.node;\n    tree.node.childCount++;\n    treeUpdateParents(tree);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  contains,\n  errorPrefix as errorPrefixFxn,\n  safeGet,\n  stringLength\n} from '@firebase/util';\n\nimport { RepoInfo } from '../RepoInfo';\n\nimport {\n  Path,\n  pathChild,\n  pathCompare,\n  pathContains,\n  pathGetBack,\n  pathGetFront,\n  pathSlice,\n  ValidationPath,\n  validationPathPop,\n  validationPathPush,\n  validationPathToErrorString\n} from './Path';\nimport { each, isInvalidJSONNumber } from './util';\n\n/**\n * True for invalid Firebase keys\n */\nexport const INVALID_KEY_REGEX_ = /[\\[\\].#$\\/\\u0000-\\u001F\\u007F]/;\n\n/**\n * True for invalid Firebase paths.\n * Allows '/' in paths.\n */\nexport const INVALID_PATH_REGEX_ = /[\\[\\].#$\\u0000-\\u001F\\u007F]/;\n\n/**\n * Maximum number of characters to allow in leaf value\n */\nexport const MAX_LEAF_SIZE_ = 10 * 1024 * 1024;\n\nexport const isValidKey = function (key: unknown): boolean {\n  return (\n    typeof key === 'string' && key.length !== 0 && !INVALID_KEY_REGEX_.test(key)\n  );\n};\n\nexport const isValidPathString = function (pathString: string): boolean {\n  return (\n    typeof pathString === 'string' &&\n    pathString.length !== 0 &&\n    !INVALID_PATH_REGEX_.test(pathString)\n  );\n};\n\nexport const isValidRootPathString = function (pathString: string): boolean {\n  if (pathString) {\n    // Allow '/.info/' at the beginning.\n    pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n  }\n\n  return isValidPathString(pathString);\n};\n\nexport const isValidPriority = function (priority: unknown): boolean {\n  return (\n    priority === null ||\n    typeof priority === 'string' ||\n    (typeof priority === 'number' && !isInvalidJSONNumber(priority)) ||\n    (priority &&\n      typeof priority === 'object' &&\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      contains(priority as any, '.sv'))\n  );\n};\n\n/**\n * Pre-validate a datum passed as an argument to Firebase function.\n */\nexport const validateFirebaseDataArg = function (\n  fnName: string,\n  value: unknown,\n  path: Path,\n  optional: boolean\n) {\n  if (optional && value === undefined) {\n    return;\n  }\n\n  validateFirebaseData(errorPrefixFxn(fnName, 'value'), value, path);\n};\n\n/**\n * Validate a data object client-side before sending to server.\n */\nexport const validateFirebaseData = function (\n  errorPrefix: string,\n  data: unknown,\n  path_: Path | ValidationPath\n) {\n  const path =\n    path_ instanceof Path ? new ValidationPath(path_, errorPrefix) : path_;\n\n  if (data === undefined) {\n    throw new Error(\n      errorPrefix + 'contains undefined ' + validationPathToErrorString(path)\n    );\n  }\n  if (typeof data === 'function') {\n    throw new Error(\n      errorPrefix +\n        'contains a function ' +\n        validationPathToErrorString(path) +\n        ' with contents = ' +\n        data.toString()\n    );\n  }\n  if (isInvalidJSONNumber(data)) {\n    throw new Error(\n      errorPrefix +\n        'contains ' +\n        data.toString() +\n        ' ' +\n        validationPathToErrorString(path)\n    );\n  }\n\n  // Check max leaf size, but try to avoid the utf8 conversion if we can.\n  if (\n    typeof data === 'string' &&\n    data.length > MAX_LEAF_SIZE_ / 3 &&\n    stringLength(data) > MAX_LEAF_SIZE_\n  ) {\n    throw new Error(\n      errorPrefix +\n        'contains a string greater than ' +\n        MAX_LEAF_SIZE_ +\n        ' utf8 bytes ' +\n        validationPathToErrorString(path) +\n        \" ('\" +\n        data.substring(0, 50) +\n        \"...')\"\n    );\n  }\n\n  // TODO = Perf = Consider combining the recursive validation of keys into NodeFromJSON\n  // to save extra walking of large objects.\n  if (data && typeof data === 'object') {\n    let hasDotValue = false;\n    let hasActualChild = false;\n    each(data, (key: string, value: unknown) => {\n      if (key === '.value') {\n        hasDotValue = true;\n      } else if (key !== '.priority' && key !== '.sv') {\n        hasActualChild = true;\n        if (!isValidKey(key)) {\n          throw new Error(\n            errorPrefix +\n              ' contains an invalid key (' +\n              key +\n              ') ' +\n              validationPathToErrorString(path) +\n              '.  Keys must be non-empty strings ' +\n              'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"'\n          );\n        }\n      }\n\n      validationPathPush(path, key);\n      validateFirebaseData(errorPrefix, value, path);\n      validationPathPop(path);\n    });\n\n    if (hasDotValue && hasActualChild) {\n      throw new Error(\n        errorPrefix +\n          ' contains \".value\" child ' +\n          validationPathToErrorString(path) +\n          ' in addition to actual children.'\n      );\n    }\n  }\n};\n\n/**\n * Pre-validate paths passed in the firebase function.\n */\nexport const validateFirebaseMergePaths = function (\n  errorPrefix: string,\n  mergePaths: Path[]\n) {\n  let i, curPath: Path;\n  for (i = 0; i < mergePaths.length; i++) {\n    curPath = mergePaths[i];\n    const keys = pathSlice(curPath);\n    for (let j = 0; j < keys.length; j++) {\n      if (keys[j] === '.priority' && j === keys.length - 1) {\n        // .priority is OK\n      } else if (!isValidKey(keys[j])) {\n        throw new Error(\n          errorPrefix +\n            'contains an invalid key (' +\n            keys[j] +\n            ') in path ' +\n            curPath.toString() +\n            '. Keys must be non-empty strings ' +\n            'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"'\n        );\n      }\n    }\n  }\n\n  // Check that update keys are not descendants of each other.\n  // We rely on the property that sorting guarantees that ancestors come\n  // right before descendants.\n  mergePaths.sort(pathCompare);\n  let prevPath: Path | null = null;\n  for (i = 0; i < mergePaths.length; i++) {\n    curPath = mergePaths[i];\n    if (prevPath !== null && pathContains(prevPath, curPath)) {\n      throw new Error(\n        errorPrefix +\n          'contains a path ' +\n          prevPath.toString() +\n          ' that is ancestor of another path ' +\n          curPath.toString()\n      );\n    }\n    prevPath = curPath;\n  }\n};\n\n/**\n * pre-validate an object passed as an argument to firebase function (\n * must be an object - e.g. for firebase.update()).\n */\nexport const validateFirebaseMergeDataArg = function (\n  fnName: string,\n  data: unknown,\n  path: Path,\n  optional: boolean\n) {\n  if (optional && data === undefined) {\n    return;\n  }\n\n  const errorPrefix = errorPrefixFxn(fnName, 'values');\n\n  if (!(data && typeof data === 'object') || Array.isArray(data)) {\n    throw new Error(\n      errorPrefix + ' must be an object containing the children to replace.'\n    );\n  }\n\n  const mergePaths: Path[] = [];\n  each(data, (key: string, value: unknown) => {\n    const curPath = new Path(key);\n    validateFirebaseData(errorPrefix, value, pathChild(path, curPath));\n    if (pathGetBack(curPath) === '.priority') {\n      if (!isValidPriority(value)) {\n        throw new Error(\n          errorPrefix +\n            \"contains an invalid value for '\" +\n            curPath.toString() +\n            \"', which must be a valid \" +\n            'Firebase priority (a string, finite number, server value, or null).'\n        );\n      }\n    }\n    mergePaths.push(curPath);\n  });\n  validateFirebaseMergePaths(errorPrefix, mergePaths);\n};\n\nexport const validatePriority = function (\n  fnName: string,\n  priority: unknown,\n  optional: boolean\n) {\n  if (optional && priority === undefined) {\n    return;\n  }\n  if (isInvalidJSONNumber(priority)) {\n    throw new Error(\n      errorPrefixFxn(fnName, 'priority') +\n        'is ' +\n        priority.toString() +\n        ', but must be a valid Firebase priority (a string, finite number, ' +\n        'server value, or null).'\n    );\n  }\n  // Special case to allow importing data with a .sv.\n  if (!isValidPriority(priority)) {\n    throw new Error(\n      errorPrefixFxn(fnName, 'priority') +\n        'must be a valid Firebase priority ' +\n        '(a string, finite number, server value, or null).'\n    );\n  }\n};\n\nexport const validateKey = function (\n  fnName: string,\n  argumentName: string,\n  key: string,\n  optional: boolean\n) {\n  if (optional && key === undefined) {\n    return;\n  }\n  if (!isValidKey(key)) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentName) +\n        'was an invalid key = \"' +\n        key +\n        '\".  Firebase keys must be non-empty strings and ' +\n        'can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\").'\n    );\n  }\n};\n\n/**\n * @internal\n */\nexport const validatePathString = function (\n  fnName: string,\n  argumentName: string,\n  pathString: string,\n  optional: boolean\n) {\n  if (optional && pathString === undefined) {\n    return;\n  }\n\n  if (!isValidPathString(pathString)) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentName) +\n        'was an invalid path = \"' +\n        pathString +\n        '\". Paths must be non-empty strings and ' +\n        'can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\"'\n    );\n  }\n};\n\nexport const validateRootPathString = function (\n  fnName: string,\n  argumentName: string,\n  pathString: string,\n  optional: boolean\n) {\n  if (pathString) {\n    // Allow '/.info/' at the beginning.\n    pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n  }\n\n  validatePathString(fnName, argumentName, pathString, optional);\n};\n\n/**\n * @internal\n */\nexport const validateWritablePath = function (fnName: string, path: Path) {\n  if (pathGetFront(path) === '.info') {\n    throw new Error(fnName + \" failed = Can't modify data under /.info/\");\n  }\n};\n\nexport const validateUrl = function (\n  fnName: string,\n  parsedUrl: { repoInfo: RepoInfo; path: Path }\n) {\n  // TODO = Validate server better.\n  const pathString = parsedUrl.path.toString();\n  if (\n    !(typeof parsedUrl.repoInfo.host === 'string') ||\n    parsedUrl.repoInfo.host.length === 0 ||\n    (!isValidKey(parsedUrl.repoInfo.namespace) &&\n      parsedUrl.repoInfo.host.split(':')[0] !== 'localhost') ||\n    (pathString.length !== 0 && !isValidRootPathString(pathString))\n  ) {\n    throw new Error(\n      errorPrefixFxn(fnName, 'url') +\n        'must be a valid firebase URL and ' +\n        'the path can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\".'\n    );\n  }\n};\n\nexport const validateString = function (\n  fnName: string,\n  argumentName: string,\n  string: unknown,\n  optional: boolean\n) {\n  if (optional && string === undefined) {\n    return;\n  }\n  if (!(typeof string === 'string')) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentName) + 'must be a valid string.'\n    );\n  }\n};\n\nexport const validateObject = function (\n  fnName: string,\n  argumentName: string,\n  obj: unknown,\n  optional: boolean\n) {\n  if (optional && obj === undefined) {\n    return;\n  }\n  if (!(obj && typeof obj === 'object') || obj === null) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentName) + 'must be a valid object.'\n    );\n  }\n};\n\nexport const validateObjectContainsKey = function (\n  fnName: string,\n  argumentName: string,\n  obj: unknown,\n  key: string,\n  optional: boolean,\n  optType?: string\n) {\n  const objectContainsKey =\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    obj && typeof obj === 'object' && contains(obj as any, key);\n\n  if (!objectContainsKey) {\n    if (optional) {\n      return;\n    } else {\n      throw new Error(\n        errorPrefixFxn(fnName, argumentName) +\n          'must contain the key \"' +\n          key +\n          '\"'\n      );\n    }\n  }\n\n  if (optType) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const val = safeGet(obj as any, key);\n    if (\n      (optType === 'number' && !(typeof val === 'number')) ||\n      (optType === 'string' && !(typeof val === 'string')) ||\n      (optType === 'boolean' && !(typeof val === 'boolean')) ||\n      (optType === 'function' && !(typeof val === 'function')) ||\n      (optType === 'object' && !(typeof val === 'object') && val)\n    ) {\n      if (optional) {\n        throw new Error(\n          errorPrefixFxn(fnName, argumentName) +\n            'contains invalid value for key \"' +\n            key +\n            '\" (must be of type \"' +\n            optType +\n            '\")'\n        );\n      } else {\n        throw new Error(\n          errorPrefixFxn(fnName, argumentName) +\n            'must contain the key \"' +\n            key +\n            '\" with type \"' +\n            optType +\n            '\"'\n        );\n      }\n    }\n  }\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path, pathContains, pathEquals } from '../util/Path';\nimport { exceptionGuard, log, logger } from '../util/util';\n\nimport { Event } from './Event';\n\n/**\n * The event queue serves a few purposes:\n * 1. It ensures we maintain event order in the face of event callbacks doing operations that result in more\n *    events being queued.\n * 2. raiseQueuedEvents() handles being called reentrantly nicely.  That is, if in the course of raising events,\n *    raiseQueuedEvents() is called again, the \"inner\" call will pick up raising events where the \"outer\" call\n *    left off, ensuring that the events are still raised synchronously and in order.\n * 3. You can use raiseEventsAtPath and raiseEventsForChangedPath to ensure only relevant previously-queued\n *    events are raised synchronously.\n *\n * NOTE: This can all go away if/when we move to async events.\n *\n */\nexport class EventQueue {\n  eventLists_: EventList[] = [];\n\n  /**\n   * Tracks recursion depth of raiseQueuedEvents_, for debugging purposes.\n   */\n  recursionDepth_ = 0;\n}\n\n/**\n * @param eventDataList - The new events to queue.\n */\nexport function eventQueueQueueEvents(\n  eventQueue: EventQueue,\n  eventDataList: Event[]\n) {\n  // We group events by path, storing them in a single EventList, to make it easier to skip over them quickly.\n  let currList: EventList | null = null;\n  for (let i = 0; i < eventDataList.length; i++) {\n    const data = eventDataList[i];\n    const path = data.getPath();\n    if (currList !== null && !pathEquals(path, currList.path)) {\n      eventQueue.eventLists_.push(currList);\n      currList = null;\n    }\n\n    if (currList === null) {\n      currList = { events: [], path };\n    }\n\n    currList.events.push(data);\n  }\n  if (currList) {\n    eventQueue.eventLists_.push(currList);\n  }\n}\n\n/**\n * Queues the specified events and synchronously raises all events (including previously queued ones)\n * for the specified path.\n *\n * It is assumed that the new events are all for the specified path.\n *\n * @param path - The path to raise events for.\n * @param eventDataList - The new events to raise.\n */\nexport function eventQueueRaiseEventsAtPath(\n  eventQueue: EventQueue,\n  path: Path,\n  eventDataList: Event[]\n) {\n  eventQueueQueueEvents(eventQueue, eventDataList);\n  eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, eventPath =>\n    pathEquals(eventPath, path)\n  );\n}\n\n/**\n * Queues the specified events and synchronously raises all events (including previously queued ones) for\n * locations related to the specified change path (i.e. all ancestors and descendants).\n *\n * It is assumed that the new events are all related (ancestor or descendant) to the specified path.\n *\n * @param changedPath - The path to raise events for.\n * @param eventDataList - The events to raise\n */\nexport function eventQueueRaiseEventsForChangedPath(\n  eventQueue: EventQueue,\n  changedPath: Path,\n  eventDataList: Event[]\n) {\n  eventQueueQueueEvents(eventQueue, eventDataList);\n  eventQueueRaiseQueuedEventsMatchingPredicate(\n    eventQueue,\n    eventPath =>\n      pathContains(eventPath, changedPath) ||\n      pathContains(changedPath, eventPath)\n  );\n}\n\nfunction eventQueueRaiseQueuedEventsMatchingPredicate(\n  eventQueue: EventQueue,\n  predicate: (path: Path) => boolean\n) {\n  eventQueue.recursionDepth_++;\n\n  let sentAll = true;\n  for (let i = 0; i < eventQueue.eventLists_.length; i++) {\n    const eventList = eventQueue.eventLists_[i];\n    if (eventList) {\n      const eventPath = eventList.path;\n      if (predicate(eventPath)) {\n        eventListRaise(eventQueue.eventLists_[i]);\n        eventQueue.eventLists_[i] = null;\n      } else {\n        sentAll = false;\n      }\n    }\n  }\n\n  if (sentAll) {\n    eventQueue.eventLists_ = [];\n  }\n\n  eventQueue.recursionDepth_--;\n}\n\ninterface EventList {\n  events: Event[];\n  path: Path;\n}\n\n/**\n * Iterates through the list and raises each event\n */\nfunction eventListRaise(eventList: EventList) {\n  for (let i = 0; i < eventList.events.length; i++) {\n    const eventData = eventList.events[i];\n    if (eventData !== null) {\n      eventList.events[i] = null;\n      const eventFn = eventData.getEventRunner();\n      if (logger) {\n        log('event: ' + eventData.toString());\n      }\n      exceptionGuard(eventFn);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  contains,\n  isEmpty,\n  map,\n  safeGet,\n  stringify\n} from '@firebase/util';\n\nimport { AppCheckTokenProvider } from './AppCheckTokenProvider';\nimport { AuthTokenProvider } from './AuthTokenProvider';\nimport { PersistentConnection } from './PersistentConnection';\nimport { ReadonlyRestClient } from './ReadonlyRestClient';\nimport { RepoInfo } from './RepoInfo';\nimport { ServerActions } from './ServerActions';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Node } from './snap/Node';\nimport { nodeFromJSON } from './snap/nodeFromJSON';\nimport { SnapshotHolder } from './SnapshotHolder';\nimport {\n  newSparseSnapshotTree,\n  SparseSnapshotTree,\n  sparseSnapshotTreeForEachTree,\n  sparseSnapshotTreeForget,\n  sparseSnapshotTreeRemember\n} from './SparseSnapshotTree';\nimport { StatsCollection } from './stats/StatsCollection';\nimport { StatsListener } from './stats/StatsListener';\nimport {\n  statsManagerGetCollection,\n  statsManagerGetOrCreateReporter\n} from './stats/StatsManager';\nimport { StatsReporter, statsReporterIncludeStat } from './stats/StatsReporter';\nimport {\n  SyncTree,\n  syncTreeAckUserWrite,\n  syncTreeAddEventRegistration,\n  syncTreeApplyServerMerge,\n  syncTreeApplyServerOverwrite,\n  syncTreeApplyTaggedQueryMerge,\n  syncTreeApplyTaggedQueryOverwrite,\n  syncTreeApplyUserMerge,\n  syncTreeApplyUserOverwrite,\n  syncTreeCalcCompleteEventCache,\n  syncTreeGetServerValue,\n  syncTreeRemoveEventRegistration\n} from './SyncTree';\nimport { Indexable } from './util/misc';\nimport {\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathChild,\n  pathGetFront,\n  pathPopFront\n} from './util/Path';\nimport {\n  generateWithValues,\n  resolveDeferredValueSnapshot,\n  resolveDeferredValueTree\n} from './util/ServerValues';\nimport {\n  Tree,\n  treeForEachAncestor,\n  treeForEachChild,\n  treeForEachDescendant,\n  treeGetPath,\n  treeGetValue,\n  treeHasChildren,\n  treeSetValue,\n  treeSubTree\n} from './util/Tree';\nimport {\n  beingCrawled,\n  each,\n  exceptionGuard,\n  log,\n  LUIDGenerator,\n  warn\n} from './util/util';\nimport { isValidPriority, validateFirebaseData } from './util/validation';\nimport { Event } from './view/Event';\nimport {\n  EventQueue,\n  eventQueueQueueEvents,\n  eventQueueRaiseEventsAtPath,\n  eventQueueRaiseEventsForChangedPath\n} from './view/EventQueue';\nimport { EventRegistration, QueryContext } from './view/EventRegistration';\n\nconst INTERRUPT_REASON = 'repo_interrupt';\n\n/**\n * If a transaction does not succeed after 25 retries, we abort it. Among other\n * things this ensure that if there's ever a bug causing a mismatch between\n * client / server hashes for some data, we won't retry indefinitely.\n */\nconst MAX_TRANSACTION_RETRIES = 25;\n\nconst enum TransactionStatus {\n  // We've run the transaction and updated transactionResultData_ with the result, but it isn't currently sent to the\n  // server. A transaction will go from RUN -> SENT -> RUN if it comes back from the server as rejected due to\n  // mismatched hash.\n  RUN,\n\n  // We've run the transaction and sent it to the server and it's currently outstanding (hasn't come back as accepted\n  // or rejected yet).\n  SENT,\n\n  // Temporary state used to mark completed transactions (whether successful or aborted).  The transaction will be\n  // removed when we get a chance to prune completed ones.\n  COMPLETED,\n\n  // Used when an already-sent transaction needs to be aborted (e.g. due to a conflicting set() call that was made).\n  // If it comes back as unsuccessful, we'll abort it.\n  SENT_NEEDS_ABORT,\n\n  // Temporary state used to mark transactions that need to be aborted.\n  NEEDS_ABORT\n}\n\ninterface Transaction {\n  path: Path;\n  update: (a: unknown) => unknown;\n  onComplete: (\n    error: Error | null,\n    committed: boolean,\n    node: Node | null\n  ) => void;\n  status: TransactionStatus;\n  order: number;\n  applyLocally: boolean;\n  retryCount: number;\n  unwatcher: () => void;\n  abortReason: string | null;\n  currentWriteId: number;\n  currentInputSnapshot: Node | null;\n  currentOutputSnapshotRaw: Node | null;\n  currentOutputSnapshotResolved: Node | null;\n}\n\n/**\n * A connection to a single data repository.\n */\nexport class Repo {\n  /** Key for uniquely identifying this repo, used in RepoManager */\n  readonly key: string;\n\n  dataUpdateCount = 0;\n  infoSyncTree_: SyncTree;\n  serverSyncTree_: SyncTree;\n\n  stats_: StatsCollection;\n  statsListener_: StatsListener | null = null;\n  eventQueue_ = new EventQueue();\n  nextWriteId_ = 1;\n  server_: ServerActions;\n  statsReporter_: StatsReporter;\n  infoData_: SnapshotHolder;\n  interceptServerDataCallback_: ((a: string, b: unknown) => void) | null = null;\n\n  /** A list of data pieces and paths to be set when this client disconnects. */\n  onDisconnect_: SparseSnapshotTree = newSparseSnapshotTree();\n\n  /** Stores queues of outstanding transactions for Firebase locations. */\n  transactionQueueTree_ = new Tree<Transaction[]>();\n\n  // TODO: This should be @private but it's used by test_access.js and internal.js\n  persistentConnection_: PersistentConnection | null = null;\n\n  constructor(\n    public repoInfo_: RepoInfo,\n    public forceRestClient_: boolean,\n    public authTokenProvider_: AuthTokenProvider,\n    public appCheckProvider_: AppCheckTokenProvider\n  ) {\n    // This key is intentionally not updated if RepoInfo is later changed or replaced\n    this.key = this.repoInfo_.toURLString();\n  }\n\n  /**\n   * @returns The URL corresponding to the root of this Firebase.\n   */\n  toString(): string {\n    return (\n      (this.repoInfo_.secure ? 'https://' : 'http://') + this.repoInfo_.host\n    );\n  }\n}\n\nexport function repoStart(\n  repo: Repo,\n  appId: string,\n  authOverride?: object\n): void {\n  repo.stats_ = statsManagerGetCollection(repo.repoInfo_);\n\n  if (repo.forceRestClient_ || beingCrawled()) {\n    repo.server_ = new ReadonlyRestClient(\n      repo.repoInfo_,\n      (\n        pathString: string,\n        data: unknown,\n        isMerge: boolean,\n        tag: number | null\n      ) => {\n        repoOnDataUpdate(repo, pathString, data, isMerge, tag);\n      },\n      repo.authTokenProvider_,\n      repo.appCheckProvider_\n    );\n\n    // Minor hack: Fire onConnect immediately, since there's no actual connection.\n    setTimeout(() => repoOnConnectStatus(repo, /* connectStatus= */ true), 0);\n  } else {\n    // Validate authOverride\n    if (typeof authOverride !== 'undefined' && authOverride !== null) {\n      if (typeof authOverride !== 'object') {\n        throw new Error(\n          'Only objects are supported for option databaseAuthVariableOverride'\n        );\n      }\n      try {\n        stringify(authOverride);\n      } catch (e) {\n        throw new Error('Invalid authOverride provided: ' + e);\n      }\n    }\n\n    repo.persistentConnection_ = new PersistentConnection(\n      repo.repoInfo_,\n      appId,\n      (\n        pathString: string,\n        data: unknown,\n        isMerge: boolean,\n        tag: number | null\n      ) => {\n        repoOnDataUpdate(repo, pathString, data, isMerge, tag);\n      },\n      (connectStatus: boolean) => {\n        repoOnConnectStatus(repo, connectStatus);\n      },\n      (updates: object) => {\n        repoOnServerInfoUpdate(repo, updates);\n      },\n      repo.authTokenProvider_,\n      repo.appCheckProvider_,\n      authOverride\n    );\n\n    repo.server_ = repo.persistentConnection_;\n  }\n\n  repo.authTokenProvider_.addTokenChangeListener(token => {\n    repo.server_.refreshAuthToken(token);\n  });\n\n  repo.appCheckProvider_.addTokenChangeListener(result => {\n    repo.server_.refreshAppCheckToken(result.token);\n  });\n\n  // In the case of multiple Repos for the same repoInfo (i.e. there are multiple Firebase.Contexts being used),\n  // we only want to create one StatsReporter.  As such, we'll report stats over the first Repo created.\n  repo.statsReporter_ = statsManagerGetOrCreateReporter(\n    repo.repoInfo_,\n    () => new StatsReporter(repo.stats_, repo.server_)\n  );\n\n  // Used for .info.\n  repo.infoData_ = new SnapshotHolder();\n  repo.infoSyncTree_ = new SyncTree({\n    startListening: (query, tag, currentHashFn, onComplete) => {\n      let infoEvents: Event[] = [];\n      const node = repo.infoData_.getNode(query._path);\n      // This is possibly a hack, but we have different semantics for .info endpoints. We don't raise null events\n      // on initial data...\n      if (!node.isEmpty()) {\n        infoEvents = syncTreeApplyServerOverwrite(\n          repo.infoSyncTree_,\n          query._path,\n          node\n        );\n        setTimeout(() => {\n          onComplete('ok');\n        }, 0);\n      }\n      return infoEvents;\n    },\n    stopListening: () => {}\n  });\n  repoUpdateInfo(repo, 'connected', false);\n\n  repo.serverSyncTree_ = new SyncTree({\n    startListening: (query, tag, currentHashFn, onComplete) => {\n      repo.server_.listen(query, currentHashFn, tag, (status, data) => {\n        const events = onComplete(status, data);\n        eventQueueRaiseEventsForChangedPath(\n          repo.eventQueue_,\n          query._path,\n          events\n        );\n      });\n      // No synchronous events for network-backed sync trees\n      return [];\n    },\n    stopListening: (query, tag) => {\n      repo.server_.unlisten(query, tag);\n    }\n  });\n}\n\n/**\n * @returns The time in milliseconds, taking the server offset into account if we have one.\n */\nexport function repoServerTime(repo: Repo): number {\n  const offsetNode = repo.infoData_.getNode(new Path('.info/serverTimeOffset'));\n  const offset = (offsetNode.val() as number) || 0;\n  return new Date().getTime() + offset;\n}\n\n/**\n * Generate ServerValues using some variables from the repo object.\n */\nexport function repoGenerateServerValues(repo: Repo): Indexable {\n  return generateWithValues({\n    timestamp: repoServerTime(repo)\n  });\n}\n\n/**\n * Called by realtime when we get new messages from the server.\n */\nfunction repoOnDataUpdate(\n  repo: Repo,\n  pathString: string,\n  data: unknown,\n  isMerge: boolean,\n  tag: number | null\n): void {\n  // For testing.\n  repo.dataUpdateCount++;\n  const path = new Path(pathString);\n  data = repo.interceptServerDataCallback_\n    ? repo.interceptServerDataCallback_(pathString, data)\n    : data;\n  let events = [];\n  if (tag) {\n    if (isMerge) {\n      const taggedChildren = map(\n        data as { [k: string]: unknown },\n        (raw: unknown) => nodeFromJSON(raw)\n      );\n      events = syncTreeApplyTaggedQueryMerge(\n        repo.serverSyncTree_,\n        path,\n        taggedChildren,\n        tag\n      );\n    } else {\n      const taggedSnap = nodeFromJSON(data);\n      events = syncTreeApplyTaggedQueryOverwrite(\n        repo.serverSyncTree_,\n        path,\n        taggedSnap,\n        tag\n      );\n    }\n  } else if (isMerge) {\n    const changedChildren = map(\n      data as { [k: string]: unknown },\n      (raw: unknown) => nodeFromJSON(raw)\n    );\n    events = syncTreeApplyServerMerge(\n      repo.serverSyncTree_,\n      path,\n      changedChildren\n    );\n  } else {\n    const snap = nodeFromJSON(data);\n    events = syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap);\n  }\n  let affectedPath = path;\n  if (events.length > 0) {\n    // Since we have a listener outstanding for each transaction, receiving any events\n    // is a proxy for some change having occurred.\n    affectedPath = repoRerunTransactions(repo, path);\n  }\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, events);\n}\n\n// TODO: This should be @private but it's used by test_access.js and internal.js\nexport function repoInterceptServerData(\n  repo: Repo,\n  callback: ((a: string, b: unknown) => unknown) | null\n): void {\n  repo.interceptServerDataCallback_ = callback;\n}\n\nfunction repoOnConnectStatus(repo: Repo, connectStatus: boolean): void {\n  repoUpdateInfo(repo, 'connected', connectStatus);\n  if (connectStatus === false) {\n    repoRunOnDisconnectEvents(repo);\n  }\n}\n\nfunction repoOnServerInfoUpdate(repo: Repo, updates: object): void {\n  each(updates, (key: string, value: unknown) => {\n    repoUpdateInfo(repo, key, value);\n  });\n}\n\nfunction repoUpdateInfo(repo: Repo, pathString: string, value: unknown): void {\n  const path = new Path('/.info/' + pathString);\n  const newNode = nodeFromJSON(value);\n  repo.infoData_.updateSnapshot(path, newNode);\n  const events = syncTreeApplyServerOverwrite(\n    repo.infoSyncTree_,\n    path,\n    newNode\n  );\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n}\n\nfunction repoGetNextWriteId(repo: Repo): number {\n  return repo.nextWriteId_++;\n}\n\n/**\n * The purpose of `getValue` is to return the latest known value\n * satisfying `query`.\n *\n * This method will first check for in-memory cached values\n * belonging to active listeners. If they are found, such values\n * are considered to be the most up-to-date.\n *\n * If the client is not connected, this method will try to\n * establish a connection and request the value for `query`. If\n * the client is not able to retrieve the query result, it reports\n * an error.\n *\n * @param query - The query to surface a value for.\n */\nexport function repoGetValue(repo: Repo, query: QueryContext): Promise<Node> {\n  // Only active queries are cached. There is no persisted cache.\n  const cached = syncTreeGetServerValue(repo.serverSyncTree_, query);\n  if (cached != null) {\n    return Promise.resolve(cached);\n  }\n  return repo.server_.get(query).then(\n    payload => {\n      const node = nodeFromJSON(payload as string).withIndex(\n        query._queryParams.getIndex()\n      );\n      const events = syncTreeApplyServerOverwrite(\n        repo.serverSyncTree_,\n        query._path,\n        node\n      );\n      eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\n      return Promise.resolve(node);\n    },\n    err => {\n      repoLog(repo, 'get for query ' + stringify(query) + ' failed: ' + err);\n      return Promise.reject(new Error(err as string));\n    }\n  );\n}\n\nexport function repoSetWithPriority(\n  repo: Repo,\n  path: Path,\n  newVal: unknown,\n  newPriority: number | string | null,\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  repoLog(repo, 'set', {\n    path: path.toString(),\n    value: newVal,\n    priority: newPriority\n  });\n\n  // TODO: Optimize this behavior to either (a) store flag to skip resolving where possible and / or\n  // (b) store unresolved paths on JSON parse\n  const serverValues = repoGenerateServerValues(repo);\n  const newNodeUnresolved = nodeFromJSON(newVal, newPriority);\n  const existing = syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path);\n  const newNode = resolveDeferredValueSnapshot(\n    newNodeUnresolved,\n    existing,\n    serverValues\n  );\n\n  const writeId = repoGetNextWriteId(repo);\n  const events = syncTreeApplyUserOverwrite(\n    repo.serverSyncTree_,\n    path,\n    newNode,\n    writeId,\n    true\n  );\n  eventQueueQueueEvents(repo.eventQueue_, events);\n  repo.server_.put(\n    path.toString(),\n    newNodeUnresolved.val(/*export=*/ true),\n    (status, errorReason) => {\n      const success = status === 'ok';\n      if (!success) {\n        warn('set at ' + path + ' failed: ' + status);\n      }\n\n      const clearEvents = syncTreeAckUserWrite(\n        repo.serverSyncTree_,\n        writeId,\n        !success\n      );\n      eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, clearEvents);\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    }\n  );\n  const affectedPath = repoAbortTransactions(repo, path);\n  repoRerunTransactions(repo, affectedPath);\n  // We queued the events above, so just flush the queue here\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, []);\n}\n\nexport function repoUpdate(\n  repo: Repo,\n  path: Path,\n  childrenToMerge: { [k: string]: unknown },\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  repoLog(repo, 'update', { path: path.toString(), value: childrenToMerge });\n\n  // Start with our existing data and merge each child into it.\n  let empty = true;\n  const serverValues = repoGenerateServerValues(repo);\n  const changedChildren: { [k: string]: Node } = {};\n  each(childrenToMerge, (changedKey: string, changedValue: unknown) => {\n    empty = false;\n    changedChildren[changedKey] = resolveDeferredValueTree(\n      pathChild(path, changedKey),\n      nodeFromJSON(changedValue),\n      repo.serverSyncTree_,\n      serverValues\n    );\n  });\n\n  if (!empty) {\n    const writeId = repoGetNextWriteId(repo);\n    const events = syncTreeApplyUserMerge(\n      repo.serverSyncTree_,\n      path,\n      changedChildren,\n      writeId\n    );\n    eventQueueQueueEvents(repo.eventQueue_, events);\n    repo.server_.merge(\n      path.toString(),\n      childrenToMerge,\n      (status, errorReason) => {\n        const success = status === 'ok';\n        if (!success) {\n          warn('update at ' + path + ' failed: ' + status);\n        }\n\n        const clearEvents = syncTreeAckUserWrite(\n          repo.serverSyncTree_,\n          writeId,\n          !success\n        );\n        const affectedPath =\n          clearEvents.length > 0 ? repoRerunTransactions(repo, path) : path;\n        eventQueueRaiseEventsForChangedPath(\n          repo.eventQueue_,\n          affectedPath,\n          clearEvents\n        );\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n      }\n    );\n\n    each(childrenToMerge, (changedPath: string) => {\n      const affectedPath = repoAbortTransactions(\n        repo,\n        pathChild(path, changedPath)\n      );\n      repoRerunTransactions(repo, affectedPath);\n    });\n\n    // We queued the events above, so just flush the queue here\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, []);\n  } else {\n    log(\"update() called with empty data.  Don't do anything.\");\n    repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\n  }\n}\n\n/**\n * Applies all of the changes stored up in the onDisconnect_ tree.\n */\nfunction repoRunOnDisconnectEvents(repo: Repo): void {\n  repoLog(repo, 'onDisconnectEvents');\n\n  const serverValues = repoGenerateServerValues(repo);\n  const resolvedOnDisconnectTree = newSparseSnapshotTree();\n  sparseSnapshotTreeForEachTree(\n    repo.onDisconnect_,\n    newEmptyPath(),\n    (path, node) => {\n      const resolved = resolveDeferredValueTree(\n        path,\n        node,\n        repo.serverSyncTree_,\n        serverValues\n      );\n      sparseSnapshotTreeRemember(resolvedOnDisconnectTree, path, resolved);\n    }\n  );\n  let events: Event[] = [];\n\n  sparseSnapshotTreeForEachTree(\n    resolvedOnDisconnectTree,\n    newEmptyPath(),\n    (path, snap) => {\n      events = events.concat(\n        syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap)\n      );\n      const affectedPath = repoAbortTransactions(repo, path);\n      repoRerunTransactions(repo, affectedPath);\n    }\n  );\n\n  repo.onDisconnect_ = newSparseSnapshotTree();\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, newEmptyPath(), events);\n}\n\nexport function repoOnDisconnectCancel(\n  repo: Repo,\n  path: Path,\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  repo.server_.onDisconnectCancel(path.toString(), (status, errorReason) => {\n    if (status === 'ok') {\n      sparseSnapshotTreeForget(repo.onDisconnect_, path);\n    }\n    repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n  });\n}\n\nexport function repoOnDisconnectSet(\n  repo: Repo,\n  path: Path,\n  value: unknown,\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  const newNode = nodeFromJSON(value);\n  repo.server_.onDisconnectPut(\n    path.toString(),\n    newNode.val(/*export=*/ true),\n    (status, errorReason) => {\n      if (status === 'ok') {\n        sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\n      }\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    }\n  );\n}\n\nexport function repoOnDisconnectSetWithPriority(\n  repo: Repo,\n  path: Path,\n  value: unknown,\n  priority: unknown,\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  const newNode = nodeFromJSON(value, priority);\n  repo.server_.onDisconnectPut(\n    path.toString(),\n    newNode.val(/*export=*/ true),\n    (status, errorReason) => {\n      if (status === 'ok') {\n        sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\n      }\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    }\n  );\n}\n\nexport function repoOnDisconnectUpdate(\n  repo: Repo,\n  path: Path,\n  childrenToMerge: { [k: string]: unknown },\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  if (isEmpty(childrenToMerge)) {\n    log(\"onDisconnect().update() called with empty data.  Don't do anything.\");\n    repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\n    return;\n  }\n\n  repo.server_.onDisconnectMerge(\n    path.toString(),\n    childrenToMerge,\n    (status, errorReason) => {\n      if (status === 'ok') {\n        each(childrenToMerge, (childName: string, childNode: unknown) => {\n          const newChildNode = nodeFromJSON(childNode);\n          sparseSnapshotTreeRemember(\n            repo.onDisconnect_,\n            pathChild(path, childName),\n            newChildNode\n          );\n        });\n      }\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    }\n  );\n}\n\nexport function repoAddEventCallbackForQuery(\n  repo: Repo,\n  query: QueryContext,\n  eventRegistration: EventRegistration\n): void {\n  let events;\n  if (pathGetFront(query._path) === '.info') {\n    events = syncTreeAddEventRegistration(\n      repo.infoSyncTree_,\n      query,\n      eventRegistration\n    );\n  } else {\n    events = syncTreeAddEventRegistration(\n      repo.serverSyncTree_,\n      query,\n      eventRegistration\n    );\n  }\n  eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\n}\n\nexport function repoRemoveEventCallbackForQuery(\n  repo: Repo,\n  query: QueryContext,\n  eventRegistration: EventRegistration\n): void {\n  // These are guaranteed not to raise events, since we're not passing in a cancelError. However, we can future-proof\n  // a little bit by handling the return values anyways.\n  let events;\n  if (pathGetFront(query._path) === '.info') {\n    events = syncTreeRemoveEventRegistration(\n      repo.infoSyncTree_,\n      query,\n      eventRegistration\n    );\n  } else {\n    events = syncTreeRemoveEventRegistration(\n      repo.serverSyncTree_,\n      query,\n      eventRegistration\n    );\n  }\n  eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\n}\n\nexport function repoInterrupt(repo: Repo): void {\n  if (repo.persistentConnection_) {\n    repo.persistentConnection_.interrupt(INTERRUPT_REASON);\n  }\n}\n\nexport function repoResume(repo: Repo): void {\n  if (repo.persistentConnection_) {\n    repo.persistentConnection_.resume(INTERRUPT_REASON);\n  }\n}\n\nexport function repoStats(repo: Repo, showDelta: boolean = false): void {\n  if (typeof console === 'undefined') {\n    return;\n  }\n\n  let stats: { [k: string]: unknown };\n  if (showDelta) {\n    if (!repo.statsListener_) {\n      repo.statsListener_ = new StatsListener(repo.stats_);\n    }\n    stats = repo.statsListener_.get();\n  } else {\n    stats = repo.stats_.get();\n  }\n\n  const longestName = Object.keys(stats).reduce(\n    (previousValue, currentValue) =>\n      Math.max(currentValue.length, previousValue),\n    0\n  );\n\n  each(stats, (stat: string, value: unknown) => {\n    let paddedStat = stat;\n    // pad stat names to be the same length (plus 2 extra spaces).\n    for (let i = stat.length; i < longestName + 2; i++) {\n      paddedStat += ' ';\n    }\n    console.log(paddedStat + value);\n  });\n}\n\nexport function repoStatsIncrementCounter(repo: Repo, metric: string): void {\n  repo.stats_.incrementCounter(metric);\n  statsReporterIncludeStat(repo.statsReporter_, metric);\n}\n\nfunction repoLog(repo: Repo, ...varArgs: unknown[]): void {\n  let prefix = '';\n  if (repo.persistentConnection_) {\n    prefix = repo.persistentConnection_.id + ':';\n  }\n  log(prefix, ...varArgs);\n}\n\nexport function repoCallOnCompleteCallback(\n  repo: Repo,\n  callback: ((status: Error | null, errorReason?: string) => void) | null,\n  status: string,\n  errorReason?: string | null\n): void {\n  if (callback) {\n    exceptionGuard(() => {\n      if (status === 'ok') {\n        callback(null);\n      } else {\n        const code = (status || 'error').toUpperCase();\n        let message = code;\n        if (errorReason) {\n          message += ': ' + errorReason;\n        }\n\n        const error = new Error(message);\n\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        (error as any).code = code;\n        callback(error);\n      }\n    });\n  }\n}\n\n/**\n * Creates a new transaction, adds it to the transactions we're tracking, and\n * sends it to the server if possible.\n *\n * @param path - Path at which to do transaction.\n * @param transactionUpdate - Update callback.\n * @param onComplete - Completion callback.\n * @param unwatcher - Function that will be called when the transaction no longer\n * need data updates for `path`.\n * @param applyLocally - Whether or not to make intermediate results visible\n */\nexport function repoStartTransaction(\n  repo: Repo,\n  path: Path,\n  transactionUpdate: (a: unknown) => unknown,\n  onComplete: ((error: Error, committed: boolean, node: Node) => void) | null,\n  unwatcher: () => void,\n  applyLocally: boolean\n): void {\n  repoLog(repo, 'transaction on ' + path);\n\n  // Initialize transaction.\n  const transaction: Transaction = {\n    path,\n    update: transactionUpdate,\n    onComplete,\n    // One of TransactionStatus enums.\n    status: null,\n    // Used when combining transactions at different locations to figure out\n    // which one goes first.\n    order: LUIDGenerator(),\n    // Whether to raise local events for this transaction.\n    applyLocally,\n    // Count of how many times we've retried the transaction.\n    retryCount: 0,\n    // Function to call to clean up our .on() listener.\n    unwatcher,\n    // Stores why a transaction was aborted.\n    abortReason: null,\n    currentWriteId: null,\n    currentInputSnapshot: null,\n    currentOutputSnapshotRaw: null,\n    currentOutputSnapshotResolved: null\n  };\n\n  // Run transaction initially.\n  const currentState = repoGetLatestState(repo, path, undefined);\n  transaction.currentInputSnapshot = currentState;\n  const newVal = transaction.update(currentState.val());\n  if (newVal === undefined) {\n    // Abort transaction.\n    transaction.unwatcher();\n    transaction.currentOutputSnapshotRaw = null;\n    transaction.currentOutputSnapshotResolved = null;\n    if (transaction.onComplete) {\n      transaction.onComplete(null, false, transaction.currentInputSnapshot);\n    }\n  } else {\n    validateFirebaseData(\n      'transaction failed: Data returned ',\n      newVal,\n      transaction.path\n    );\n\n    // Mark as run and add to our queue.\n    transaction.status = TransactionStatus.RUN;\n    const queueNode = treeSubTree(repo.transactionQueueTree_, path);\n    const nodeQueue = treeGetValue(queueNode) || [];\n    nodeQueue.push(transaction);\n\n    treeSetValue(queueNode, nodeQueue);\n\n    // Update visibleData and raise events\n    // Note: We intentionally raise events after updating all of our\n    // transaction state, since the user could start new transactions from the\n    // event callbacks.\n    let priorityForNode;\n    if (\n      typeof newVal === 'object' &&\n      newVal !== null &&\n      contains(newVal, '.priority')\n    ) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      priorityForNode = safeGet(newVal as any, '.priority');\n      assert(\n        isValidPriority(priorityForNode),\n        'Invalid priority returned by transaction. ' +\n          'Priority must be a valid string, finite number, server value, or null.'\n      );\n    } else {\n      const currentNode =\n        syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path) ||\n        ChildrenNode.EMPTY_NODE;\n      priorityForNode = currentNode.getPriority().val();\n    }\n\n    const serverValues = repoGenerateServerValues(repo);\n    const newNodeUnresolved = nodeFromJSON(newVal, priorityForNode);\n    const newNode = resolveDeferredValueSnapshot(\n      newNodeUnresolved,\n      currentState,\n      serverValues\n    );\n    transaction.currentOutputSnapshotRaw = newNodeUnresolved;\n    transaction.currentOutputSnapshotResolved = newNode;\n    transaction.currentWriteId = repoGetNextWriteId(repo);\n\n    const events = syncTreeApplyUserOverwrite(\n      repo.serverSyncTree_,\n      path,\n      newNode,\n      transaction.currentWriteId,\n      transaction.applyLocally\n    );\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n\n    repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n  }\n}\n\n/**\n * @param excludeSets - A specific set to exclude\n */\nfunction repoGetLatestState(\n  repo: Repo,\n  path: Path,\n  excludeSets?: number[]\n): Node {\n  return (\n    syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path, excludeSets) ||\n    ChildrenNode.EMPTY_NODE\n  );\n}\n\n/**\n * Sends any already-run transactions that aren't waiting for outstanding\n * transactions to complete.\n *\n * Externally it's called with no arguments, but it calls itself recursively\n * with a particular transactionQueueTree node to recurse through the tree.\n *\n * @param node - transactionQueueTree node to start at.\n */\nfunction repoSendReadyTransactions(\n  repo: Repo,\n  node: Tree<Transaction[]> = repo.transactionQueueTree_\n): void {\n  // Before recursing, make sure any completed transactions are removed.\n  if (!node) {\n    repoPruneCompletedTransactionsBelowNode(repo, node);\n  }\n\n  if (treeGetValue(node)) {\n    const queue = repoBuildTransactionQueue(repo, node);\n    assert(queue.length > 0, 'Sending zero length transaction queue');\n\n    const allRun = queue.every(\n      (transaction: Transaction) => transaction.status === TransactionStatus.RUN\n    );\n\n    // If they're all run (and not sent), we can send them.  Else, we must wait.\n    if (allRun) {\n      repoSendTransactionQueue(repo, treeGetPath(node), queue);\n    }\n  } else if (treeHasChildren(node)) {\n    treeForEachChild(node, childNode => {\n      repoSendReadyTransactions(repo, childNode);\n    });\n  }\n}\n\n/**\n * Given a list of run transactions, send them to the server and then handle\n * the result (success or failure).\n *\n * @param path - The location of the queue.\n * @param queue - Queue of transactions under the specified location.\n */\nfunction repoSendTransactionQueue(\n  repo: Repo,\n  path: Path,\n  queue: Transaction[]\n): void {\n  // Mark transactions as sent and increment retry count!\n  const setsToIgnore = queue.map(txn => {\n    return txn.currentWriteId;\n  });\n  const latestState = repoGetLatestState(repo, path, setsToIgnore);\n  let snapToSend = latestState;\n  const latestHash = latestState.hash();\n  for (let i = 0; i < queue.length; i++) {\n    const txn = queue[i];\n    assert(\n      txn.status === TransactionStatus.RUN,\n      'tryToSendTransactionQueue_: items in queue should all be run.'\n    );\n    txn.status = TransactionStatus.SENT;\n    txn.retryCount++;\n    const relativePath = newRelativePath(path, txn.path);\n    // If we've gotten to this point, the output snapshot must be defined.\n    snapToSend = snapToSend.updateChild(\n      relativePath /** @type {!Node} */,\n      txn.currentOutputSnapshotRaw\n    );\n  }\n\n  const dataToSend = snapToSend.val(true);\n  const pathToSend = path;\n\n  // Send the put.\n  repo.server_.put(\n    pathToSend.toString(),\n    dataToSend,\n    (status: string) => {\n      repoLog(repo, 'transaction put response', {\n        path: pathToSend.toString(),\n        status\n      });\n\n      let events: Event[] = [];\n      if (status === 'ok') {\n        // Queue up the callbacks and fire them after cleaning up all of our\n        // transaction state, since the callback could trigger more\n        // transactions or sets.\n        const callbacks = [];\n        for (let i = 0; i < queue.length; i++) {\n          queue[i].status = TransactionStatus.COMPLETED;\n          events = events.concat(\n            syncTreeAckUserWrite(repo.serverSyncTree_, queue[i].currentWriteId)\n          );\n          if (queue[i].onComplete) {\n            // We never unset the output snapshot, and given that this\n            // transaction is complete, it should be set\n            callbacks.push(() =>\n              queue[i].onComplete(\n                null,\n                true,\n                queue[i].currentOutputSnapshotResolved\n              )\n            );\n          }\n          queue[i].unwatcher();\n        }\n\n        // Now remove the completed transactions.\n        repoPruneCompletedTransactionsBelowNode(\n          repo,\n          treeSubTree(repo.transactionQueueTree_, path)\n        );\n        // There may be pending transactions that we can now send.\n        repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n\n        // Finally, trigger onComplete callbacks.\n        for (let i = 0; i < callbacks.length; i++) {\n          exceptionGuard(callbacks[i]);\n        }\n      } else {\n        // transactions are no longer sent.  Update their status appropriately.\n        if (status === 'datastale') {\n          for (let i = 0; i < queue.length; i++) {\n            if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT) {\n              queue[i].status = TransactionStatus.NEEDS_ABORT;\n            } else {\n              queue[i].status = TransactionStatus.RUN;\n            }\n          }\n        } else {\n          warn(\n            'transaction at ' + pathToSend.toString() + ' failed: ' + status\n          );\n          for (let i = 0; i < queue.length; i++) {\n            queue[i].status = TransactionStatus.NEEDS_ABORT;\n            queue[i].abortReason = status;\n          }\n        }\n\n        repoRerunTransactions(repo, path);\n      }\n    },\n    latestHash\n  );\n}\n\n/**\n * Finds all transactions dependent on the data at changedPath and reruns them.\n *\n * Should be called any time cached data changes.\n *\n * Return the highest path that was affected by rerunning transactions. This\n * is the path at which events need to be raised for.\n *\n * @param changedPath - The path in mergedData that changed.\n * @returns The rootmost path that was affected by rerunning transactions.\n */\nfunction repoRerunTransactions(repo: Repo, changedPath: Path): Path {\n  const rootMostTransactionNode = repoGetAncestorTransactionNode(\n    repo,\n    changedPath\n  );\n  const path = treeGetPath(rootMostTransactionNode);\n\n  const queue = repoBuildTransactionQueue(repo, rootMostTransactionNode);\n  repoRerunTransactionQueue(repo, queue, path);\n\n  return path;\n}\n\n/**\n * Does all the work of rerunning transactions (as well as cleans up aborted\n * transactions and whatnot).\n *\n * @param queue - The queue of transactions to run.\n * @param path - The path the queue is for.\n */\nfunction repoRerunTransactionQueue(\n  repo: Repo,\n  queue: Transaction[],\n  path: Path\n): void {\n  if (queue.length === 0) {\n    return; // Nothing to do!\n  }\n\n  // Queue up the callbacks and fire them after cleaning up all of our\n  // transaction state, since the callback could trigger more transactions or\n  // sets.\n  const callbacks = [];\n  let events: Event[] = [];\n  // Ignore all of the sets we're going to re-run.\n  const txnsToRerun = queue.filter(q => {\n    return q.status === TransactionStatus.RUN;\n  });\n  const setsToIgnore = txnsToRerun.map(q => {\n    return q.currentWriteId;\n  });\n  for (let i = 0; i < queue.length; i++) {\n    const transaction = queue[i];\n    const relativePath = newRelativePath(path, transaction.path);\n    let abortTransaction = false,\n      abortReason;\n    assert(\n      relativePath !== null,\n      'rerunTransactionsUnderNode_: relativePath should not be null.'\n    );\n\n    if (transaction.status === TransactionStatus.NEEDS_ABORT) {\n      abortTransaction = true;\n      abortReason = transaction.abortReason;\n      events = events.concat(\n        syncTreeAckUserWrite(\n          repo.serverSyncTree_,\n          transaction.currentWriteId,\n          true\n        )\n      );\n    } else if (transaction.status === TransactionStatus.RUN) {\n      if (transaction.retryCount >= MAX_TRANSACTION_RETRIES) {\n        abortTransaction = true;\n        abortReason = 'maxretry';\n        events = events.concat(\n          syncTreeAckUserWrite(\n            repo.serverSyncTree_,\n            transaction.currentWriteId,\n            true\n          )\n        );\n      } else {\n        // This code reruns a transaction\n        const currentNode = repoGetLatestState(\n          repo,\n          transaction.path,\n          setsToIgnore\n        );\n        transaction.currentInputSnapshot = currentNode;\n        const newData = queue[i].update(currentNode.val());\n        if (newData !== undefined) {\n          validateFirebaseData(\n            'transaction failed: Data returned ',\n            newData,\n            transaction.path\n          );\n          let newDataNode = nodeFromJSON(newData);\n          const hasExplicitPriority =\n            typeof newData === 'object' &&\n            newData != null &&\n            contains(newData, '.priority');\n          if (!hasExplicitPriority) {\n            // Keep the old priority if there wasn't a priority explicitly specified.\n            newDataNode = newDataNode.updatePriority(currentNode.getPriority());\n          }\n\n          const oldWriteId = transaction.currentWriteId;\n          const serverValues = repoGenerateServerValues(repo);\n          const newNodeResolved = resolveDeferredValueSnapshot(\n            newDataNode,\n            currentNode,\n            serverValues\n          );\n\n          transaction.currentOutputSnapshotRaw = newDataNode;\n          transaction.currentOutputSnapshotResolved = newNodeResolved;\n          transaction.currentWriteId = repoGetNextWriteId(repo);\n          // Mutates setsToIgnore in place\n          setsToIgnore.splice(setsToIgnore.indexOf(oldWriteId), 1);\n          events = events.concat(\n            syncTreeApplyUserOverwrite(\n              repo.serverSyncTree_,\n              transaction.path,\n              newNodeResolved,\n              transaction.currentWriteId,\n              transaction.applyLocally\n            )\n          );\n          events = events.concat(\n            syncTreeAckUserWrite(repo.serverSyncTree_, oldWriteId, true)\n          );\n        } else {\n          abortTransaction = true;\n          abortReason = 'nodata';\n          events = events.concat(\n            syncTreeAckUserWrite(\n              repo.serverSyncTree_,\n              transaction.currentWriteId,\n              true\n            )\n          );\n        }\n      }\n    }\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n    events = [];\n    if (abortTransaction) {\n      // Abort.\n      queue[i].status = TransactionStatus.COMPLETED;\n\n      // Removing a listener can trigger pruning which can muck with\n      // mergedData/visibleData (as it prunes data). So defer the unwatcher\n      // until we're done.\n      (function (unwatcher) {\n        setTimeout(unwatcher, Math.floor(0));\n      })(queue[i].unwatcher);\n\n      if (queue[i].onComplete) {\n        if (abortReason === 'nodata') {\n          callbacks.push(() =>\n            queue[i].onComplete(null, false, queue[i].currentInputSnapshot)\n          );\n        } else {\n          callbacks.push(() =>\n            queue[i].onComplete(new Error(abortReason), false, null)\n          );\n        }\n      }\n    }\n  }\n\n  // Clean up completed transactions.\n  repoPruneCompletedTransactionsBelowNode(repo, repo.transactionQueueTree_);\n\n  // Now fire callbacks, now that we're in a good, known state.\n  for (let i = 0; i < callbacks.length; i++) {\n    exceptionGuard(callbacks[i]);\n  }\n\n  // Try to send the transaction result to the server.\n  repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n}\n\n/**\n * Returns the rootmost ancestor node of the specified path that has a pending\n * transaction on it, or just returns the node for the given path if there are\n * no pending transactions on any ancestor.\n *\n * @param path - The location to start at.\n * @returns The rootmost node with a transaction.\n */\nfunction repoGetAncestorTransactionNode(\n  repo: Repo,\n  path: Path\n): Tree<Transaction[]> {\n  let front;\n\n  // Start at the root and walk deeper into the tree towards path until we\n  // find a node with pending transactions.\n  let transactionNode = repo.transactionQueueTree_;\n  front = pathGetFront(path);\n  while (front !== null && treeGetValue(transactionNode) === undefined) {\n    transactionNode = treeSubTree(transactionNode, front);\n    path = pathPopFront(path);\n    front = pathGetFront(path);\n  }\n\n  return transactionNode;\n}\n\n/**\n * Builds the queue of all transactions at or below the specified\n * transactionNode.\n *\n * @param transactionNode\n * @returns The generated queue.\n */\nfunction repoBuildTransactionQueue(\n  repo: Repo,\n  transactionNode: Tree<Transaction[]>\n): Transaction[] {\n  // Walk any child transaction queues and aggregate them into a single queue.\n  const transactionQueue: Transaction[] = [];\n  repoAggregateTransactionQueuesForNode(\n    repo,\n    transactionNode,\n    transactionQueue\n  );\n\n  // Sort them by the order the transactions were created.\n  transactionQueue.sort((a, b) => a.order - b.order);\n\n  return transactionQueue;\n}\n\nfunction repoAggregateTransactionQueuesForNode(\n  repo: Repo,\n  node: Tree<Transaction[]>,\n  queue: Transaction[]\n): void {\n  const nodeQueue = treeGetValue(node);\n  if (nodeQueue) {\n    for (let i = 0; i < nodeQueue.length; i++) {\n      queue.push(nodeQueue[i]);\n    }\n  }\n\n  treeForEachChild(node, child => {\n    repoAggregateTransactionQueuesForNode(repo, child, queue);\n  });\n}\n\n/**\n * Remove COMPLETED transactions at or below this node in the transactionQueueTree_.\n */\nfunction repoPruneCompletedTransactionsBelowNode(\n  repo: Repo,\n  node: Tree<Transaction[]>\n): void {\n  const queue = treeGetValue(node);\n  if (queue) {\n    let to = 0;\n    for (let from = 0; from < queue.length; from++) {\n      if (queue[from].status !== TransactionStatus.COMPLETED) {\n        queue[to] = queue[from];\n        to++;\n      }\n    }\n    queue.length = to;\n    treeSetValue(node, queue.length > 0 ? queue : undefined);\n  }\n\n  treeForEachChild(node, childNode => {\n    repoPruneCompletedTransactionsBelowNode(repo, childNode);\n  });\n}\n\n/**\n * Aborts all transactions on ancestors or descendants of the specified path.\n * Called when doing a set() or update() since we consider them incompatible\n * with transactions.\n *\n * @param path - Path for which we want to abort related transactions.\n */\nfunction repoAbortTransactions(repo: Repo, path: Path): Path {\n  const affectedPath = treeGetPath(repoGetAncestorTransactionNode(repo, path));\n\n  const transactionNode = treeSubTree(repo.transactionQueueTree_, path);\n\n  treeForEachAncestor(transactionNode, (node: Tree<Transaction[]>) => {\n    repoAbortTransactionsOnNode(repo, node);\n  });\n\n  repoAbortTransactionsOnNode(repo, transactionNode);\n\n  treeForEachDescendant(transactionNode, (node: Tree<Transaction[]>) => {\n    repoAbortTransactionsOnNode(repo, node);\n  });\n\n  return affectedPath;\n}\n\n/**\n * Abort transactions stored in this transaction queue node.\n *\n * @param node - Node to abort transactions for.\n */\nfunction repoAbortTransactionsOnNode(\n  repo: Repo,\n  node: Tree<Transaction[]>\n): void {\n  const queue = treeGetValue(node);\n  if (queue) {\n    // Queue up the callbacks and fire them after cleaning up all of our\n    // transaction state, since the callback could trigger more transactions\n    // or sets.\n    const callbacks = [];\n\n    // Go through queue.  Any already-sent transactions must be marked for\n    // abort, while the unsent ones can be immediately aborted and removed.\n    let events: Event[] = [];\n    let lastSent = -1;\n    for (let i = 0; i < queue.length; i++) {\n      if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT) {\n        // Already marked.  No action needed.\n      } else if (queue[i].status === TransactionStatus.SENT) {\n        assert(\n          lastSent === i - 1,\n          'All SENT items should be at beginning of queue.'\n        );\n        lastSent = i;\n        // Mark transaction for abort when it comes back.\n        queue[i].status = TransactionStatus.SENT_NEEDS_ABORT;\n        queue[i].abortReason = 'set';\n      } else {\n        assert(\n          queue[i].status === TransactionStatus.RUN,\n          'Unexpected transaction status in abort'\n        );\n        // We can abort it immediately.\n        queue[i].unwatcher();\n        events = events.concat(\n          syncTreeAckUserWrite(\n            repo.serverSyncTree_,\n            queue[i].currentWriteId,\n            true\n          )\n        );\n        if (queue[i].onComplete) {\n          callbacks.push(\n            queue[i].onComplete.bind(null, new Error('set'), false, null)\n          );\n        }\n      }\n    }\n    if (lastSent === -1) {\n      // We're not waiting for any sent transactions.  We can clear the queue.\n      treeSetValue(node, undefined);\n    } else {\n      // Remove the transactions we aborted.\n      queue.length = lastSent + 1;\n    }\n\n    // Now fire the callbacks.\n    eventQueueRaiseEventsForChangedPath(\n      repo.eventQueue_,\n      treeGetPath(node),\n      events\n    );\n    for (let i = 0; i < callbacks.length; i++) {\n      exceptionGuard(callbacks[i]);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../../RepoInfo';\nimport { Path } from '../Path';\nimport { warnIfPageIsSecure, warn, fatal } from '../util';\n\nfunction decodePath(pathString: string): string {\n  let pathStringDecoded = '';\n  const pieces = pathString.split('/');\n  for (let i = 0; i < pieces.length; i++) {\n    if (pieces[i].length > 0) {\n      let piece = pieces[i];\n      try {\n        piece = decodeURIComponent(piece.replace(/\\+/g, ' '));\n      } catch (e) {}\n      pathStringDecoded += '/' + piece;\n    }\n  }\n  return pathStringDecoded;\n}\n\n/**\n * @returns key value hash\n */\nfunction decodeQuery(queryString: string): { [key: string]: string } {\n  const results = {};\n  if (queryString.charAt(0) === '?') {\n    queryString = queryString.substring(1);\n  }\n  for (const segment of queryString.split('&')) {\n    if (segment.length === 0) {\n      continue;\n    }\n    const kv = segment.split('=');\n    if (kv.length === 2) {\n      results[decodeURIComponent(kv[0])] = decodeURIComponent(kv[1]);\n    } else {\n      warn(`Invalid query segment '${segment}' in query '${queryString}'`);\n    }\n  }\n  return results;\n}\n\nexport const parseRepoInfo = function (\n  dataURL: string,\n  nodeAdmin: boolean\n): { repoInfo: RepoInfo; path: Path } {\n  const parsedUrl = parseDatabaseURL(dataURL),\n    namespace = parsedUrl.namespace;\n\n  if (parsedUrl.domain === 'firebase.com') {\n    fatal(\n      parsedUrl.host +\n        ' is no longer supported. ' +\n        'Please use <YOUR FIREBASE>.firebaseio.com instead'\n    );\n  }\n\n  // Catch common error of uninitialized namespace value.\n  if (\n    (!namespace || namespace === 'undefined') &&\n    parsedUrl.domain !== 'localhost'\n  ) {\n    fatal(\n      'Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com'\n    );\n  }\n\n  if (!parsedUrl.secure) {\n    warnIfPageIsSecure();\n  }\n\n  const webSocketOnly = parsedUrl.scheme === 'ws' || parsedUrl.scheme === 'wss';\n\n  return {\n    repoInfo: new RepoInfo(\n      parsedUrl.host,\n      parsedUrl.secure,\n      namespace,\n      nodeAdmin,\n      webSocketOnly,\n      /*persistenceKey=*/ '',\n      /*includeNamespaceInQueryParams=*/ namespace !== parsedUrl.subdomain\n    ),\n    path: new Path(parsedUrl.pathString)\n  };\n};\n\nexport const parseDatabaseURL = function (dataURL: string): {\n  host: string;\n  port: number;\n  domain: string;\n  subdomain: string;\n  secure: boolean;\n  scheme: string;\n  pathString: string;\n  namespace: string;\n} {\n  // Default to empty strings in the event of a malformed string.\n  let host = '',\n    domain = '',\n    subdomain = '',\n    pathString = '',\n    namespace = '';\n\n  // Always default to SSL, unless otherwise specified.\n  let secure = true,\n    scheme = 'https',\n    port = 443;\n\n  // Don't do any validation here. The caller is responsible for validating the result of parsing.\n  if (typeof dataURL === 'string') {\n    // Parse scheme.\n    let colonInd = dataURL.indexOf('//');\n    if (colonInd >= 0) {\n      scheme = dataURL.substring(0, colonInd - 1);\n      dataURL = dataURL.substring(colonInd + 2);\n    }\n\n    // Parse host, path, and query string.\n    let slashInd = dataURL.indexOf('/');\n    if (slashInd === -1) {\n      slashInd = dataURL.length;\n    }\n    let questionMarkInd = dataURL.indexOf('?');\n    if (questionMarkInd === -1) {\n      questionMarkInd = dataURL.length;\n    }\n    host = dataURL.substring(0, Math.min(slashInd, questionMarkInd));\n    if (slashInd < questionMarkInd) {\n      // For pathString, questionMarkInd will always come after slashInd\n      pathString = decodePath(dataURL.substring(slashInd, questionMarkInd));\n    }\n    const queryParams = decodeQuery(\n      dataURL.substring(Math.min(dataURL.length, questionMarkInd))\n    );\n\n    // If we have a port, use scheme for determining if it's secure.\n    colonInd = host.indexOf(':');\n    if (colonInd >= 0) {\n      secure = scheme === 'https' || scheme === 'wss';\n      port = parseInt(host.substring(colonInd + 1), 10);\n    } else {\n      colonInd = host.length;\n    }\n\n    const hostWithoutPort = host.slice(0, colonInd);\n    if (hostWithoutPort.toLowerCase() === 'localhost') {\n      domain = 'localhost';\n    } else if (hostWithoutPort.split('.').length <= 2) {\n      domain = hostWithoutPort;\n    } else {\n      // Interpret the subdomain of a 3 or more component URL as the namespace name.\n      const dotInd = host.indexOf('.');\n      subdomain = host.substring(0, dotInd).toLowerCase();\n      domain = host.substring(dotInd + 1);\n      // Normalize namespaces to lowercase to share storage / connection.\n      namespace = subdomain;\n    }\n    // Always treat the value of the `ns` as the namespace name if it is present.\n    if ('ns' in queryParams) {\n      namespace = queryParams['ns'];\n    }\n  }\n\n  return {\n    host,\n    port,\n    domain,\n    subdomain,\n    secure,\n    scheme,\n    pathString,\n    namespace\n  };\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { stringify } from '@firebase/util';\n\nimport { DataSnapshot as ExpDataSnapshot } from '../../api/Reference_impl';\nimport { Path } from '../util/Path';\n\nimport { EventRegistration } from './EventRegistration';\n\n/**\n * Encapsulates the data needed to raise an event\n * @interface\n */\nexport interface Event {\n  getPath(): Path;\n\n  getEventType(): string;\n\n  getEventRunner(): () => void;\n\n  toString(): string;\n}\n\n/**\n * One of the following strings: \"value\", \"child_added\", \"child_changed\",\n * \"child_removed\", or \"child_moved.\"\n */\nexport type EventType =\n  | 'value'\n  | 'child_added'\n  | 'child_changed'\n  | 'child_moved'\n  | 'child_removed';\n\n/**\n * Encapsulates the data needed to raise an event\n */\nexport class DataEvent implements Event {\n  /**\n   * @param eventType - One of: value, child_added, child_changed, child_moved, child_removed\n   * @param eventRegistration - The function to call to with the event data. User provided\n   * @param snapshot - The data backing the event\n   * @param prevName - Optional, the name of the previous child for child_* events.\n   */\n  constructor(\n    public eventType: EventType,\n    public eventRegistration: EventRegistration,\n    public snapshot: ExpDataSnapshot,\n    public prevName?: string | null\n  ) {}\n  getPath(): Path {\n    const ref = this.snapshot.ref;\n    if (this.eventType === 'value') {\n      return ref._path;\n    } else {\n      return ref.parent._path;\n    }\n  }\n  getEventType(): string {\n    return this.eventType;\n  }\n  getEventRunner(): () => void {\n    return this.eventRegistration.getEventRunner(this);\n  }\n  toString(): string {\n    return (\n      this.getPath().toString() +\n      ':' +\n      this.eventType +\n      ':' +\n      stringify(this.snapshot.exportVal())\n    );\n  }\n}\n\nexport class CancelEvent implements Event {\n  constructor(\n    public eventRegistration: EventRegistration,\n    public error: Error,\n    public path: Path\n  ) {}\n  getPath(): Path {\n    return this.path;\n  }\n  getEventType(): string {\n    return 'cancel';\n  }\n  getEventRunner(): () => void {\n    return this.eventRegistration.getEventRunner(this);\n  }\n  toString(): string {\n    return this.path.toString() + ':cancel';\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { DataSnapshot } from '../../api/Reference_impl';\nimport { Repo } from '../Repo';\nimport { Path } from '../util/Path';\n\nimport { Change } from './Change';\nimport { CancelEvent, Event } from './Event';\nimport { QueryParams } from './QueryParams';\n\n/**\n * A user callback. Callbacks issues from the Legacy SDK maintain references\n * to the original user-issued callbacks, which allows equality\n * comparison by reference even though this callbacks are wrapped before\n * they can be passed to the firebase@exp SDK.\n *\n * @internal\n */\nexport interface UserCallback {\n  (dataSnapshot: DataSnapshot, previousChildName?: string | null): unknown;\n  userCallback?: unknown;\n  context?: object | null;\n}\n\n/**\n * A wrapper class that converts events from the database@exp SDK to the legacy\n * Database SDK. Events are not converted directly as event registration relies\n * on reference comparison of the original user callback (see `matches()`) and\n * relies on equality of the legacy SDK's `context` object.\n */\nexport class CallbackContext {\n  constructor(\n    private readonly snapshotCallback: UserCallback,\n    private readonly cancelCallback?: (error: Error) => unknown\n  ) {}\n\n  onValue(\n    expDataSnapshot: DataSnapshot,\n    previousChildName?: string | null\n  ): void {\n    this.snapshotCallback.call(null, expDataSnapshot, previousChildName);\n  }\n\n  onCancel(error: Error): void {\n    assert(\n      this.hasCancelCallback,\n      'Raising a cancel event on a listener with no cancel callback'\n    );\n    return this.cancelCallback.call(null, error);\n  }\n\n  get hasCancelCallback(): boolean {\n    return !!this.cancelCallback;\n  }\n\n  matches(other: CallbackContext): boolean {\n    return (\n      this.snapshotCallback === other.snapshotCallback ||\n      (this.snapshotCallback.userCallback !== undefined &&\n        this.snapshotCallback.userCallback ===\n          other.snapshotCallback.userCallback &&\n        this.snapshotCallback.context === other.snapshotCallback.context)\n    );\n  }\n}\n\nexport interface QueryContext {\n  readonly _queryIdentifier: string;\n  readonly _queryObject: object;\n  readonly _repo: Repo;\n  readonly _path: Path;\n  readonly _queryParams: QueryParams;\n}\n\n/**\n * An EventRegistration is basically an event type ('value', 'child_added', etc.) and a callback\n * to be notified of that type of event.\n *\n * That said, it can also contain a cancel callback to be notified if the event is canceled.  And\n * currently, this code is organized around the idea that you would register multiple child_ callbacks\n * together, as a single EventRegistration.  Though currently we don't do that.\n */\nexport interface EventRegistration {\n  /**\n   * True if this container has a callback to trigger for this event type\n   */\n  respondsTo(eventType: string): boolean;\n\n  createEvent(change: Change, query: QueryContext): Event;\n\n  /**\n   * Given event data, return a function to trigger the user's callback\n   */\n  getEventRunner(eventData: Event): () => void;\n\n  createCancelEvent(error: Error, path: Path): CancelEvent | null;\n\n  matches(other: EventRegistration): boolean;\n\n  /**\n   * False basically means this is a \"dummy\" callback container being used as a sentinel\n   * to remove all callback containers of a particular type.  (e.g. if the user does\n   * ref.off('value') without specifying a specific callback).\n   *\n   * (TODO: Rework this, since it's hacky)\n   *\n   */\n  hasAnyCallback(): boolean;\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Deferred } from '@firebase/util';\n\nimport {\n  Repo,\n  repoOnDisconnectCancel,\n  repoOnDisconnectSet,\n  repoOnDisconnectSetWithPriority,\n  repoOnDisconnectUpdate\n} from '../core/Repo';\nimport { Path } from '../core/util/Path';\nimport {\n  validateFirebaseDataArg,\n  validateFirebaseMergeDataArg,\n  validatePriority,\n  validateWritablePath\n} from '../core/util/validation';\n\n/**\n * The `onDisconnect` class allows you to write or clear data when your client\n * disconnects from the Database server. These updates occur whether your\n * client disconnects cleanly or not, so you can rely on them to clean up data\n * even if a connection is dropped or a client crashes.\n *\n * The `onDisconnect` class is most commonly used to manage presence in\n * applications where it is useful to detect how many clients are connected and\n * when other clients disconnect. See\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\n * for more information.\n *\n * To avoid problems when a connection is dropped before the requests can be\n * transferred to the Database server, these functions should be called before\n * writing any data.\n *\n * Note that `onDisconnect` operations are only triggered once. If you want an\n * operation to occur each time a disconnect occurs, you'll need to re-establish\n * the `onDisconnect` operations each time you reconnect.\n */\nexport class OnDisconnect {\n  /** @hideconstructor */\n  constructor(private _repo: Repo, private _path: Path) {}\n\n  /**\n   * Cancels all previously queued `onDisconnect()` set or update events for this\n   * location and all children.\n   *\n   * If a write has been queued for this location via a `set()` or `update()` at a\n   * parent location, the write at this location will be canceled, though writes\n   * to sibling locations will still occur.\n   *\n   * @returns Resolves when synchronization to the server is complete.\n   */\n  cancel(): Promise<void> {\n    const deferred = new Deferred<void>();\n    repoOnDisconnectCancel(\n      this._repo,\n      this._path,\n      deferred.wrapCallback(() => {})\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * Ensures the data at this location is deleted when the client is disconnected\n   * (due to closing the browser, navigating to a new page, or network issues).\n   *\n   * @returns Resolves when synchronization to the server is complete.\n   */\n  remove(): Promise<void> {\n    validateWritablePath('OnDisconnect.remove', this._path);\n    const deferred = new Deferred<void>();\n    repoOnDisconnectSet(\n      this._repo,\n      this._path,\n      null,\n      deferred.wrapCallback(() => {})\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * Ensures the data at this location is set to the specified value when the\n   * client is disconnected (due to closing the browser, navigating to a new page,\n   * or network issues).\n   *\n   * `set()` is especially useful for implementing \"presence\" systems, where a\n   * value should be changed or cleared when a user disconnects so that they\n   * appear \"offline\" to other users. See\n   * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\n   * for more information.\n   *\n   * Note that `onDisconnect` operations are only triggered once. If you want an\n   * operation to occur each time a disconnect occurs, you'll need to re-establish\n   * the `onDisconnect` operations each time.\n   *\n   * @param value - The value to be written to this location on disconnect (can\n   * be an object, array, string, number, boolean, or null).\n   * @returns Resolves when synchronization to the Database is complete.\n   */\n  set(value: unknown): Promise<void> {\n    validateWritablePath('OnDisconnect.set', this._path);\n    validateFirebaseDataArg('OnDisconnect.set', value, this._path, false);\n    const deferred = new Deferred<void>();\n    repoOnDisconnectSet(\n      this._repo,\n      this._path,\n      value,\n      deferred.wrapCallback(() => {})\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * Ensures the data at this location is set to the specified value and priority\n   * when the client is disconnected (due to closing the browser, navigating to a\n   * new page, or network issues).\n   *\n   * @param value - The value to be written to this location on disconnect (can\n   * be an object, array, string, number, boolean, or null).\n   * @param priority - The priority to be written (string, number, or null).\n   * @returns Resolves when synchronization to the Database is complete.\n   */\n  setWithPriority(\n    value: unknown,\n    priority: number | string | null\n  ): Promise<void> {\n    validateWritablePath('OnDisconnect.setWithPriority', this._path);\n    validateFirebaseDataArg(\n      'OnDisconnect.setWithPriority',\n      value,\n      this._path,\n      false\n    );\n    validatePriority('OnDisconnect.setWithPriority', priority, false);\n\n    const deferred = new Deferred<void>();\n    repoOnDisconnectSetWithPriority(\n      this._repo,\n      this._path,\n      value,\n      priority,\n      deferred.wrapCallback(() => {})\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * Writes multiple values at this location when the client is disconnected (due\n   * to closing the browser, navigating to a new page, or network issues).\n   *\n   * The `values` argument contains multiple property-value pairs that will be\n   * written to the Database together. Each child property can either be a simple\n   * property (for example, \"name\") or a relative path (for example, \"name/first\")\n   * from the current location to the data to update.\n   *\n   * As opposed to the `set()` method, `update()` can be use to selectively update\n   * only the referenced properties at the current location (instead of replacing\n   * all the child properties at the current location).\n   *\n   * @param values - Object containing multiple values.\n   * @returns Resolves when synchronization to the Database is complete.\n   */\n  update(values: object): Promise<void> {\n    validateWritablePath('OnDisconnect.update', this._path);\n    validateFirebaseMergeDataArg(\n      'OnDisconnect.update',\n      values,\n      this._path,\n      false\n    );\n    const deferred = new Deferred<void>();\n    repoOnDisconnectUpdate(\n      this._repo,\n      this._path,\n      values as Record<string, unknown>,\n      deferred.wrapCallback(() => {})\n    );\n    return deferred.promise;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, getModularInstance, Deferred } from '@firebase/util';\n\nimport {\n  Repo,\n  repoAddEventCallbackForQuery,\n  repoGetValue,\n  repoRemoveEventCallbackForQuery,\n  repoServerTime,\n  repoSetWithPriority,\n  repoUpdate\n} from '../core/Repo';\nimport { ChildrenNode } from '../core/snap/ChildrenNode';\nimport { Index } from '../core/snap/indexes/Index';\nimport { KEY_INDEX } from '../core/snap/indexes/KeyIndex';\nimport { PathIndex } from '../core/snap/indexes/PathIndex';\nimport { PRIORITY_INDEX } from '../core/snap/indexes/PriorityIndex';\nimport { VALUE_INDEX } from '../core/snap/indexes/ValueIndex';\nimport { Node } from '../core/snap/Node';\nimport { syncPointSetReferenceConstructor } from '../core/SyncPoint';\nimport { syncTreeSetReferenceConstructor } from '../core/SyncTree';\nimport { parseRepoInfo } from '../core/util/libs/parser';\nimport { nextPushId } from '../core/util/NextPushId';\nimport {\n  Path,\n  pathChild,\n  pathEquals,\n  pathGetBack,\n  pathGetFront,\n  pathIsEmpty,\n  pathParent,\n  pathToUrlEncodedString\n} from '../core/util/Path';\nimport {\n  fatal,\n  MAX_NAME,\n  MIN_NAME,\n  ObjectToUniqueKey\n} from '../core/util/util';\nimport {\n  isValidPriority,\n  validateFirebaseDataArg,\n  validateFirebaseMergeDataArg,\n  validateKey,\n  validatePathString,\n  validatePriority,\n  validateRootPathString,\n  validateUrl,\n  validateWritablePath\n} from '../core/util/validation';\nimport { Change } from '../core/view/Change';\nimport { CancelEvent, DataEvent, EventType } from '../core/view/Event';\nimport {\n  CallbackContext,\n  EventRegistration,\n  QueryContext,\n  UserCallback\n} from '../core/view/EventRegistration';\nimport {\n  QueryParams,\n  queryParamsEndAt,\n  queryParamsEndBefore,\n  queryParamsGetQueryObject,\n  queryParamsLimitToFirst,\n  queryParamsLimitToLast,\n  queryParamsOrderBy,\n  queryParamsStartAfter,\n  queryParamsStartAt\n} from '../core/view/QueryParams';\n\nimport { Database } from './Database';\nimport { OnDisconnect } from './OnDisconnect';\nimport {\n  ListenOptions,\n  Query as Query,\n  DatabaseReference,\n  Unsubscribe,\n  ThenableReference\n} from './Reference';\n\n/**\n * @internal\n */\nexport class QueryImpl implements Query, QueryContext {\n  /**\n   * @hideconstructor\n   */\n  constructor(\n    readonly _repo: Repo,\n    readonly _path: Path,\n    readonly _queryParams: QueryParams,\n    readonly _orderByCalled: boolean\n  ) {}\n\n  get key(): string | null {\n    if (pathIsEmpty(this._path)) {\n      return null;\n    } else {\n      return pathGetBack(this._path);\n    }\n  }\n\n  get ref(): DatabaseReference {\n    return new ReferenceImpl(this._repo, this._path);\n  }\n\n  get _queryIdentifier(): string {\n    const obj = queryParamsGetQueryObject(this._queryParams);\n    const id = ObjectToUniqueKey(obj);\n    return id === '{}' ? 'default' : id;\n  }\n\n  /**\n   * An object representation of the query parameters used by this Query.\n   */\n  get _queryObject(): object {\n    return queryParamsGetQueryObject(this._queryParams);\n  }\n\n  isEqual(other: QueryImpl | null): boolean {\n    other = getModularInstance(other);\n    if (!(other instanceof QueryImpl)) {\n      return false;\n    }\n\n    const sameRepo = this._repo === other._repo;\n    const samePath = pathEquals(this._path, other._path);\n    const sameQueryIdentifier =\n      this._queryIdentifier === other._queryIdentifier;\n\n    return sameRepo && samePath && sameQueryIdentifier;\n  }\n\n  toJSON(): string {\n    return this.toString();\n  }\n\n  toString(): string {\n    return this._repo.toString() + pathToUrlEncodedString(this._path);\n  }\n}\n\n/**\n * Validates that no other order by call has been made\n */\nfunction validateNoPreviousOrderByCall(query: QueryImpl, fnName: string) {\n  if (query._orderByCalled === true) {\n    throw new Error(fnName + \": You can't combine multiple orderBy calls.\");\n  }\n}\n\n/**\n * Validates start/end values for queries.\n */\nfunction validateQueryEndpoints(params: QueryParams) {\n  let startNode = null;\n  let endNode = null;\n  if (params.hasStart()) {\n    startNode = params.getIndexStartValue();\n  }\n  if (params.hasEnd()) {\n    endNode = params.getIndexEndValue();\n  }\n\n  if (params.getIndex() === KEY_INDEX) {\n    const tooManyArgsError =\n      'Query: When ordering by key, you may only pass one argument to ' +\n      'startAt(), endAt(), or equalTo().';\n    const wrongArgTypeError =\n      'Query: When ordering by key, the argument passed to startAt(), startAfter(), ' +\n      'endAt(), endBefore(), or equalTo() must be a string.';\n    if (params.hasStart()) {\n      const startName = params.getIndexStartName();\n      if (startName !== MIN_NAME) {\n        throw new Error(tooManyArgsError);\n      } else if (typeof startNode !== 'string') {\n        throw new Error(wrongArgTypeError);\n      }\n    }\n    if (params.hasEnd()) {\n      const endName = params.getIndexEndName();\n      if (endName !== MAX_NAME) {\n        throw new Error(tooManyArgsError);\n      } else if (typeof endNode !== 'string') {\n        throw new Error(wrongArgTypeError);\n      }\n    }\n  } else if (params.getIndex() === PRIORITY_INDEX) {\n    if (\n      (startNode != null && !isValidPriority(startNode)) ||\n      (endNode != null && !isValidPriority(endNode))\n    ) {\n      throw new Error(\n        'Query: When ordering by priority, the first argument passed to startAt(), ' +\n          'startAfter() endAt(), endBefore(), or equalTo() must be a valid priority value ' +\n          '(null, a number, or a string).'\n      );\n    }\n  } else {\n    assert(\n      params.getIndex() instanceof PathIndex ||\n        params.getIndex() === VALUE_INDEX,\n      'unknown index type.'\n    );\n    if (\n      (startNode != null && typeof startNode === 'object') ||\n      (endNode != null && typeof endNode === 'object')\n    ) {\n      throw new Error(\n        'Query: First argument passed to startAt(), startAfter(), endAt(), endBefore(), or ' +\n          'equalTo() cannot be an object.'\n      );\n    }\n  }\n}\n\n/**\n * Validates that limit* has been called with the correct combination of parameters\n */\nfunction validateLimit(params: QueryParams) {\n  if (\n    params.hasStart() &&\n    params.hasEnd() &&\n    params.hasLimit() &&\n    !params.hasAnchoredLimit()\n  ) {\n    throw new Error(\n      \"Query: Can't combine startAt(), startAfter(), endAt(), endBefore(), and limit(). Use \" +\n        'limitToFirst() or limitToLast() instead.'\n    );\n  }\n}\n\n/**\n * @internal\n */\nexport class ReferenceImpl extends QueryImpl implements DatabaseReference {\n  /** @hideconstructor */\n  constructor(repo: Repo, path: Path) {\n    super(repo, path, new QueryParams(), false);\n  }\n\n  get parent(): ReferenceImpl | null {\n    const parentPath = pathParent(this._path);\n    return parentPath === null\n      ? null\n      : new ReferenceImpl(this._repo, parentPath);\n  }\n\n  get root(): ReferenceImpl {\n    let ref: ReferenceImpl = this;\n    while (ref.parent !== null) {\n      ref = ref.parent;\n    }\n    return ref;\n  }\n}\n\n/**\n * A `DataSnapshot` contains data from a Database location.\n *\n * Any time you read data from the Database, you receive the data as a\n * `DataSnapshot`. A `DataSnapshot` is passed to the event callbacks you attach\n * with `on()` or `once()`. You can extract the contents of the snapshot as a\n * JavaScript object by calling the `val()` method. Alternatively, you can\n * traverse into the snapshot by calling `child()` to return child snapshots\n * (which you could then call `val()` on).\n *\n * A `DataSnapshot` is an efficiently generated, immutable copy of the data at\n * a Database location. It cannot be modified and will never change (to modify\n * data, you always call the `set()` method on a `Reference` directly).\n */\nexport class DataSnapshot {\n  /**\n   * @param _node - A SnapshotNode to wrap.\n   * @param ref - The location this snapshot came from.\n   * @param _index - The iteration order for this snapshot\n   * @hideconstructor\n   */\n  constructor(\n    readonly _node: Node,\n    /**\n     * The location of this DataSnapshot.\n     */\n    readonly ref: DatabaseReference,\n    readonly _index: Index\n  ) {}\n\n  /**\n   * Gets the priority value of the data in this `DataSnapshot`.\n   *\n   * Applications need not use priority but can order collections by\n   * ordinary properties (see\n   * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data |Sorting and filtering data}\n   * ).\n   */\n  get priority(): string | number | null {\n    // typecast here because we never return deferred values or internal priorities (MAX_PRIORITY)\n    return this._node.getPriority().val() as string | number | null;\n  }\n\n  /**\n   * The key (last part of the path) of the location of this `DataSnapshot`.\n   *\n   * The last token in a Database location is considered its key. For example,\n   * \"ada\" is the key for the /users/ada/ node. Accessing the key on any\n   * `DataSnapshot` will return the key for the location that generated it.\n   * However, accessing the key on the root URL of a Database will return\n   * `null`.\n   */\n  get key(): string | null {\n    return this.ref.key;\n  }\n\n  /** Returns the number of child properties of this `DataSnapshot`. */\n  get size(): number {\n    return this._node.numChildren();\n  }\n\n  /**\n   * Gets another `DataSnapshot` for the location at the specified relative path.\n   *\n   * Passing a relative path to the `child()` method of a DataSnapshot returns\n   * another `DataSnapshot` for the location at the specified relative path. The\n   * relative path can either be a simple child name (for example, \"ada\") or a\n   * deeper, slash-separated path (for example, \"ada/name/first\"). If the child\n   * location has no data, an empty `DataSnapshot` (that is, a `DataSnapshot`\n   * whose value is `null`) is returned.\n   *\n   * @param path - A relative path to the location of child data.\n   */\n  child(path: string): DataSnapshot {\n    const childPath = new Path(path);\n    const childRef = child(this.ref, path);\n    return new DataSnapshot(\n      this._node.getChild(childPath),\n      childRef,\n      PRIORITY_INDEX\n    );\n  }\n  /**\n   * Returns true if this `DataSnapshot` contains any data. It is slightly more\n   * efficient than using `snapshot.val() !== null`.\n   */\n  exists(): boolean {\n    return !this._node.isEmpty();\n  }\n\n  /**\n   * Exports the entire contents of the DataSnapshot as a JavaScript object.\n   *\n   * The `exportVal()` method is similar to `val()`, except priority information\n   * is included (if available), making it suitable for backing up your data.\n   *\n   * @returns The DataSnapshot's contents as a JavaScript value (Object,\n   *   Array, string, number, boolean, or `null`).\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  exportVal(): any {\n    return this._node.val(true);\n  }\n\n  /**\n   * Enumerates the top-level children in the `DataSnapshot`.\n   *\n   * Because of the way JavaScript objects work, the ordering of data in the\n   * JavaScript object returned by `val()` is not guaranteed to match the\n   * ordering on the server nor the ordering of `onChildAdded()` events. That is\n   * where `forEach()` comes in handy. It guarantees the children of a\n   * `DataSnapshot` will be iterated in their query order.\n   *\n   * If no explicit `orderBy*()` method is used, results are returned\n   * ordered by key (unless priorities are used, in which case, results are\n   * returned by priority).\n   *\n   * @param action - A function that will be called for each child DataSnapshot.\n   * The callback can return true to cancel further enumeration.\n   * @returns true if enumeration was canceled due to your callback returning\n   * true.\n   */\n  forEach(action: (child: DataSnapshot) => boolean | void): boolean {\n    if (this._node.isLeafNode()) {\n      return false;\n    }\n\n    const childrenNode = this._node as ChildrenNode;\n    // Sanitize the return value to a boolean. ChildrenNode.forEachChild has a weird return type...\n    return !!childrenNode.forEachChild(this._index, (key, node) => {\n      return action(\n        new DataSnapshot(node, child(this.ref, key), PRIORITY_INDEX)\n      );\n    });\n  }\n\n  /**\n   * Returns true if the specified child path has (non-null) data.\n   *\n   * @param path - A relative path to the location of a potential child.\n   * @returns `true` if data exists at the specified child path; else\n   *  `false`.\n   */\n  hasChild(path: string): boolean {\n    const childPath = new Path(path);\n    return !this._node.getChild(childPath).isEmpty();\n  }\n\n  /**\n   * Returns whether or not the `DataSnapshot` has any non-`null` child\n   * properties.\n   *\n   * You can use `hasChildren()` to determine if a `DataSnapshot` has any\n   * children. If it does, you can enumerate them using `forEach()`. If it\n   * doesn't, then either this snapshot contains a primitive value (which can be\n   * retrieved with `val()`) or it is empty (in which case, `val()` will return\n   * `null`).\n   *\n   * @returns true if this snapshot has any children; else false.\n   */\n  hasChildren(): boolean {\n    if (this._node.isLeafNode()) {\n      return false;\n    } else {\n      return !this._node.isEmpty();\n    }\n  }\n\n  /**\n   * Returns a JSON-serializable representation of this object.\n   */\n  toJSON(): object | null {\n    return this.exportVal();\n  }\n\n  /**\n   * Extracts a JavaScript value from a `DataSnapshot`.\n   *\n   * Depending on the data in a `DataSnapshot`, the `val()` method may return a\n   * scalar type (string, number, or boolean), an array, or an object. It may\n   * also return null, indicating that the `DataSnapshot` is empty (contains no\n   * data).\n   *\n   * @returns The DataSnapshot's contents as a JavaScript value (Object,\n   *   Array, string, number, boolean, or `null`).\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  val(): any {\n    return this._node.val();\n  }\n}\n/**\n *\n * Returns a `Reference` representing the location in the Database\n * corresponding to the provided path. If no path is provided, the `Reference`\n * will point to the root of the Database.\n *\n * @param db - The database instance to obtain a reference for.\n * @param path - Optional path representing the location the returned\n *   `Reference` will point. If not provided, the returned `Reference` will\n *   point to the root of the Database.\n * @returns If a path is provided, a `Reference`\n *   pointing to the provided path. Otherwise, a `Reference` pointing to the\n *   root of the Database.\n */\nexport function ref(db: Database, path?: string): DatabaseReference {\n  db = getModularInstance(db);\n  db._checkNotDeleted('ref');\n  return path !== undefined ? child(db._root, path) : db._root;\n}\n\n/**\n * Returns a `Reference` representing the location in the Database\n * corresponding to the provided Firebase URL.\n *\n * An exception is thrown if the URL is not a valid Firebase Database URL or it\n * has a different domain than the current `Database` instance.\n *\n * Note that all query parameters (`orderBy`, `limitToLast`, etc.) are ignored\n * and are not applied to the returned `Reference`.\n *\n * @param db - The database instance to obtain a reference for.\n * @param url - The Firebase URL at which the returned `Reference` will\n *   point.\n * @returns A `Reference` pointing to the provided\n *   Firebase URL.\n */\nexport function refFromURL(db: Database, url: string): DatabaseReference {\n  db = getModularInstance(db);\n  db._checkNotDeleted('refFromURL');\n  const parsedURL = parseRepoInfo(url, db._repo.repoInfo_.nodeAdmin);\n  validateUrl('refFromURL', parsedURL);\n\n  const repoInfo = parsedURL.repoInfo;\n  if (\n    !db._repo.repoInfo_.isCustomHost() &&\n    repoInfo.host !== db._repo.repoInfo_.host\n  ) {\n    fatal(\n      'refFromURL' +\n        ': Host name does not match the current database: ' +\n        '(found ' +\n        repoInfo.host +\n        ' but expected ' +\n        db._repo.repoInfo_.host +\n        ')'\n    );\n  }\n\n  return ref(db, parsedURL.path.toString());\n}\n\n/**\n * Gets a `Reference` for the location at the specified relative path.\n *\n * The relative path can either be a simple child name (for example, \"ada\") or\n * a deeper slash-separated path (for example, \"ada/name/first\").\n *\n * @param parent - The parent location.\n * @param path - A relative path from this location to the desired child\n *   location.\n * @returns The specified child location.\n */\nexport function child(\n  parent: DatabaseReference,\n  path: string\n): DatabaseReference {\n  parent = getModularInstance(parent);\n  if (pathGetFront(parent._path) === null) {\n    validateRootPathString('child', 'path', path, false);\n  } else {\n    validatePathString('child', 'path', path, false);\n  }\n  return new ReferenceImpl(parent._repo, pathChild(parent._path, path));\n}\n\n/**\n * Returns an `OnDisconnect` object - see\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\n * for more information on how to use it.\n *\n * @param ref - The reference to add OnDisconnect triggers for.\n */\nexport function onDisconnect(ref: DatabaseReference): OnDisconnect {\n  ref = getModularInstance(ref) as ReferenceImpl;\n  return new OnDisconnect(ref._repo, ref._path);\n}\n\nexport interface ThenableReferenceImpl\n  extends ReferenceImpl,\n    Pick<Promise<ReferenceImpl>, 'then' | 'catch'> {}\n\n/**\n * Generates a new child location using a unique key and returns its\n * `Reference`.\n *\n * This is the most common pattern for adding data to a collection of items.\n *\n * If you provide a value to `push()`, the value is written to the\n * generated location. If you don't pass a value, nothing is written to the\n * database and the child remains empty (but you can use the `Reference`\n * elsewhere).\n *\n * The unique keys generated by `push()` are ordered by the current time, so the\n * resulting list of items is chronologically sorted. The keys are also\n * designed to be unguessable (they contain 72 random bits of entropy).\n *\n * See {@link https://firebase.google.com/docs/database/web/lists-of-data#append_to_a_list_of_data | Append to a list of data}\n * </br>See {@link ttps://firebase.googleblog.com/2015/02/the-2120-ways-to-ensure-unique_68.html | The 2^120 Ways to Ensure Unique Identifiers}\n *\n * @param parent - The parent location.\n * @param value - Optional value to be written at the generated location.\n * @returns Combined `Promise` and `Reference`; resolves when write is complete,\n * but can be used immediately as the `Reference` to the child location.\n */\nexport function push(\n  parent: DatabaseReference,\n  value?: unknown\n): ThenableReference {\n  parent = getModularInstance(parent);\n  validateWritablePath('push', parent._path);\n  validateFirebaseDataArg('push', value, parent._path, true);\n  const now = repoServerTime(parent._repo);\n  const name = nextPushId(now);\n\n  // push() returns a ThennableReference whose promise is fulfilled with a\n  // regular Reference. We use child() to create handles to two different\n  // references. The first is turned into a ThennableReference below by adding\n  // then() and catch() methods and is used as the return value of push(). The\n  // second remains a regular Reference and is used as the fulfilled value of\n  // the first ThennableReference.\n  const thennablePushRef: Partial<ThenableReferenceImpl> = child(\n    parent,\n    name\n  ) as ReferenceImpl;\n  const pushRef = child(parent, name) as ReferenceImpl;\n\n  let promise: Promise<ReferenceImpl>;\n  if (value != null) {\n    promise = set(pushRef, value).then(() => pushRef);\n  } else {\n    promise = Promise.resolve(pushRef);\n  }\n\n  thennablePushRef.then = promise.then.bind(promise);\n  thennablePushRef.catch = promise.then.bind(promise, undefined);\n  return thennablePushRef as ThenableReferenceImpl;\n}\n\n/**\n * Removes the data at this Database location.\n *\n * Any data at child locations will also be deleted.\n *\n * The effect of the remove will be visible immediately and the corresponding\n * event 'value' will be triggered. Synchronization of the remove to the\n * Firebase servers will also be started, and the returned Promise will resolve\n * when complete. If provided, the onComplete callback will be called\n * asynchronously after synchronization has finished.\n *\n * @param ref - The location to remove.\n * @returns Resolves when remove on server is complete.\n */\nexport function remove(ref: DatabaseReference): Promise<void> {\n  validateWritablePath('remove', ref._path);\n  return set(ref, null);\n}\n\n/**\n * Writes data to this Database location.\n *\n * This will overwrite any data at this location and all child locations.\n *\n * The effect of the write will be visible immediately, and the corresponding\n * events (\"value\", \"child_added\", etc.) will be triggered. Synchronization of\n * the data to the Firebase servers will also be started, and the returned\n * Promise will resolve when complete. If provided, the `onComplete` callback\n * will be called asynchronously after synchronization has finished.\n *\n * Passing `null` for the new value is equivalent to calling `remove()`; namely,\n * all data at this location and all child locations will be deleted.\n *\n * `set()` will remove any priority stored at this location, so if priority is\n * meant to be preserved, you need to use `setWithPriority()` instead.\n *\n * Note that modifying data with `set()` will cancel any pending transactions\n * at that location, so extreme care should be taken if mixing `set()` and\n * `transaction()` to modify the same data.\n *\n * A single `set()` will generate a single \"value\" event at the location where\n * the `set()` was performed.\n *\n * @param ref - The location to write to.\n * @param value - The value to be written (string, number, boolean, object,\n *   array, or null).\n * @returns Resolves when write to server is complete.\n */\nexport function set(ref: DatabaseReference, value: unknown): Promise<void> {\n  ref = getModularInstance(ref);\n  validateWritablePath('set', ref._path);\n  validateFirebaseDataArg('set', value, ref._path, false);\n  const deferred = new Deferred<void>();\n  repoSetWithPriority(\n    ref._repo,\n    ref._path,\n    value,\n    /*priority=*/ null,\n    deferred.wrapCallback(() => {})\n  );\n  return deferred.promise;\n}\n\n/**\n * Sets a priority for the data at this Database location.\n *\n * Applications need not use priority but can order collections by\n * ordinary properties (see\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\n * ).\n *\n * @param ref - The location to write to.\n * @param priority - The priority to be written (string, number, or null).\n * @returns Resolves when write to server is complete.\n */\nexport function setPriority(\n  ref: DatabaseReference,\n  priority: string | number | null\n): Promise<void> {\n  ref = getModularInstance(ref);\n  validateWritablePath('setPriority', ref._path);\n  validatePriority('setPriority', priority, false);\n  const deferred = new Deferred<void>();\n  repoSetWithPriority(\n    ref._repo,\n    pathChild(ref._path, '.priority'),\n    priority,\n    null,\n    deferred.wrapCallback(() => {})\n  );\n  return deferred.promise;\n}\n\n/**\n * Writes data the Database location. Like `set()` but also specifies the\n * priority for that data.\n *\n * Applications need not use priority but can order collections by\n * ordinary properties (see\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\n * ).\n *\n * @param ref - The location to write to.\n * @param value - The value to be written (string, number, boolean, object,\n *   array, or null).\n * @param priority - The priority to be written (string, number, or null).\n * @returns Resolves when write to server is complete.\n */\nexport function setWithPriority(\n  ref: DatabaseReference,\n  value: unknown,\n  priority: string | number | null\n): Promise<void> {\n  validateWritablePath('setWithPriority', ref._path);\n  validateFirebaseDataArg('setWithPriority', value, ref._path, false);\n  validatePriority('setWithPriority', priority, false);\n  if (ref.key === '.length' || ref.key === '.keys') {\n    throw 'setWithPriority failed: ' + ref.key + ' is a read-only object.';\n  }\n\n  const deferred = new Deferred<void>();\n  repoSetWithPriority(\n    ref._repo,\n    ref._path,\n    value,\n    priority,\n    deferred.wrapCallback(() => {})\n  );\n  return deferred.promise;\n}\n\n/**\n * Writes multiple values to the Database at once.\n *\n * The `values` argument contains multiple property-value pairs that will be\n * written to the Database together. Each child property can either be a simple\n * property (for example, \"name\") or a relative path (for example,\n * \"name/first\") from the current location to the data to update.\n *\n * As opposed to the `set()` method, `update()` can be use to selectively update\n * only the referenced properties at the current location (instead of replacing\n * all the child properties at the current location).\n *\n * The effect of the write will be visible immediately, and the corresponding\n * events ('value', 'child_added', etc.) will be triggered. Synchronization of\n * the data to the Firebase servers will also be started, and the returned\n * Promise will resolve when complete. If provided, the `onComplete` callback\n * will be called asynchronously after synchronization has finished.\n *\n * A single `update()` will generate a single \"value\" event at the location\n * where the `update()` was performed, regardless of how many children were\n * modified.\n *\n * Note that modifying data with `update()` will cancel any pending\n * transactions at that location, so extreme care should be taken if mixing\n * `update()` and `transaction()` to modify the same data.\n *\n * Passing `null` to `update()` will remove the data at this location.\n *\n * See\n * {@link https://firebase.googleblog.com/2015/09/introducing-multi-location-updates-and_86.html | Introducing multi-location updates and more}.\n *\n * @param ref - The location to write to.\n * @param values - Object containing multiple values.\n * @returns Resolves when update on server is complete.\n */\nexport function update(ref: DatabaseReference, values: object): Promise<void> {\n  validateFirebaseMergeDataArg('update', values, ref._path, false);\n  const deferred = new Deferred<void>();\n  repoUpdate(\n    ref._repo,\n    ref._path,\n    values as Record<string, unknown>,\n    deferred.wrapCallback(() => {})\n  );\n  return deferred.promise;\n}\n\n/**\n * Gets the most up-to-date result for this query.\n *\n * @param query - The query to run.\n * @returns A `Promise` which resolves to the resulting DataSnapshot if a value is\n * available, or rejects if the client is unable to return a value (e.g., if the\n * server is unreachable and there is nothing cached).\n */\nexport function get(query: Query): Promise<DataSnapshot> {\n  query = getModularInstance(query) as QueryImpl;\n  return repoGetValue(query._repo, query).then(node => {\n    return new DataSnapshot(\n      node,\n      new ReferenceImpl(query._repo, query._path),\n      query._queryParams.getIndex()\n    );\n  });\n}\n\n/**\n * Represents registration for 'value' events.\n */\nexport class ValueEventRegistration implements EventRegistration {\n  constructor(private callbackContext: CallbackContext) {}\n\n  respondsTo(eventType: string): boolean {\n    return eventType === 'value';\n  }\n\n  createEvent(change: Change, query: QueryContext): DataEvent {\n    const index = query._queryParams.getIndex();\n    return new DataEvent(\n      'value',\n      this,\n      new DataSnapshot(\n        change.snapshotNode,\n        new ReferenceImpl(query._repo, query._path),\n        index\n      )\n    );\n  }\n\n  getEventRunner(eventData: CancelEvent | DataEvent): () => void {\n    if (eventData.getEventType() === 'cancel') {\n      return () =>\n        this.callbackContext.onCancel((eventData as CancelEvent).error);\n    } else {\n      return () =>\n        this.callbackContext.onValue((eventData as DataEvent).snapshot, null);\n    }\n  }\n\n  createCancelEvent(error: Error, path: Path): CancelEvent | null {\n    if (this.callbackContext.hasCancelCallback) {\n      return new CancelEvent(this, error, path);\n    } else {\n      return null;\n    }\n  }\n\n  matches(other: EventRegistration): boolean {\n    if (!(other instanceof ValueEventRegistration)) {\n      return false;\n    } else if (!other.callbackContext || !this.callbackContext) {\n      // If no callback specified, we consider it to match any callback.\n      return true;\n    } else {\n      return other.callbackContext.matches(this.callbackContext);\n    }\n  }\n\n  hasAnyCallback(): boolean {\n    return this.callbackContext !== null;\n  }\n}\n\n/**\n * Represents the registration of a child_x event.\n */\nexport class ChildEventRegistration implements EventRegistration {\n  constructor(\n    private eventType: string,\n    private callbackContext: CallbackContext | null\n  ) {}\n\n  respondsTo(eventType: string): boolean {\n    let eventToCheck =\n      eventType === 'children_added' ? 'child_added' : eventType;\n    eventToCheck =\n      eventToCheck === 'children_removed' ? 'child_removed' : eventToCheck;\n    return this.eventType === eventToCheck;\n  }\n\n  createCancelEvent(error: Error, path: Path): CancelEvent | null {\n    if (this.callbackContext.hasCancelCallback) {\n      return new CancelEvent(this, error, path);\n    } else {\n      return null;\n    }\n  }\n\n  createEvent(change: Change, query: QueryContext): DataEvent {\n    assert(change.childName != null, 'Child events should have a childName.');\n    const childRef = child(\n      new ReferenceImpl(query._repo, query._path),\n      change.childName\n    );\n    const index = query._queryParams.getIndex();\n    return new DataEvent(\n      change.type as EventType,\n      this,\n      new DataSnapshot(change.snapshotNode, childRef, index),\n      change.prevName\n    );\n  }\n\n  getEventRunner(eventData: CancelEvent | DataEvent): () => void {\n    if (eventData.getEventType() === 'cancel') {\n      return () =>\n        this.callbackContext.onCancel((eventData as CancelEvent).error);\n    } else {\n      return () =>\n        this.callbackContext.onValue(\n          (eventData as DataEvent).snapshot,\n          (eventData as DataEvent).prevName\n        );\n    }\n  }\n\n  matches(other: EventRegistration): boolean {\n    if (other instanceof ChildEventRegistration) {\n      return (\n        this.eventType === other.eventType &&\n        (!this.callbackContext ||\n          !other.callbackContext ||\n          this.callbackContext.matches(other.callbackContext))\n      );\n    }\n\n    return false;\n  }\n\n  hasAnyCallback(): boolean {\n    return !!this.callbackContext;\n  }\n}\n\nfunction addEventListener(\n  query: Query,\n  eventType: EventType,\n  callback: UserCallback,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n) {\n  let cancelCallback: ((error: Error) => unknown) | undefined;\n  if (typeof cancelCallbackOrListenOptions === 'object') {\n    cancelCallback = undefined;\n    options = cancelCallbackOrListenOptions;\n  }\n  if (typeof cancelCallbackOrListenOptions === 'function') {\n    cancelCallback = cancelCallbackOrListenOptions;\n  }\n\n  if (options && options.onlyOnce) {\n    const userCallback = callback;\n    const onceCallback: UserCallback = (dataSnapshot, previousChildName) => {\n      repoRemoveEventCallbackForQuery(query._repo, query, container);\n      userCallback(dataSnapshot, previousChildName);\n    };\n    onceCallback.userCallback = callback.userCallback;\n    onceCallback.context = callback.context;\n    callback = onceCallback;\n  }\n\n  const callbackContext = new CallbackContext(\n    callback,\n    cancelCallback || undefined\n  );\n  const container =\n    eventType === 'value'\n      ? new ValueEventRegistration(callbackContext)\n      : new ChildEventRegistration(eventType, callbackContext);\n  repoAddEventCallbackForQuery(query._repo, query, container);\n  return () => repoRemoveEventCallbackForQuery(query._repo, query, container);\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onValue` event will trigger once with the initial data stored at this\n * location, and then trigger again each time the data changes. The\n * `DataSnapshot` passed to the callback will be for the location at which\n * `on()` was called. It won't trigger until the entire contents has been\n * synchronized. If the location has no data, it will be triggered with an empty\n * `DataSnapshot` (`val()` will return `null`).\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs. The\n * callback will be passed a DataSnapshot.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onValue(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onValue` event will trigger once with the initial data stored at this\n * location, and then trigger again each time the data changes. The\n * `DataSnapshot` passed to the callback will be for the location at which\n * `on()` was called. It won't trigger until the entire contents has been\n * synchronized. If the location has no data, it will be triggered with an empty\n * `DataSnapshot` (`val()` will return `null`).\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs. The\n * callback will be passed a DataSnapshot.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onValue(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onValue` event will trigger once with the initial data stored at this\n * location, and then trigger again each time the data changes. The\n * `DataSnapshot` passed to the callback will be for the location at which\n * `on()` was called. It won't trigger until the entire contents has been\n * synchronized. If the location has no data, it will be triggered with an empty\n * `DataSnapshot` (`val()` will return `null`).\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs. The\n * callback will be passed a DataSnapshot.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onValue(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onValue(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'value',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildAdded` event will be triggered once for each initial child at this\n * location, and it will be triggered again every time a new child is added. The\n * `DataSnapshot` passed into the callback will reflect the data for the\n * relevant child. For ordering purposes, it is passed a second argument which\n * is a string containing the key of the previous sibling child by sort order,\n * or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildAdded(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName?: string | null\n  ) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildAdded` event will be triggered once for each initial child at this\n * location, and it will be triggered again every time a new child is added. The\n * `DataSnapshot` passed into the callback will reflect the data for the\n * relevant child. For ordering purposes, it is passed a second argument which\n * is a string containing the key of the previous sibling child by sort order,\n * or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildAdded(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildAdded` event will be triggered once for each initial child at this\n * location, and it will be triggered again every time a new child is added. The\n * `DataSnapshot` passed into the callback will reflect the data for the\n * relevant child. For ordering purposes, it is passed a second argument which\n * is a string containing the key of the previous sibling child by sort order,\n * or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildAdded(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onChildAdded(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'child_added',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildChanged` event will be triggered when the data stored in a child\n * (or any of its descendants) changes. Note that a single `child_changed` event\n * may represent multiple changes to the child. The `DataSnapshot` passed to the\n * callback will contain the new child contents. For ordering purposes, the\n * callback is also passed a second argument which is a string containing the\n * key of the previous sibling child by sort order, or `null` if it is the first\n * child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildChanged(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildChanged` event will be triggered when the data stored in a child\n * (or any of its descendants) changes. Note that a single `child_changed` event\n * may represent multiple changes to the child. The `DataSnapshot` passed to the\n * callback will contain the new child contents. For ordering purposes, the\n * callback is also passed a second argument which is a string containing the\n * key of the previous sibling child by sort order, or `null` if it is the first\n * child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildChanged(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildChanged` event will be triggered when the data stored in a child\n * (or any of its descendants) changes. Note that a single `child_changed` event\n * may represent multiple changes to the child. The `DataSnapshot` passed to the\n * callback will contain the new child contents. For ordering purposes, the\n * callback is also passed a second argument which is a string containing the\n * key of the previous sibling child by sort order, or `null` if it is the first\n * child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildChanged(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onChildChanged(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'child_changed',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildMoved` event will be triggered when a child's sort order changes\n * such that its position relative to its siblings changes. The `DataSnapshot`\n * passed to the callback will be for the data of the child that has moved. It\n * is also passed a second argument which is a string containing the key of the\n * previous sibling child by sort order, or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildMoved(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildMoved` event will be triggered when a child's sort order changes\n * such that its position relative to its siblings changes. The `DataSnapshot`\n * passed to the callback will be for the data of the child that has moved. It\n * is also passed a second argument which is a string containing the key of the\n * previous sibling child by sort order, or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildMoved(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildMoved` event will be triggered when a child's sort order changes\n * such that its position relative to its siblings changes. The `DataSnapshot`\n * passed to the callback will be for the data of the child that has moved. It\n * is also passed a second argument which is a string containing the key of the\n * previous sibling child by sort order, or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildMoved(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onChildMoved(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'child_moved',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildRemoved` event will be triggered once every time a child is\n * removed. The `DataSnapshot` passed into the callback will be the old data for\n * the child that was removed. A child will get removed when either:\n *\n * - a client explicitly calls `remove()` on that child or one of its ancestors\n * - a client calls `set(null)` on that child or one of its ancestors\n * - that child has all of its children removed\n * - there is a query in effect which now filters out the child (because it's\n *   sort order changed or the max limit was hit)\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildRemoved(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildRemoved` event will be triggered once every time a child is\n * removed. The `DataSnapshot` passed into the callback will be the old data for\n * the child that was removed. A child will get removed when either:\n *\n * - a client explicitly calls `remove()` on that child or one of its ancestors\n * - a client calls `set(null)` on that child or one of its ancestors\n * - that child has all of its children removed\n * - there is a query in effect which now filters out the child (because it's\n *   sort order changed or the max limit was hit)\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildRemoved(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildRemoved` event will be triggered once every time a child is\n * removed. The `DataSnapshot` passed into the callback will be the old data for\n * the child that was removed. A child will get removed when either:\n *\n * - a client explicitly calls `remove()` on that child or one of its ancestors\n * - a client calls `set(null)` on that child or one of its ancestors\n * - that child has all of its children removed\n * - there is a query in effect which now filters out the child (because it's\n *   sort order changed or the max limit was hit)\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildRemoved(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onChildRemoved(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'child_removed',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\nexport { EventType };\n\n/**\n * Detaches a callback previously attached with `on()`.\n *\n * Detach a callback previously attached with `on()`. Note that if `on()` was\n * called multiple times with the same eventType and callback, the callback\n * will be called multiple times for each event, and `off()` must be called\n * multiple times to remove the callback. Calling `off()` on a parent listener\n * will not automatically remove listeners registered on child nodes, `off()`\n * must also be called on any child listeners to remove the callback.\n *\n * If a callback is not specified, all callbacks for the specified eventType\n * will be removed. Similarly, if no eventType is specified, all callbacks\n * for the `Reference` will be removed.\n *\n * Individual listeners can also be removed by invoking their unsubscribe\n * callbacks.\n *\n * @param query - The query that the listener was registered with.\n * @param eventType - One of the following strings: \"value\", \"child_added\",\n * \"child_changed\", \"child_removed\", or \"child_moved.\" If omitted, all callbacks\n * for the `Reference` will be removed.\n * @param callback - The callback function that was passed to `on()` or\n * `undefined` to remove all callbacks.\n */\nexport function off(\n  query: Query,\n  eventType?: EventType,\n  callback?: (\n    snapshot: DataSnapshot,\n    previousChildName?: string | null\n  ) => unknown\n): void {\n  let container: EventRegistration | null = null;\n  const expCallback = callback ? new CallbackContext(callback) : null;\n  if (eventType === 'value') {\n    container = new ValueEventRegistration(expCallback);\n  } else if (eventType) {\n    container = new ChildEventRegistration(eventType, expCallback);\n  }\n  repoRemoveEventCallbackForQuery(query._repo, query, container);\n}\n\n/** Describes the different query constraints available in this SDK. */\nexport type QueryConstraintType =\n  | 'endAt'\n  | 'endBefore'\n  | 'startAt'\n  | 'startAfter'\n  | 'limitToFirst'\n  | 'limitToLast'\n  | 'orderByChild'\n  | 'orderByKey'\n  | 'orderByPriority'\n  | 'orderByValue'\n  | 'equalTo';\n\n/**\n * A `QueryConstraint` is used to narrow the set of documents returned by a\n * Database query. `QueryConstraint`s are created by invoking {@link endAt},\n * {@link endBefore}, {@link startAt}, {@link startAfter}, {@link\n * limitToFirst}, {@link limitToLast}, {@link orderByChild},\n * {@link orderByChild}, {@link orderByKey} , {@link orderByPriority} ,\n * {@link orderByValue}  or {@link equalTo} and\n * can then be passed to {@link query} to create a new query instance that\n * also contains this `QueryConstraint`.\n */\nexport abstract class QueryConstraint {\n  /** The type of this query constraints */\n  abstract readonly type: QueryConstraintType;\n\n  /**\n   * Takes the provided `Query` and returns a copy of the `Query` with this\n   * `QueryConstraint` applied.\n   */\n  abstract _apply<T>(query: QueryImpl): QueryImpl;\n}\n\nclass QueryEndAtConstraint extends QueryConstraint {\n  readonly type: 'endAt';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('endAt', this._value, query._path, true);\n    const newParams = queryParamsEndAt(\n      query._queryParams,\n      this._value,\n      this._key\n    );\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasEnd()) {\n      throw new Error(\n        'endAt: Starting point was already set (by another call to endAt, ' +\n          'endBefore or equalTo).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` with the specified ending point.\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The ending point is inclusive, so children with exactly the specified value\n * will be included in the query. The optional key argument can be used to\n * further limit the range of the query. If it is specified, then children that\n * have exactly the specified value must also have a key name less than or equal\n * to the specified key.\n *\n * You can read more about `endAt()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param value - The value to end at. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to end at, among the children with the previously\n * specified priority. This argument is only allowed if ordering by child,\n * value, or priority.\n */\nexport function endAt(\n  value: number | string | boolean | null,\n  key?: string\n): QueryConstraint {\n  validateKey('endAt', 'key', key, true);\n  return new QueryEndAtConstraint(value, key);\n}\n\nclass QueryEndBeforeConstraint extends QueryConstraint {\n  readonly type: 'endBefore';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('endBefore', this._value, query._path, false);\n    const newParams = queryParamsEndBefore(\n      query._queryParams,\n      this._value,\n      this._key\n    );\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasEnd()) {\n      throw new Error(\n        'endBefore: Starting point was already set (by another call to endAt, ' +\n          'endBefore or equalTo).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` with the specified ending point (exclusive).\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The ending point is exclusive. If only a value is provided, children\n * with a value less than the specified value will be included in the query.\n * If a key is specified, then children must have a value lesss than or equal\n * to the specified value and a a key name less than the specified key.\n *\n * @param value - The value to end before. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to end before, among the children with the\n * previously specified priority. This argument is only allowed if ordering by\n * child, value, or priority.\n */\nexport function endBefore(\n  value: number | string | boolean | null,\n  key?: string\n): QueryConstraint {\n  validateKey('endBefore', 'key', key, true);\n  return new QueryEndBeforeConstraint(value, key);\n}\n\nclass QueryStartAtConstraint extends QueryConstraint {\n  readonly type: 'startAt';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('startAt', this._value, query._path, true);\n    const newParams = queryParamsStartAt(\n      query._queryParams,\n      this._value,\n      this._key\n    );\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasStart()) {\n      throw new Error(\n        'startAt: Starting point was already set (by another call to startAt, ' +\n          'startBefore or equalTo).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` with the specified starting point.\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The starting point is inclusive, so children with exactly the specified value\n * will be included in the query. The optional key argument can be used to\n * further limit the range of the query. If it is specified, then children that\n * have exactly the specified value must also have a key name greater than or\n * equal to the specified key.\n *\n * You can read more about `startAt()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param value - The value to start at. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to start at. This argument is only allowed if\n * ordering by child, value, or priority.\n */\nexport function startAt(\n  value: number | string | boolean | null = null,\n  key?: string\n): QueryConstraint {\n  validateKey('startAt', 'key', key, true);\n  return new QueryStartAtConstraint(value, key);\n}\n\nclass QueryStartAfterConstraint extends QueryConstraint {\n  readonly type: 'startAfter';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('startAfter', this._value, query._path, false);\n    const newParams = queryParamsStartAfter(\n      query._queryParams,\n      this._value,\n      this._key\n    );\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasStart()) {\n      throw new Error(\n        'startAfter: Starting point was already set (by another call to startAt, ' +\n          'startAfter, or equalTo).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` with the specified starting point (exclusive).\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The starting point is exclusive. If only a value is provided, children\n * with a value greater than the specified value will be included in the query.\n * If a key is specified, then children must have a value greater than or equal\n * to the specified value and a a key name greater than the specified key.\n *\n * @param value - The value to start after. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to start after. This argument is only allowed if\n * ordering by child, value, or priority.\n */\nexport function startAfter(\n  value: number | string | boolean | null,\n  key?: string\n): QueryConstraint {\n  validateKey('startAfter', 'key', key, true);\n  return new QueryStartAfterConstraint(value, key);\n}\n\nclass QueryLimitToFirstConstraint extends QueryConstraint {\n  readonly type: 'limitToFirst';\n\n  constructor(private readonly _limit: number) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    if (query._queryParams.hasLimit()) {\n      throw new Error(\n        'limitToFirst: Limit was already set (by another call to limitToFirst ' +\n          'or limitToLast).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      queryParamsLimitToFirst(query._queryParams, this._limit),\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that if limited to the first specific number\n * of children.\n *\n * The `limitToFirst()` method is used to set a maximum number of children to be\n * synced for a given callback. If we set a limit of 100, we will initially only\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\n * stored in our Database, a `child_added` event will fire for each message.\n * However, if we have over 100 messages, we will only receive a `child_added`\n * event for the first 100 ordered messages. As items change, we will receive\n * `child_removed` events for each item that drops out of the active list so\n * that the total number stays at 100.\n *\n * You can read more about `limitToFirst()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param limit - The maximum number of nodes to include in this query.\n */\nexport function limitToFirst(limit: number): QueryConstraint {\n  if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\n    throw new Error('limitToFirst: First argument must be a positive integer.');\n  }\n  return new QueryLimitToFirstConstraint(limit);\n}\n\nclass QueryLimitToLastConstraint extends QueryConstraint {\n  readonly type: 'limitToLast';\n\n  constructor(private readonly _limit: number) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    if (query._queryParams.hasLimit()) {\n      throw new Error(\n        'limitToLast: Limit was already set (by another call to limitToFirst ' +\n          'or limitToLast).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      queryParamsLimitToLast(query._queryParams, this._limit),\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that is limited to return only the last\n * specified number of children.\n *\n * The `limitToLast()` method is used to set a maximum number of children to be\n * synced for a given callback. If we set a limit of 100, we will initially only\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\n * stored in our Database, a `child_added` event will fire for each message.\n * However, if we have over 100 messages, we will only receive a `child_added`\n * event for the last 100 ordered messages. As items change, we will receive\n * `child_removed` events for each item that drops out of the active list so\n * that the total number stays at 100.\n *\n * You can read more about `limitToLast()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param limit - The maximum number of nodes to include in this query.\n */\nexport function limitToLast(limit: number): QueryConstraint {\n  if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\n    throw new Error('limitToLast: First argument must be a positive integer.');\n  }\n\n  return new QueryLimitToLastConstraint(limit);\n}\n\nclass QueryOrderByChildConstraint extends QueryConstraint {\n  readonly type: 'orderByChild';\n\n  constructor(private readonly _path: string) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateNoPreviousOrderByCall(query, 'orderByChild');\n    const parsedPath = new Path(this._path);\n    if (pathIsEmpty(parsedPath)) {\n      throw new Error(\n        'orderByChild: cannot pass in empty path. Use orderByValue() instead.'\n      );\n    }\n    const index = new PathIndex(parsedPath);\n    const newParams = queryParamsOrderBy(query._queryParams, index);\n    validateQueryEndpoints(newParams);\n\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      /*orderByCalled=*/ true\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that orders by the specified child key.\n *\n * Queries can only order by one key at a time. Calling `orderByChild()`\n * multiple times on the same query is an error.\n *\n * Firebase queries allow you to order your data by any child key on the fly.\n * However, if you know in advance what your indexes will be, you can define\n * them via the .indexOn rule in your Security Rules for better performance. See\n * the{@link https://firebase.google.com/docs/database/security/indexing-data}\n * rule for more information.\n *\n * You can read more about `orderByChild()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\n *\n * @param path - The path to order by.\n */\nexport function orderByChild(path: string): QueryConstraint {\n  if (path === '$key') {\n    throw new Error(\n      'orderByChild: \"$key\" is invalid.  Use orderByKey() instead.'\n    );\n  } else if (path === '$priority') {\n    throw new Error(\n      'orderByChild: \"$priority\" is invalid.  Use orderByPriority() instead.'\n    );\n  } else if (path === '$value') {\n    throw new Error(\n      'orderByChild: \"$value\" is invalid.  Use orderByValue() instead.'\n    );\n  }\n  validatePathString('orderByChild', 'path', path, false);\n  return new QueryOrderByChildConstraint(path);\n}\n\nclass QueryOrderByKeyConstraint extends QueryConstraint {\n  readonly type: 'orderByKey';\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateNoPreviousOrderByCall(query, 'orderByKey');\n    const newParams = queryParamsOrderBy(query._queryParams, KEY_INDEX);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      /*orderByCalled=*/ true\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that orders by the key.\n *\n * Sorts the results of a query by their (ascending) key values.\n *\n * You can read more about `orderByKey()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\n */\nexport function orderByKey(): QueryConstraint {\n  return new QueryOrderByKeyConstraint();\n}\n\nclass QueryOrderByPriorityConstraint extends QueryConstraint {\n  readonly type: 'orderByPriority';\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateNoPreviousOrderByCall(query, 'orderByPriority');\n    const newParams = queryParamsOrderBy(query._queryParams, PRIORITY_INDEX);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      /*orderByCalled=*/ true\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that orders by priority.\n *\n * Applications need not use priority but can order collections by\n * ordinary properties (see\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}\n * for alternatives to priority.\n */\nexport function orderByPriority(): QueryConstraint {\n  return new QueryOrderByPriorityConstraint();\n}\n\nclass QueryOrderByValueConstraint extends QueryConstraint {\n  readonly type: 'orderByValue';\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateNoPreviousOrderByCall(query, 'orderByValue');\n    const newParams = queryParamsOrderBy(query._queryParams, VALUE_INDEX);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      /*orderByCalled=*/ true\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that orders by value.\n *\n * If the children of a query are all scalar values (string, number, or\n * boolean), you can order the results by their (ascending) values.\n *\n * You can read more about `orderByValue()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\n */\nexport function orderByValue(): QueryConstraint {\n  return new QueryOrderByValueConstraint();\n}\n\nclass QueryEqualToValueConstraint extends QueryConstraint {\n  readonly type: 'equalTo';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('equalTo', this._value, query._path, false);\n    if (query._queryParams.hasStart()) {\n      throw new Error(\n        'equalTo: Starting point was already set (by another call to startAt/startAfter or ' +\n          'equalTo).'\n      );\n    }\n    if (query._queryParams.hasEnd()) {\n      throw new Error(\n        'equalTo: Ending point was already set (by another call to endAt/endBefore or ' +\n          'equalTo).'\n      );\n    }\n    return new QueryEndAtConstraint(this._value, this._key)._apply(\n      new QueryStartAtConstraint(this._value, this._key)._apply(query)\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` that includes children that match the specified\n * value.\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The optional key argument can be used to further limit the range of the\n * query. If it is specified, then children that have exactly the specified\n * value must also have exactly the specified key as their key name. This can be\n * used to filter result sets with many matches for the same value.\n *\n * You can read more about `equalTo()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param value - The value to match for. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to start at, among the children with the\n * previously specified priority. This argument is only allowed if ordering by\n * child, value, or priority.\n */\nexport function equalTo(\n  value: number | string | boolean | null,\n  key?: string\n): QueryConstraint {\n  validateKey('equalTo', 'key', key, true);\n  return new QueryEqualToValueConstraint(value, key);\n}\n\n/**\n * Creates a new immutable instance of `Query` that is extended to also include\n * additional query constraints.\n *\n * @param query - The Query instance to use as a base for the new constraints.\n * @param queryConstraints - The list of `QueryConstraint`s to apply.\n * @throws if any of the provided query constraints cannot be combined with the\n * existing or new constraints.\n */\nexport function query(\n  query: Query,\n  ...queryConstraints: QueryConstraint[]\n): Query {\n  let queryImpl = getModularInstance(query) as QueryImpl;\n  for (const constraint of queryConstraints) {\n    queryImpl = constraint._apply(queryImpl);\n  }\n  return queryImpl;\n}\n\n/**\n * Define reference constructor in various modules\n *\n * We are doing this here to avoid several circular\n * dependency issues\n */\nsyncPointSetReferenceConstructor(ReferenceImpl);\nsyncTreeSetReferenceConstructor(ReferenceImpl);\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport {\n  _FirebaseService,\n  _getProvider,\n  FirebaseApp,\n  getApp\n} from '@firebase/app';\nimport { AppCheckInternalComponentName } from '@firebase/app-check-interop-types';\nimport { FirebaseAuthInternalName } from '@firebase/auth-interop-types';\nimport { Provider } from '@firebase/component';\nimport {\n  getModularInstance,\n  createMockUserToken,\n  EmulatorMockTokenOptions\n} from '@firebase/util';\n\nimport { AppCheckTokenProvider } from '../core/AppCheckTokenProvider';\nimport {\n  AuthTokenProvider,\n  EmulatorTokenProvider,\n  FirebaseAuthTokenProvider\n} from '../core/AuthTokenProvider';\nimport { Repo, repoInterrupt, repoResume, repoStart } from '../core/Repo';\nimport { RepoInfo } from '../core/RepoInfo';\nimport { parseRepoInfo } from '../core/util/libs/parser';\nimport { newEmptyPath, pathIsEmpty } from '../core/util/Path';\nimport {\n  fatal,\n  log,\n  enableLogging as enableLoggingImpl\n} from '../core/util/util';\nimport { validateUrl } from '../core/util/validation';\n\nimport { ReferenceImpl } from './Reference_impl';\n\nexport { EmulatorMockTokenOptions } from '@firebase/util';\n/**\n * This variable is also defined in the firebase Node.js Admin SDK. Before\n * modifying this definition, consult the definition in:\n *\n * https://github.com/firebase/firebase-admin-node\n *\n * and make sure the two are consistent.\n */\nconst FIREBASE_DATABASE_EMULATOR_HOST_VAR = 'FIREBASE_DATABASE_EMULATOR_HOST';\n\n/**\n * Creates and caches `Repo` instances.\n */\nconst repos: {\n  [appName: string]: {\n    [dbUrl: string]: Repo;\n  };\n} = {};\n\n/**\n * If true, any new `Repo` will be created to use `ReadonlyRestClient` (for testing purposes).\n */\nlet useRestClient = false;\n\n/**\n * Update an existing `Repo` in place to point to a new host/port.\n */\nfunction repoManagerApplyEmulatorSettings(\n  repo: Repo,\n  host: string,\n  port: number,\n  tokenProvider?: AuthTokenProvider\n): void {\n  repo.repoInfo_ = new RepoInfo(\n    `${host}:${port}`,\n    /* secure= */ false,\n    repo.repoInfo_.namespace,\n    repo.repoInfo_.webSocketOnly,\n    repo.repoInfo_.nodeAdmin,\n    repo.repoInfo_.persistenceKey,\n    repo.repoInfo_.includeNamespaceInQueryParams\n  );\n\n  if (tokenProvider) {\n    repo.authTokenProvider_ = tokenProvider;\n  }\n}\n\n/**\n * This function should only ever be called to CREATE a new database instance.\n * @internal\n */\nexport function repoManagerDatabaseFromApp(\n  app: FirebaseApp,\n  authProvider: Provider<FirebaseAuthInternalName>,\n  appCheckProvider?: Provider<AppCheckInternalComponentName>,\n  url?: string,\n  nodeAdmin?: boolean\n): Database {\n  let dbUrl: string | undefined = url || app.options.databaseURL;\n  if (dbUrl === undefined) {\n    if (!app.options.projectId) {\n      fatal(\n        \"Can't determine Firebase Database URL. Be sure to include \" +\n          ' a Project ID when calling firebase.initializeApp().'\n      );\n    }\n\n    log('Using default host for project ', app.options.projectId);\n    dbUrl = `${app.options.projectId}-default-rtdb.firebaseio.com`;\n  }\n\n  let parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\n  let repoInfo = parsedUrl.repoInfo;\n\n  let isEmulator: boolean;\n\n  let dbEmulatorHost: string | undefined = undefined;\n  if (typeof process !== 'undefined') {\n    dbEmulatorHost = process.env[FIREBASE_DATABASE_EMULATOR_HOST_VAR];\n  }\n\n  if (dbEmulatorHost) {\n    isEmulator = true;\n    dbUrl = `http://${dbEmulatorHost}?ns=${repoInfo.namespace}`;\n    parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\n    repoInfo = parsedUrl.repoInfo;\n  } else {\n    isEmulator = !parsedUrl.repoInfo.secure;\n  }\n\n  const authTokenProvider =\n    nodeAdmin && isEmulator\n      ? new EmulatorTokenProvider(EmulatorTokenProvider.OWNER)\n      : new FirebaseAuthTokenProvider(app.name, app.options, authProvider);\n\n  validateUrl('Invalid Firebase Database URL', parsedUrl);\n  if (!pathIsEmpty(parsedUrl.path)) {\n    fatal(\n      'Database URL must point to the root of a Firebase Database ' +\n        '(not including a child path).'\n    );\n  }\n\n  const repo = repoManagerCreateRepo(\n    repoInfo,\n    app,\n    authTokenProvider,\n    new AppCheckTokenProvider(app.name, appCheckProvider)\n  );\n  return new Database(repo, app);\n}\n\n/**\n * Remove the repo and make sure it is disconnected.\n *\n */\nfunction repoManagerDeleteRepo(repo: Repo, appName: string): void {\n  const appRepos = repos[appName];\n  // This should never happen...\n  if (!appRepos || appRepos[repo.key] !== repo) {\n    fatal(`Database ${appName}(${repo.repoInfo_}) has already been deleted.`);\n  }\n  repoInterrupt(repo);\n  delete appRepos[repo.key];\n}\n\n/**\n * Ensures a repo doesn't already exist and then creates one using the\n * provided app.\n *\n * @param repoInfo - The metadata about the Repo\n * @returns The Repo object for the specified server / repoName.\n */\nfunction repoManagerCreateRepo(\n  repoInfo: RepoInfo,\n  app: FirebaseApp,\n  authTokenProvider: AuthTokenProvider,\n  appCheckProvider: AppCheckTokenProvider\n): Repo {\n  let appRepos = repos[app.name];\n\n  if (!appRepos) {\n    appRepos = {};\n    repos[app.name] = appRepos;\n  }\n\n  let repo = appRepos[repoInfo.toURLString()];\n  if (repo) {\n    fatal(\n      'Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.'\n    );\n  }\n  repo = new Repo(repoInfo, useRestClient, authTokenProvider, appCheckProvider);\n  appRepos[repoInfo.toURLString()] = repo;\n\n  return repo;\n}\n\n/**\n * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.\n */\nexport function repoManagerForceRestClient(forceRestClient: boolean): void {\n  useRestClient = forceRestClient;\n}\n\n/**\n * Class representing a Firebase Realtime Database.\n */\nexport class Database implements _FirebaseService {\n  /** Represents a `Database` instance. */\n  readonly 'type' = 'database';\n\n  /** Track if the instance has been used (root or repo accessed) */\n  _instanceStarted: boolean = false;\n\n  /** Backing state for root_ */\n  private _rootInternal?: ReferenceImpl;\n\n  /** @hideconstructor */\n  constructor(\n    public _repoInternal: Repo,\n    /** The {@link @firebase/app#FirebaseApp} associated with this Realtime Database instance. */\n    readonly app: FirebaseApp\n  ) {}\n\n  get _repo(): Repo {\n    if (!this._instanceStarted) {\n      repoStart(\n        this._repoInternal,\n        this.app.options.appId,\n        this.app.options['databaseAuthVariableOverride']\n      );\n      this._instanceStarted = true;\n    }\n    return this._repoInternal;\n  }\n\n  get _root(): ReferenceImpl {\n    if (!this._rootInternal) {\n      this._rootInternal = new ReferenceImpl(this._repo, newEmptyPath());\n    }\n    return this._rootInternal;\n  }\n\n  _delete(): Promise<void> {\n    if (this._rootInternal !== null) {\n      repoManagerDeleteRepo(this._repo, this.app.name);\n      this._repoInternal = null;\n      this._rootInternal = null;\n    }\n    return Promise.resolve();\n  }\n\n  _checkNotDeleted(apiName: string) {\n    if (this._rootInternal === null) {\n      fatal('Cannot call ' + apiName + ' on a deleted database.');\n    }\n  }\n}\n\n/**\n * Returns the instance of the Realtime Database SDK that is associated\n * with the provided {@link @firebase/app#FirebaseApp}. Initializes a new instance with\n * with default settings if no instance exists or if the existing instance uses\n * a custom database URL.\n *\n * @param app - The {@link @firebase/app#FirebaseApp} instance that the returned Realtime\n * Database instance is associated with.\n * @param url - The URL of the Realtime Database instance to connect to. If not\n * provided, the SDK connects to the default instance of the Firebase App.\n * @returns The `Database` instance of the provided app.\n */\nexport function getDatabase(\n  app: FirebaseApp = getApp(),\n  url?: string\n): Database {\n  return _getProvider(app, 'database').getImmediate({\n    identifier: url\n  }) as Database;\n}\n\n/**\n * Modify the provided instance to communicate with the Realtime Database\n * emulator.\n *\n * <p>Note: This method must be called before performing any other operation.\n *\n * @param db - The instance to modify.\n * @param host - The emulator host (ex: localhost)\n * @param port - The emulator port (ex: 8080)\n * @param options.mockUserToken - the mock auth token to use for unit testing Security Rules\n */\nexport function connectDatabaseEmulator(\n  db: Database,\n  host: string,\n  port: number,\n  options: {\n    mockUserToken?: EmulatorMockTokenOptions | string;\n  } = {}\n): void {\n  db = getModularInstance(db);\n  db._checkNotDeleted('useEmulator');\n  if (db._instanceStarted) {\n    fatal(\n      'Cannot call useEmulator() after instance has already been initialized.'\n    );\n  }\n\n  const repo = db._repoInternal;\n  let tokenProvider: EmulatorTokenProvider | undefined = undefined;\n  if (repo.repoInfo_.nodeAdmin) {\n    if (options.mockUserToken) {\n      fatal(\n        'mockUserToken is not supported by the Admin SDK. For client access with mock users, please use the \"firebase\" package instead of \"firebase-admin\".'\n      );\n    }\n    tokenProvider = new EmulatorTokenProvider(EmulatorTokenProvider.OWNER);\n  } else if (options.mockUserToken) {\n    const token =\n      typeof options.mockUserToken === 'string'\n        ? options.mockUserToken\n        : createMockUserToken(options.mockUserToken, db.app.options.projectId);\n    tokenProvider = new EmulatorTokenProvider(token);\n  }\n\n  // Modify the repo to apply emulator settings\n  repoManagerApplyEmulatorSettings(repo, host, port, tokenProvider);\n}\n\n/**\n * Disconnects from the server (all Database operations will be completed\n * offline).\n *\n * The client automatically maintains a persistent connection to the Database\n * server, which will remain active indefinitely and reconnect when\n * disconnected. However, the `goOffline()` and `goOnline()` methods may be used\n * to control the client connection in cases where a persistent connection is\n * undesirable.\n *\n * While offline, the client will no longer receive data updates from the\n * Database. However, all Database operations performed locally will continue to\n * immediately fire events, allowing your application to continue behaving\n * normally. Additionally, each operation performed locally will automatically\n * be queued and retried upon reconnection to the Database server.\n *\n * To reconnect to the Database and begin receiving remote events, see\n * `goOnline()`.\n *\n * @param db - The instance to disconnect.\n */\nexport function goOffline(db: Database): void {\n  db = getModularInstance(db);\n  db._checkNotDeleted('goOffline');\n  repoInterrupt(db._repo);\n}\n\n/**\n * Reconnects to the server and synchronizes the offline Database state\n * with the server state.\n *\n * This method should be used after disabling the active connection with\n * `goOffline()`. Once reconnected, the client will transmit the proper data\n * and fire the appropriate events so that your client \"catches up\"\n * automatically.\n *\n * @param db - The instance to reconnect.\n */\nexport function goOnline(db: Database): void {\n  db = getModularInstance(db);\n  db._checkNotDeleted('goOnline');\n  repoResume(db._repo);\n}\n\n/**\n * Logs debugging information to the console.\n *\n * @param enabled - Enables logging if `true`, disables logging if `false`.\n * @param persistent - Remembers the logging state between page refreshes if\n * `true`.\n */\nexport function enableLogging(enabled: boolean, persistent?: boolean);\n\n/**\n * Logs debugging information to the console.\n *\n * @param logger - A custom logger function to control how things get logged.\n */\nexport function enableLogging(logger: (message: string) => unknown);\n\nexport function enableLogging(\n  logger: boolean | ((message: string) => unknown),\n  persistent?: boolean\n): void {\n  enableLoggingImpl(logger, persistent);\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport {\n  _registerComponent,\n  registerVersion,\n  SDK_VERSION\n} from '@firebase/app';\nimport { Component, ComponentType } from '@firebase/component';\n\nimport { name, version } from '../package.json';\nimport { setSDKVersion } from '../src/core/version';\n\nimport { repoManagerDatabaseFromApp } from './api/Database';\n\nexport function registerDatabase(variant?: string): void {\n  setSDKVersion(SDK_VERSION);\n  _registerComponent(\n    new Component(\n      'database',\n      (container, { instanceIdentifier: url }) => {\n        const app = container.getProvider('app').getImmediate()!;\n        const authProvider = container.getProvider('auth-internal');\n        const appCheckProvider = container.getProvider('app-check-internal');\n        return repoManagerDatabaseFromApp(\n          app,\n          authProvider,\n          appCheckProvider,\n          url\n        );\n      },\n      ComponentType.PUBLIC\n    ).setMultipleInstances(true)\n  );\n  registerVersion(name, version, variant);\n  // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n  registerVersion(name, version, '__BUILD_TARGET__');\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst SERVER_TIMESTAMP = {\n  '.sv': 'timestamp'\n};\n\n/**\n * Returns a placeholder value for auto-populating the current timestamp (time\n * since the Unix epoch, in milliseconds) as determined by the Firebase\n * servers.\n */\nexport function serverTimestamp(): object {\n  return SERVER_TIMESTAMP;\n}\n\n/**\n * Returns a placeholder value that can be used to atomically increment the\n * current database value by the provided delta.\n *\n * @param delta - the amount to modify the current value atomically.\n * @returns A placeholder value for modifying data atomically server-side.\n */\nexport function increment(delta: number): object {\n  return {\n    '.sv': {\n      'increment': delta\n    }\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getModularInstance, Deferred } from '@firebase/util';\n\nimport { repoStartTransaction } from '../core/Repo';\nimport { PRIORITY_INDEX } from '../core/snap/indexes/PriorityIndex';\nimport { Node } from '../core/snap/Node';\nimport { validateWritablePath } from '../core/util/validation';\n\nimport { DatabaseReference } from './Reference';\nimport { DataSnapshot, onValue, ReferenceImpl } from './Reference_impl';\n\n/** An options object to configure transactions. */\nexport interface TransactionOptions {\n  /**\n   * By default, events are raised each time the transaction update function\n   * runs. So if it is run multiple times, you may see intermediate states. You\n   * can set this to false to suppress these intermediate states and instead\n   * wait until the transaction has completed before events are raised.\n   */\n  readonly applyLocally?: boolean;\n}\n\n/**\n * A type for the resolve value of {@link runTransaction}.\n */\nexport class TransactionResult {\n  /** @hideconstructor */\n  constructor(\n    /** Whether the transaction was successfully committed. */\n    readonly committed: boolean,\n    /** The resulting data snapshot. */\n    readonly snapshot: DataSnapshot\n  ) {}\n\n  /** Returns a JSON-serializable representation of this object. */\n  toJSON(): object {\n    return { committed: this.committed, snapshot: this.snapshot.toJSON() };\n  }\n}\n\n/**\n * Atomically modifies the data at this location.\n *\n * Atomically modify the data at this location. Unlike a normal `set()`, which\n * just overwrites the data regardless of its previous value, `runTransaction()` is\n * used to modify the existing value to a new value, ensuring there are no\n * conflicts with other clients writing to the same location at the same time.\n *\n * To accomplish this, you pass `runTransaction()` an update function which is\n * used to transform the current value into a new value. If another client\n * writes to the location before your new value is successfully written, your\n * update function will be called again with the new current value, and the\n * write will be retried. This will happen repeatedly until your write succeeds\n * without conflict or you abort the transaction by not returning a value from\n * your update function.\n *\n * Note: Modifying data with `set()` will cancel any pending transactions at\n * that location, so extreme care should be taken if mixing `set()` and\n * `runTransaction()` to update the same data.\n *\n * Note: When using transactions with Security and Firebase Rules in place, be\n * aware that a client needs `.read` access in addition to `.write` access in\n * order to perform a transaction. This is because the client-side nature of\n * transactions requires the client to read the data in order to transactionally\n * update it.\n *\n * @param ref - The location to atomically modify.\n * @param transactionUpdate - A developer-supplied function which will be passed\n * the current data stored at this location (as a JavaScript object). The\n * function should return the new value it would like written (as a JavaScript\n * object). If `undefined` is returned (i.e. you return with no arguments) the\n * transaction will be aborted and the data at this location will not be\n * modified.\n * @param options - An options object to configure transactions.\n * @returns A `Promise` that can optionally be used instead of the `onComplete`\n * callback to handle success and failure.\n */\nexport function runTransaction(\n  ref: DatabaseReference,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  transactionUpdate: (currentData: any) => unknown,\n  options?: TransactionOptions\n): Promise<TransactionResult> {\n  ref = getModularInstance(ref);\n\n  validateWritablePath('Reference.transaction', ref._path);\n\n  if (ref.key === '.length' || ref.key === '.keys') {\n    throw (\n      'Reference.transaction failed: ' + ref.key + ' is a read-only object.'\n    );\n  }\n\n  const applyLocally = options?.applyLocally ?? true;\n  const deferred = new Deferred<TransactionResult>();\n\n  const promiseComplete = (\n    error: Error | null,\n    committed: boolean,\n    node: Node | null\n  ) => {\n    let dataSnapshot: DataSnapshot | null = null;\n    if (error) {\n      deferred.reject(error);\n    } else {\n      dataSnapshot = new DataSnapshot(\n        node,\n        new ReferenceImpl(ref._repo, ref._path),\n        PRIORITY_INDEX\n      );\n      deferred.resolve(new TransactionResult(committed, dataSnapshot));\n    }\n  };\n\n  // Add a watch to make sure we get server updates.\n  const unwatcher = onValue(ref, () => {});\n\n  repoStartTransaction(\n    ref._repo,\n    ref._path,\n    transactionUpdate,\n    promiseComplete,\n    unwatcher,\n    applyLocally\n  );\n\n  return deferred.promise;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PersistentConnection } from '../core/PersistentConnection';\nimport { RepoInfo } from '../core/RepoInfo';\nimport { Connection } from '../realtime/Connection';\n\nimport { repoManagerForceRestClient } from './Database';\n\nexport const DataConnection = PersistentConnection;\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(PersistentConnection.prototype as any).simpleListen = function (\n  pathString: string,\n  onComplete: (a: unknown) => void\n) {\n  this.sendRequest('q', { p: pathString }, onComplete);\n};\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(PersistentConnection.prototype as any).echo = function (\n  data: unknown,\n  onEcho: (a: unknown) => void\n) {\n  this.sendRequest('echo', { d: data }, onEcho);\n};\n\n// RealTimeConnection properties that we use in tests.\nexport const RealTimeConnection = Connection;\n\n/**\n * @internal\n */\nexport const hijackHash = function (newHash: () => string) {\n  const oldPut = PersistentConnection.prototype.put;\n  PersistentConnection.prototype.put = function (\n    pathString,\n    data,\n    onComplete,\n    hash\n  ) {\n    if (hash !== undefined) {\n      hash = newHash();\n    }\n    oldPut.call(this, pathString, data, onComplete, hash);\n  };\n  return function () {\n    PersistentConnection.prototype.put = oldPut;\n  };\n};\n\nexport const ConnectionTarget = RepoInfo;\n\n/**\n * Forces the RepoManager to create Repos that use ReadonlyRestClient instead of PersistentConnection.\n * @internal\n */\nexport const forceRestClient = function (forceRestClient: boolean) {\n  repoManagerForceRestClient(forceRestClient);\n};\n","/**\n * Firebase Realtime Database\n *\n * @packageDocumentation\n */\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Database } from './api/Database';\nimport { registerDatabase } from './register';\n\nexport * from './api';\n\nregisterDatabase();\n\ndeclare module '@firebase/component' {\n  interface NameServiceMapping {\n    'database': Database;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}